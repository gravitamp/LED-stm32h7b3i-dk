
LED_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e94  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a180  0800a180  0001a180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003b8  24000010  0800a198  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003c8  0800a198  000203c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025832  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004991  00000000  00000000  00045870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001aa8  00000000  00000000  0004a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018a0  00000000  00000000  0004bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000379ea  00000000  00000000  0004d550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002713f  00000000  00000000  00084f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155855  00000000  00000000  000ac079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002018ce  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f14  00000000  00000000  00201920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800a128 	.word	0x0800a128

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800a128 	.word	0x0800a128

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_FMC_Init+0x94>)
 800060a:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <MX_FMC_Init+0x98>)
 800060c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_FMC_Init+0x94>)
 8000610:	2201      	movs	r2, #1
 8000612:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_FMC_Init+0x94>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_FMC_Init+0x94>)
 800061c:	2204      	movs	r2, #4
 800061e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_FMC_Init+0x94>)
 8000622:	2210      	movs	r2, #16
 8000624:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_FMC_Init+0x94>)
 8000628:	2240      	movs	r2, #64	; 0x40
 800062a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_FMC_Init+0x94>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_FMC_Init+0x94>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_FMC_Init+0x94>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_FMC_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_FMC_Init+0x94>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800064a:	2310      	movs	r3, #16
 800064c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800064e:	2310      	movs	r3, #16
 8000650:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000652:	2310      	movs	r3, #16
 8000654:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000656:	2310      	movs	r3, #16
 8000658:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800065a:	2310      	movs	r3, #16
 800065c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800065e:	2310      	movs	r3, #16
 8000660:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000662:	2310      	movs	r3, #16
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_FMC_Init+0x94>)
 800066c:	f007 fc18 	bl	8007ea0 <HAL_SDRAM_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000676:	f000 fdc3 	bl	8001200 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800067a:	bf00      	nop
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2400002c 	.word	0x2400002c
 8000688:	52004140 	.word	0x52004140

0800068c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006a0:	4b34      	ldr	r3, [pc, #208]	; (8000774 <HAL_FMC_MspInit+0xe8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d161      	bne.n	800076c <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 80006a8:	4b32      	ldr	r3, [pc, #200]	; (8000774 <HAL_FMC_MspInit+0xe8>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <HAL_FMC_MspInit+0xec>)
 80006b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80006b4:	4a30      	ldr	r2, [pc, #192]	; (8000778 <HAL_FMC_MspInit+0xec>)
 80006b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ba:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <HAL_FMC_MspInit+0xec>)
 80006c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80006c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 80006cc:	f248 1333 	movw	r3, #33075	; 0x8133
 80006d0:	607b      	str	r3, [r7, #4]
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006de:	230c      	movs	r3, #12
 80006e0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4825      	ldr	r0, [pc, #148]	; (800077c <HAL_FMC_MspInit+0xf0>)
 80006e8:	f001 fbde 	bl	8001ea8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 80006ec:	f24c 7303 	movw	r3, #50947	; 0xc703
 80006f0:	607b      	str	r3, [r7, #4]
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006fe:	230c      	movs	r3, #12
 8000700:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	481e      	ldr	r0, [pc, #120]	; (8000780 <HAL_FMC_MspInit+0xf4>)
 8000708:	f001 fbce 	bl	8001ea8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 800070c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000710:	607b      	str	r3, [r7, #4]
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800071e:	230c      	movs	r3, #12
 8000720:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4817      	ldr	r0, [pc, #92]	; (8000784 <HAL_FMC_MspInit+0xf8>)
 8000728:	f001 fbbe 	bl	8001ea8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 800072c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000730:	607b      	str	r3, [r7, #4]
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800073e:	230c      	movs	r3, #12
 8000740:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4810      	ldr	r0, [pc, #64]	; (8000788 <HAL_FMC_MspInit+0xfc>)
 8000748:	f001 fbae 	bl	8001ea8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 800074c:	23e0      	movs	r3, #224	; 0xe0
 800074e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800075c:	230c      	movs	r3, #12
 800075e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <HAL_FMC_MspInit+0x100>)
 8000766:	f001 fb9f 	bl	8001ea8 <HAL_GPIO_Init>
 800076a:	e000      	b.n	800076e <HAL_FMC_MspInit+0xe2>
    return;
 800076c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	24000060 	.word	0x24000060
 8000778:	58024400 	.word	0x58024400
 800077c:	58021800 	.word	0x58021800
 8000780:	58020c00 	.word	0x58020c00
 8000784:	58021000 	.word	0x58021000
 8000788:	58021400 	.word	0x58021400
 800078c:	58021c00 	.word	0x58021c00

08000790 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000798:	f7ff ff78 	bl	800068c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b090      	sub	sp, #64	; 0x40
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ba:	4b9b      	ldr	r3, [pc, #620]	; (8000a28 <MX_GPIO_Init+0x284>)
 80007bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c0:	4a99      	ldr	r2, [pc, #612]	; (8000a28 <MX_GPIO_Init+0x284>)
 80007c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ca:	4b97      	ldr	r3, [pc, #604]	; (8000a28 <MX_GPIO_Init+0x284>)
 80007cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d8:	4b93      	ldr	r3, [pc, #588]	; (8000a28 <MX_GPIO_Init+0x284>)
 80007da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007de:	4a92      	ldr	r2, [pc, #584]	; (8000a28 <MX_GPIO_Init+0x284>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e8:	4b8f      	ldr	r3, [pc, #572]	; (8000a28 <MX_GPIO_Init+0x284>)
 80007ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80007f6:	4b8c      	ldr	r3, [pc, #560]	; (8000a28 <MX_GPIO_Init+0x284>)
 80007f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007fc:	4a8a      	ldr	r2, [pc, #552]	; (8000a28 <MX_GPIO_Init+0x284>)
 80007fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000802:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000806:	4b88      	ldr	r3, [pc, #544]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000808:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000810:	623b      	str	r3, [r7, #32]
 8000812:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000814:	4b84      	ldr	r3, [pc, #528]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000816:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081a:	4a83      	ldr	r2, [pc, #524]	; (8000a28 <MX_GPIO_Init+0x284>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000824:	4b80      	ldr	r3, [pc, #512]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000826:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	61fb      	str	r3, [r7, #28]
 8000830:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b7d      	ldr	r3, [pc, #500]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000834:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000838:	4a7b      	ldr	r2, [pc, #492]	; (8000a28 <MX_GPIO_Init+0x284>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000842:	4b79      	ldr	r3, [pc, #484]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000850:	4b75      	ldr	r3, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000856:	4a74      	ldr	r2, [pc, #464]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000860:	4b71      	ldr	r3, [pc, #452]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b6e      	ldr	r3, [pc, #440]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	4a6c      	ldr	r2, [pc, #432]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087e:	4b6a      	ldr	r3, [pc, #424]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800088c:	4b66      	ldr	r3, [pc, #408]	; (8000a28 <MX_GPIO_Init+0x284>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	4a65      	ldr	r2, [pc, #404]	; (8000a28 <MX_GPIO_Init+0x284>)
 8000894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000898:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800089c:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <MX_GPIO_Init+0x284>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b5f      	ldr	r3, [pc, #380]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	4a5d      	ldr	r2, [pc, #372]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ba:	4b5b      	ldr	r3, [pc, #364]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c8:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ce:	4a56      	ldr	r2, [pc, #344]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d8:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	f003 0320 	and.w	r3, r3, #32
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b50      	ldr	r3, [pc, #320]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	4a4e      	ldr	r2, [pc, #312]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f6:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <MX_GPIO_Init+0x284>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	210e      	movs	r1, #14
 8000908:	4848      	ldr	r0, [pc, #288]	; (8000a2c <MX_GPIO_Init+0x288>)
 800090a:	f001 fc7d 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f640 0104 	movw	r1, #2052	; 0x804
 8000914:	4846      	ldr	r0, [pc, #280]	; (8000a30 <MX_GPIO_Init+0x28c>)
 8000916:	f001 fc77 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	4844      	ldr	r0, [pc, #272]	; (8000a34 <MX_GPIO_Init+0x290>)
 8000922:	f001 fc71 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2108      	movs	r1, #8
 800092a:	4841      	ldr	r0, [pc, #260]	; (8000a30 <MX_GPIO_Init+0x28c>)
 800092c:	f001 fc6c 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2106      	movs	r1, #6
 8000934:	483f      	ldr	r0, [pc, #252]	; (8000a34 <MX_GPIO_Init+0x290>)
 8000936:	f001 fc67 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 800093a:	2330      	movs	r3, #48	; 0x30
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094c:	4619      	mov	r1, r3
 800094e:	4837      	ldr	r0, [pc, #220]	; (8000a2c <MX_GPIO_Init+0x288>)
 8000950:	f001 faaa 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000954:	230e      	movs	r3, #14
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000968:	4619      	mov	r1, r3
 800096a:	4830      	ldr	r0, [pc, #192]	; (8000a2c <MX_GPIO_Init+0x288>)
 800096c:	f001 fa9c 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000970:	f640 030c 	movw	r3, #2060	; 0x80c
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000986:	4619      	mov	r1, r3
 8000988:	4829      	ldr	r0, [pc, #164]	; (8000a30 <MX_GPIO_Init+0x28c>)
 800098a:	f001 fa8d 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800098e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000994:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a2:	4619      	mov	r1, r3
 80009a4:	4821      	ldr	r0, [pc, #132]	; (8000a2c <MX_GPIO_Init+0x288>)
 80009a6:	f001 fa7f 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 80009aa:	f640 0306 	movw	r3, #2054	; 0x806
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_GPIO_Init+0x290>)
 80009c4:	f001 fa70 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	4816      	ldr	r0, [pc, #88]	; (8000a38 <MX_GPIO_Init+0x294>)
 80009e0:	f001 fa62 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_GPIO_Init+0x290>)
 8000a02:	f001 fa51 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a06:	2304      	movs	r3, #4
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <MX_GPIO_Init+0x298>)
 8000a1c:	f001 fa44 	bl	8001ea8 <HAL_GPIO_Init>

}
 8000a20:	bf00      	nop
 8000a22:	3740      	adds	r7, #64	; 0x40
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	58022000 	.word	0x58022000
 8000a30:	58021800 	.word	0x58021800
 8000a34:	58020000 	.word	0x58020000
 8000a38:	58020800 	.word	0x58020800
 8000a3c:	58021c00 	.word	0x58021c00

08000a40 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <MX_I2C4_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0xC010151E;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_I2C4_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a7c:	f001 fbde 	bl	800223c <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 fbbb 	bl	8001200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000a8e:	f001 fc65 	bl	800235c <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 fbb2 	bl	8001200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_I2C4_Init+0x74>)
 8000aa0:	f001 fca7 	bl	80023f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 fba9 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000064 	.word	0x24000064
 8000ab8:	58001c00 	.word	0x58001c00
 8000abc:	c010151e 	.word	0xc010151e

08000ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0b8      	sub	sp, #224	; 0xe0
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	22b8      	movs	r2, #184	; 0xb8
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f009 fb19 	bl	800a118 <memset>
  if(i2cHandle->Instance==I2C4)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <HAL_I2C_MspInit+0xc0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d142      	bne.n	8000b76 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000af0:	2310      	movs	r3, #16
 8000af2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 ffa2 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b0a:	f000 fb79 	bl	8001200 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_I2C_MspInit+0xc4>)
 8000b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_I2C_MspInit+0xc4>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_I2C_MspInit+0xc4>)
 8000b20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000b2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000b46:	2304      	movs	r3, #4
 8000b48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b54:	f001 f9a8 	bl	8001ea8 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_I2C_MspInit+0xc4>)
 8000b5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b5e:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <HAL_I2C_MspInit+0xc4>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b64:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_I2C_MspInit+0xc4>)
 8000b6a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	37e0      	adds	r7, #224	; 0xe0
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	58001c00 	.word	0x58001c00
 8000b84:	58024400 	.word	0x58024400
 8000b88:	58020c00 	.word	0x58020c00

08000b8c <MX_I2S6_Init>:

I2S_HandleTypeDef hi2s6;

/* I2S6 init function */
void MX_I2S6_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S6_Init 0 */

  /* USER CODE BEGIN I2S6_Init 1 */

  /* USER CODE END I2S6_Init 1 */
  hi2s6.Instance = SPI6;
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_I2S6_Init+0x60>)
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <MX_I2S6_Init+0x64>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2s6.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_I2S6_Init+0x60>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2s6.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_I2S6_Init+0x60>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2s6.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_I2S6_Init+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2s6.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_I2S6_Init+0x60>)
 8000baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bae:	611a      	str	r2, [r3, #16]
  hi2s6.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_I2S6_Init+0x60>)
 8000bb2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bb6:	615a      	str	r2, [r3, #20]
  hi2s6.Init.CPOL = I2S_CPOL_LOW;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_I2S6_Init+0x60>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  hi2s6.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_I2S6_Init+0x60>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hi2s6.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_I2S6_Init+0x60>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hi2s6.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_I2S6_Init+0x60>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s6.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_I2S6_Init+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s6) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_I2S6_Init+0x60>)
 8000bd8:	f001 fc58 	bl	800248c <HAL_I2S_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2S6_Init+0x5a>
  {
    Error_Handler();
 8000be2:	f000 fb0d 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN I2S6_Init 2 */

  /* USER CODE END I2S6_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	240000b0 	.word	0x240000b0
 8000bf0:	58001400 	.word	0x58001400

08000bf4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0b8      	sub	sp, #224	; 0xe0
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	22b8      	movs	r2, #184	; 0xb8
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f009 fa7f 	bl	800a118 <memset>
  if(i2sHandle->Instance==SPI6)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a37      	ldr	r2, [pc, #220]	; (8000cfc <HAL_I2S_MspInit+0x108>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d167      	bne.n	8000cf4 <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8000c24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 ff07 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c40:	f000 fade 	bl	8001200 <Error_Handler>
    }

    /* I2S6 clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c4a:	4a2d      	ldr	r2, [pc, #180]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c4c:	f043 0320 	orr.w	r3, r3, #32
 8000c50:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c56:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c5a:	f003 0320 	and.w	r3, r3, #32
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c68:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_I2S_MspInit+0x10c>)
 8000c92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    PG12     ------> I2S6_SDI
    PG13     ------> I2S6_CK
    PA0     ------> I2S6_WS
    PA3     ------> I2S6_MCK
    */
    GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000c9e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ca2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000cb8:	2305      	movs	r3, #5
 8000cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480f      	ldr	r0, [pc, #60]	; (8000d04 <HAL_I2S_MspInit+0x110>)
 8000cc6:	f001 f8ef 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <HAL_I2S_MspInit+0x114>)
 8000cf0:	f001 f8da 	bl	8001ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	37e0      	adds	r7, #224	; 0xe0
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58001400 	.word	0x58001400
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58021800 	.word	0x58021800
 8000d08:	58020000 	.word	0x58020000

08000d0c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09a      	sub	sp, #104	; 0x68
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d16:	2234      	movs	r2, #52	; 0x34
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f009 f9fc 	bl	800a118 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2234      	movs	r2, #52	; 0x34
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f009 f9f6 	bl	800a118 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d2c:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d2e:	4a4f      	ldr	r2, [pc, #316]	; (8000e6c <MX_LTDC_Init+0x160>)
 8000d30:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d32:	4b4d      	ldr	r3, [pc, #308]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d3e:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d44:	4b48      	ldr	r3, [pc, #288]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000d4a:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000d50:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d52:	2209      	movs	r2, #9
 8000d54:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d58:	222b      	movs	r2, #43	; 0x2b
 8000d5a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8000d5c:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d5e:	2215      	movs	r2, #21
 8000d60:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d64:	f240 220b 	movw	r2, #523	; 0x20b
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d6c:	f240 1225 	movw	r2, #293	; 0x125
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d74:	f240 2213 	movw	r2, #531	; 0x213
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d7c:	f240 1229 	movw	r2, #297	; 0x129
 8000d80:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d8a:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d9a:	4833      	ldr	r0, [pc, #204]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000d9c:	f001 fca2 	bl	80026e4 <HAL_LTDC_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000da6:	f000 fa2b 	bl	8001200 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dca:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000dcc:	2305      	movs	r3, #5
 8000dce:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000dee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	481c      	ldr	r0, [pc, #112]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000df8:	f001 fd44 	bl	8002884 <HAL_LTDC_ConfigLayer>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000e02:	f000 f9fd 	bl	8001200 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e28:	2305      	movs	r3, #5
 8000e2a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_LTDC_Init+0x15c>)
 8000e52:	f001 fd17 	bl	8002884 <HAL_LTDC_ConfigLayer>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000e5c:	f000 f9d0 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3768      	adds	r7, #104	; 0x68
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	24000104 	.word	0x24000104
 8000e6c:	50001000 	.word	0x50001000

08000e70 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ba      	sub	sp, #232	; 0xe8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	22b8      	movs	r2, #184	; 0xb8
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f009 f941 	bl	800a118 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <HAL_LTDC_MspInit+0x170>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	f040 809b 	bne.w	8000fd8 <HAL_LTDC_MspInit+0x168>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ea2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ea6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8000ea8:	2318      	movs	r3, #24
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8000eac:	23c0      	movs	r3, #192	; 0xc0
 8000eae:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8000eb0:	2311      	movs	r3, #17
 8000eb2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fdba 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000eda:	f000 f991 	bl	8001200 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ede:	4b41      	ldr	r3, [pc, #260]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000ee0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000ee4:	4a3f      	ldr	r2, [pc, #252]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000eee:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000ef0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000efc:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000efe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f02:	4a38      	ldr	r2, [pc, #224]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f0c:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000f1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f20:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000f2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f38:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000f3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f3e:	4a29      	ldr	r2, [pc, #164]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <HAL_LTDC_MspInit+0x174>)
 8000f4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8000f56:	23ff      	movs	r3, #255	; 0xff
 8000f58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f6e:	230e      	movs	r3, #14
 8000f70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <HAL_LTDC_MspInit+0x178>)
 8000f7c:	f000 ff94 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8000f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f9a:	230e      	movs	r3, #14
 8000f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000fa0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4811      	ldr	r0, [pc, #68]	; (8000fec <HAL_LTDC_MspInit+0x17c>)
 8000fa8:	f000 ff7e 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8000fac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc6:	230e      	movs	r3, #14
 8000fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <HAL_LTDC_MspInit+0x180>)
 8000fd4:	f000 ff68 	bl	8001ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fd8:	bf00      	nop
 8000fda:	37e8      	adds	r7, #232	; 0xe8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	50001000 	.word	0x50001000
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58022800 	.word	0x58022800
 8000fec:	58022400 	.word	0x58022400
 8000ff0:	58022000 	.word	0x58022000

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f000 fdbc 	bl	8001b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f83a 	bl	8001074 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001000:	f000 f8ca 	bl	8001198 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f7ff fbce 	bl	80007a4 <MX_GPIO_Init>
  MX_FMC_Init();
 8001008:	f7ff faf2 	bl	80005f0 <MX_FMC_Init>
  MX_I2C4_Init();
 800100c:	f7ff fd18 	bl	8000a40 <MX_I2C4_Init>
  MX_I2S6_Init();
 8001010:	f7ff fdbc 	bl	8000b8c <MX_I2S6_Init>
  MX_LTDC_Init();
 8001014:	f7ff fe7a 	bl	8000d0c <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8001018:	f000 f8f8 	bl	800120c <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 800101c:	f000 fa46 	bl	80014ac <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8001020:	f000 fa9e 	bl	8001560 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8001024:	f000 fb2c 	bl	8001680 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001028:	f000 fcc8 	bl	80019bc <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    LEDRGB_On(RED);
 800102c:	2000      	movs	r0, #0
 800102e:	f008 ffbd 	bl	8009fac <LEDRGB_On>
    HAL_Delay(500);
 8001032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001036:	f000 fe2f 	bl	8001c98 <HAL_Delay>
    LEDRGB_On(BLUE);
 800103a:	2002      	movs	r0, #2
 800103c:	f008 ffb6 	bl	8009fac <LEDRGB_On>
    HAL_Delay(500);
 8001040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001044:	f000 fe28 	bl	8001c98 <HAL_Delay>
    LEDRGB_On(PURPLE);
 8001048:	2004      	movs	r0, #4
 800104a:	f008 ffaf 	bl	8009fac <LEDRGB_On>
    HAL_Delay(500);
 800104e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001052:	f000 fe21 	bl	8001c98 <HAL_Delay>
    LEDRGB_On(BLACK);
 8001056:	2007      	movs	r0, #7
 8001058:	f008 ffa8 	bl	8009fac <LEDRGB_On>
    HAL_Delay(500);
 800105c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001060:	f000 fe1a 	bl	8001c98 <HAL_Delay>
    LEDRGB_On(WHITE);
 8001064:	2006      	movs	r0, #6
 8001066:	f008 ffa1 	bl	8009fac <LEDRGB_On>
    HAL_Delay(500);
 800106a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106e:	f000 fe13 	bl	8001c98 <HAL_Delay>
    LEDRGB_On(RED);
 8001072:	e7db      	b.n	800102c <main+0x38>

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b09c      	sub	sp, #112	; 0x70
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	224c      	movs	r2, #76	; 0x4c
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f009 f848 	bl	800a118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2220      	movs	r2, #32
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f009 f842 	bl	800a118 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001094:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <SystemClock_Config+0x11c>)
 8001096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800109a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800109e:	2004      	movs	r0, #4
 80010a0:	f002 fc7e 	bl	80039a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <SystemClock_Config+0x120>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a39      	ldr	r2, [pc, #228]	; (8001194 <SystemClock_Config+0x120>)
 80010ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <SystemClock_Config+0x120>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010c0:	bf00      	nop
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <SystemClock_Config+0x120>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ce:	d1f8      	bne.n	80010c2 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010d0:	f002 fc56 	bl	8003980 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <SystemClock_Config+0x11c>)
 80010d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d8:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <SystemClock_Config+0x11c>)
 80010da:	f023 0318 	bic.w	r3, r3, #24
 80010de:	6713      	str	r3, [r2, #112]	; 0x70

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <SystemClock_Config+0x11c>)
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	f023 0303 	bic.w	r3, r3, #3
 80010e8:	4a29      	ldr	r2, [pc, #164]	; (8001190 <SystemClock_Config+0x11c>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80010f0:	2307      	movs	r3, #7
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010fa:	2301      	movs	r3, #1
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010fe:	2301      	movs	r3, #1
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001102:	2340      	movs	r3, #64	; 0x40
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001106:	2302      	movs	r3, #2
 8001108:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110a:	2302      	movs	r3, #2
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800110e:	230c      	movs	r3, #12
 8001110:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8001112:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001116:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800111c:	2303      	movs	r3, #3
 800111e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001124:	2304      	movs	r3, #4
 8001126:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001128:	2300      	movs	r3, #0
 800112a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fc8d 	bl	8003a54 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001140:	f000 f85e 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	233f      	movs	r3, #63	; 0x3f
 8001146:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2303      	movs	r3, #3
 800114a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001150:	2308      	movs	r3, #8
 8001152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001154:	2340      	movs	r3, #64	; 0x40
 8001156:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001158:	2340      	movs	r3, #64	; 0x40
 800115a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800115c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001160:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2103      	movs	r1, #3
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f876 	bl	800425c <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001176:	f000 f843 	bl	8001200 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800117a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800117e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001182:	2000      	movs	r0, #0
 8001184:	f003 fa20 	bl	80045c8 <HAL_RCC_MCOConfig>
}
 8001188:	bf00      	nop
 800118a:	3770      	adds	r7, #112	; 0x70
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	58024400 	.word	0x58024400
 8001194:	58024800 	.word	0x58024800

08001198 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0ae      	sub	sp, #184	; 0xb8
 800119c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	22b8      	movs	r2, #184	; 0xb8
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f008 ffb7 	bl	800a118 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_OSPI
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <PeriphCommonClock_Config+0x64>)
 80011ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 80011ae:	230c      	movs	r3, #12
 80011b0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 80011b2:	23c8      	movs	r3, #200	; 0xc8
 80011b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 80011be:	2304      	movs	r3, #4
 80011c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80011c2:	2340      	movs	r3, #64	; 0x40
 80011c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80011d2:	2320      	movs	r3, #32
 80011d4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80011d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011da:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80011dc:	2300      	movs	r3, #0
 80011de:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fc30 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80011ee:	f000 f807 	bl	8001200 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	37b8      	adds	r7, #184	; 0xb8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	83010000 	.word	0x83010000

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001224:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <MX_OCTOSPI1_Init+0xbc>)
 8001226:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 800122a:	2201      	movs	r2, #1
 800122c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001236:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800123a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 800123e:	2220      	movs	r2, #32
 8001240:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001244:	2201      	movs	r2, #1
 8001246:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 800125c:	2201      	movs	r2, #1
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001268:	2200      	movs	r2, #0
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 800126e:	2200      	movs	r2, #0
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001274:	2208      	movs	r2, #8
 8001276:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 800127a:	2200      	movs	r2, #0
 800127c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001280:	2200      	movs	r2, #0
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001284:	480f      	ldr	r0, [pc, #60]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 8001286:	f001 fcd5 	bl	8002c34 <HAL_OSPI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8001290:	f7ff ffb6 	bl	8001200 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8001298:	2301      	movs	r3, #1
 800129a:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 800129c:	2301      	movs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_OCTOSPI1_Init+0xc0>)
 80012a2:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_OCTOSPI1_Init+0xb8>)
 80012ae:	f001 fd8d 	bl	8002dcc <HAL_OSPIM_Config>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 80012b8:	f7ff ffa2 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	240001ac 	.word	0x240001ac
 80012c8:	52005000 	.word	0x52005000
 80012cc:	01000001 	.word	0x01000001

080012d0 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(ospiHandle->Instance==OCTOSPI1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a68      	ldr	r2, [pc, #416]	; (8001490 <HAL_OSPI_MspInit+0x1c0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	f040 80ca 	bne.w	8001488 <HAL_OSPI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80012f4:	4b67      	ldr	r3, [pc, #412]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 80012f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012fa:	4a66      	ldr	r2, [pc, #408]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 80012fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001300:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001304:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001306:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800130a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130e:	623b      	str	r3, [r7, #32]
 8001310:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001314:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001318:	4a5e      	ldr	r2, [pc, #376]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001324:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001330:	4b58      	ldr	r3, [pc, #352]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001332:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001336:	4a57      	ldr	r2, [pc, #348]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001340:	4b54      	ldr	r3, [pc, #336]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001342:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001350:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001354:	4a4f      	ldr	r2, [pc, #316]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800135e:	4b4d      	ldr	r3, [pc, #308]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001360:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136c:	4b49      	ldr	r3, [pc, #292]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 800136e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001372:	4a48      	ldr	r2, [pc, #288]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800137c:	4b45      	ldr	r3, [pc, #276]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 800137e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	4b42      	ldr	r3, [pc, #264]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 800138c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001390:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 8001392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001396:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800139a:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 800139c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 80013aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ae:	4a39      	ldr	r2, [pc, #228]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <HAL_OSPI_MspInit+0x1c4>)
 80013ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> OCTOSPIM_P1_IO4
    PH3     ------> OCTOSPIM_P1_IO5
    PC5     ------> OCTOSPIM_P1_DQS
    PB2     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80013c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013d8:	2309      	movs	r3, #9
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e0:	4619      	mov	r1, r3
 80013e2:	482d      	ldr	r0, [pc, #180]	; (8001498 <HAL_OSPI_MspInit+0x1c8>)
 80013e4:	f000 fd60 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013f8:	230a      	movs	r3, #10
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	4826      	ldr	r0, [pc, #152]	; (800149c <HAL_OSPI_MspInit+0x1cc>)
 8001404:	f000 fd50 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001418:	230a      	movs	r3, #10
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	481d      	ldr	r0, [pc, #116]	; (8001498 <HAL_OSPI_MspInit+0x1c8>)
 8001424:	f000 fd40 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8001428:	2322      	movs	r3, #34	; 0x22
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001438:	230a      	movs	r3, #10
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4817      	ldr	r0, [pc, #92]	; (80014a0 <HAL_OSPI_MspInit+0x1d0>)
 8001444:	f000 fd30 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8001448:	2308      	movs	r3, #8
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001458:	2309      	movs	r3, #9
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4810      	ldr	r0, [pc, #64]	; (80014a4 <HAL_OSPI_MspInit+0x1d4>)
 8001464:	f000 fd20 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001468:	2304      	movs	r3, #4
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001478:	2309      	movs	r3, #9
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_OSPI_MspInit+0x1d8>)
 8001484:	f000 fd10 	bl	8001ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3738      	adds	r7, #56	; 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	52005000 	.word	0x52005000
 8001494:	58024400 	.word	0x58024400
 8001498:	58021800 	.word	0x58021800
 800149c:	58020c00 	.word	0x58020c00
 80014a0:	58020800 	.word	0x58020800
 80014a4:	58021c00 	.word	0x58021c00
 80014a8:	58020400 	.word	0x58020400

080014ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_RTC_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014be:	227f      	movs	r2, #127	; 0x7f
 80014c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014e4:	f005 fb5e 	bl	8006ba4 <HAL_RTC_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80014ee:	f7ff fe87 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	24000208 	.word	0x24000208
 80014fc:	58004000 	.word	0x58004000

08001500 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0b0      	sub	sp, #192	; 0xc0
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	22b8      	movs	r2, #184	; 0xb8
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f008 fe01 	bl	800a118 <memset>
  if(rtcHandle->Instance==RTC)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_RTC_MspInit+0x58>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d116      	bne.n	800154e <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001520:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001524:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fa88 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800153e:	f7ff fe5f 	bl	8001200 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_RTC_MspInit+0x5c>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <HAL_RTC_MspInit+0x5c>)
 8001548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800154e:	bf00      	nop
 8001550:	37c0      	adds	r7, #192	; 0xc0
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	58004000 	.word	0x58004000
 800155c:	58024400 	.word	0x58024400

08001560 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_SDMMC1_SD_Init+0x40>)
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <MX_SDMMC1_SD_Init+0x44>)
 8001568:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <MX_SDMMC1_SD_Init+0x40>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_SDMMC1_SD_Init+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_SDMMC1_SD_Init+0x40>)
 8001578:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_SDMMC1_SD_Init+0x40>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_SDMMC1_SD_Init+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_SDMMC1_SD_Init+0x40>)
 800158c:	f005 fc20 	bl	8006dd0 <HAL_SD_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001596:	f7ff fe33 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	24000230 	.word	0x24000230
 80015a4:	52007000 	.word	0x52007000

080015a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a2a      	ldr	r2, [pc, #168]	; (8001670 <HAL_SD_MspInit+0xc8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d14d      	bne.n	8001666 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_SD_MspInit+0xcc>)
 80015cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80015d0:	4a28      	ldr	r2, [pc, #160]	; (8001674 <HAL_SD_MspInit+0xcc>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80015da:	4b26      	ldr	r3, [pc, #152]	; (8001674 <HAL_SD_MspInit+0xcc>)
 80015dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_SD_MspInit+0xcc>)
 80015ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ee:	4a21      	ldr	r2, [pc, #132]	; (8001674 <HAL_SD_MspInit+0xcc>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_SD_MspInit+0xcc>)
 80015fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_SD_MspInit+0xcc>)
 8001608:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_SD_MspInit+0xcc>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_SD_MspInit+0xcc>)
 8001618:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC11     ------> SDMMC1_D3
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8001624:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001628:	617b      	str	r3, [r7, #20]
                          |SDIO1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001636:	230c      	movs	r3, #12
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <HAL_SD_MspInit+0xd0>)
 8001642:	f000 fc31 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001646:	2304      	movs	r3, #4
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001656:	230c      	movs	r3, #12
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4806      	ldr	r0, [pc, #24]	; (800167c <HAL_SD_MspInit+0xd4>)
 8001662:	f000 fc21 	bl	8001ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	52007000 	.word	0x52007000
 8001674:	58024400 	.word	0x58024400
 8001678:	58020800 	.word	0x58020800
 800167c:	58020c00 	.word	0x58020c00

08001680 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MX_SPI2_Init+0xa4>)
 8001686:	4a28      	ldr	r2, [pc, #160]	; (8001728 <MX_SPI2_Init+0xa8>)
 8001688:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <MX_SPI2_Init+0xa4>)
 800168c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001690:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_SPI2_Init+0xa4>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_SPI2_Init+0xa4>)
 800169a:	2203      	movs	r2, #3
 800169c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_SPI2_Init+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_SPI2_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_SPI2_Init+0xa4>)
 800170a:	2200      	movs	r2, #0
 800170c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_SPI2_Init+0xa4>)
 8001710:	f006 fc02 	bl	8007f18 <HAL_SPI_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800171a:	f7ff fd71 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	240002ac 	.word	0x240002ac
 8001728:	40003800 	.word	0x40003800

0800172c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0b8      	sub	sp, #224	; 0xe0
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	22b8      	movs	r2, #184	; 0xb8
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f008 fce3 	bl	800a118 <memset>
  if(spiHandle->Instance==SPI2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a37      	ldr	r2, [pc, #220]	; (8001834 <HAL_SPI_MspInit+0x108>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d167      	bne.n	800182c <HAL_SPI_MspInit+0x100>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001766:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f96b 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001778:	f7ff fd42 	bl	8001200 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 800177e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001782:	4a2d      	ldr	r2, [pc, #180]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 800178e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 800179c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 80017ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 80017ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017be:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_SPI_MspInit+0x10c>)
 80017ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f0:	2305      	movs	r3, #5
 80017f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017fa:	4619      	mov	r1, r3
 80017fc:	480f      	ldr	r0, [pc, #60]	; (800183c <HAL_SPI_MspInit+0x110>)
 80017fe:	f000 fb53 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001802:	230c      	movs	r3, #12
 8001804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800181a:	2305      	movs	r3, #5
 800181c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	; (8001840 <HAL_SPI_MspInit+0x114>)
 8001828:	f000 fb3e 	bl	8001ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800182c:	bf00      	nop
 800182e:	37e0      	adds	r7, #224	; 0xe0
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40003800 	.word	0x40003800
 8001838:	58024400 	.word	0x58024400
 800183c:	58020000 	.word	0x58020000
 8001840:	58020800 	.word	0x58020800

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_MspInit+0x30>)
 800184c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_MspInit+0x30>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_MspInit+0x30>)
 800185c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	58024400 	.word	0x58024400

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 f9c8 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <SystemInit+0xd0>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a31      	ldr	r2, [pc, #196]	; (800199c <SystemInit+0xd0>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e0:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <SystemInit+0xd4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d807      	bhi.n	80018fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <SystemInit+0xd4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 030f 	bic.w	r3, r3, #15
 80018f4:	4a2a      	ldr	r2, [pc, #168]	; (80019a0 <SystemInit+0xd4>)
 80018f6:	f043 0303 	orr.w	r3, r3, #3
 80018fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <SystemInit+0xd8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <SystemInit+0xd8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <SystemInit+0xd8>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <SystemInit+0xd8>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4924      	ldr	r1, [pc, #144]	; (80019a4 <SystemInit+0xd8>)
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <SystemInit+0xdc>)
 8001916:	4013      	ands	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <SystemInit+0xd4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <SystemInit+0xd4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 030f 	bic.w	r3, r3, #15
 800192e:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <SystemInit+0xd4>)
 8001930:	f043 0303 	orr.w	r3, r3, #3
 8001934:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <SystemInit+0xd8>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <SystemInit+0xd8>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <SystemInit+0xd8>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <SystemInit+0xd8>)
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <SystemInit+0xe0>)
 800194c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <SystemInit+0xd8>)
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <SystemInit+0xe4>)
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <SystemInit+0xd8>)
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <SystemInit+0xe8>)
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <SystemInit+0xd8>)
 800195c:	2200      	movs	r2, #0
 800195e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <SystemInit+0xd8>)
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <SystemInit+0xe8>)
 8001964:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <SystemInit+0xd8>)
 8001968:	2200      	movs	r2, #0
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <SystemInit+0xd8>)
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <SystemInit+0xe8>)
 8001970:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <SystemInit+0xd8>)
 8001974:	2200      	movs	r2, #0
 8001976:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <SystemInit+0xd8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <SystemInit+0xd8>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <SystemInit+0xd8>)
 8001986:	2200      	movs	r2, #0
 8001988:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <SystemInit+0xec>)
 800198c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001990:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	52002000 	.word	0x52002000
 80019a4:	58024400 	.word	0x58024400
 80019a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019ac:	02020200 	.word	0x02020200
 80019b0:	01ff0000 	.word	0x01ff0000
 80019b4:	01010280 	.word	0x01010280
 80019b8:	52004000 	.word	0x52004000

080019bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019c2:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <MX_USART1_UART_Init+0x94>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a04:	4811      	ldr	r0, [pc, #68]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 8001a06:	f006 fba8 	bl	800815a <HAL_UART_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a10:	f7ff fbf6 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a14:	2100      	movs	r1, #0
 8001a16:	480d      	ldr	r0, [pc, #52]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 8001a18:	f007 fc4a 	bl	80092b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a22:	f7ff fbed 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a26:	2100      	movs	r1, #0
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 8001a2a:	f007 fc7f 	bl	800932c <HAL_UARTEx_SetRxFifoThreshold>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a34:	f7ff fbe4 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_USART1_UART_Init+0x90>)
 8001a3a:	f007 fc00 	bl	800923e <HAL_UARTEx_DisableFifoMode>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a44:	f7ff fbdc 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	24000334 	.word	0x24000334
 8001a50:	40011000 	.word	0x40011000

08001a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0b8      	sub	sp, #224	; 0xe0
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	22b8      	movs	r2, #184	; 0xb8
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f008 fb4f 	bl	800a118 <memset>
  if(uartHandle->Instance==USART1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a25      	ldr	r2, [pc, #148]	; (8001b14 <HAL_UART_MspInit+0xc0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d142      	bne.n	8001b0a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 ffd8 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a9e:	f7ff fbaf 	bl	8001200 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_UART_MspInit+0xc4>)
 8001aa4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <HAL_UART_MspInit+0xc4>)
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0xc4>)
 8001ab4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_UART_MspInit+0xc4>)
 8001ac2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_UART_MspInit+0xc4>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_UART_MspInit+0xc4>)
 8001ad2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001ade:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af8:	2307      	movs	r3, #7
 8001afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_UART_MspInit+0xc8>)
 8001b06:	f000 f9cf 	bl	8001ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	37e0      	adds	r7, #224	; 0xe0
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40011000 	.word	0x40011000
 8001b18:	58024400 	.word	0x58024400
 8001b1c:	58020000 	.word	0x58020000

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b24:	f7ff fed2 	bl	80018cc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	; (8001b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f008 fabf 	bl	800a0d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7ff fa4f 	bl	8000ff4 <main>
  bx  lr
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001b5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b60:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001b64:	0800a188 	.word	0x0800a188
  ldr r2, =_sbss
 8001b68:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001b6c:	240003c8 	.word	0x240003c8

08001b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC_IRQHandler>
	...

08001b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f000 f962 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b80:	f002 fd8c 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_Init+0x68>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	4913      	ldr	r1, [pc, #76]	; (8001be0 <HAL_Init+0x6c>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_Init+0x68>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_Init+0x6c>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_Init+0x70>)
 8001bb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_Init+0x74>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 f814 	bl	8001bec <HAL_InitTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e002      	b.n	8001bd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bce:	f7ff fe39 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	0800a140 	.word	0x0800a140
 8001be4:	24000004 	.word	0x24000004
 8001be8:	24000000 	.word	0x24000000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_InitTick+0x60>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e021      	b.n	8001c44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_InitTick+0x64>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_InitTick+0x60>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f939 	bl	8001e8e <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c34:	f000 f911 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_InitTick+0x68>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2400000c 	.word	0x2400000c
 8001c50:	24000000 	.word	0x24000000
 8001c54:	24000008 	.word	0x24000008

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2400000c 	.word	0x2400000c
 8001c7c:	240003c4 	.word	0x240003c4

08001c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	240003c4 	.word	0x240003c4

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2400000c 	.word	0x2400000c

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x40>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00
 8001d24:	05fa0000 	.word	0x05fa0000

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff47 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff5e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff90 	bl	8001d98 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5f 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffb2 	bl	8001e00 <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eb6:	4b89      	ldr	r3, [pc, #548]	; (80020dc <HAL_GPIO_Init+0x234>)
 8001eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eba:	e194      	b.n	80021e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8186 	beq.w	80021e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d005      	beq.n	8001eec <HAL_GPIO_Init+0x44>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d017      	beq.n	8001f8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d123      	bne.n	8001fde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	69b9      	ldr	r1, [r7, #24]
 8001fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0203 	and.w	r2, r3, #3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80e0 	beq.w	80021e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002020:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_GPIO_Init+0x238>)
 8002022:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002026:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <HAL_GPIO_Init+0x238>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_GPIO_Init+0x238>)
 8002032:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_GPIO_Init+0x23c>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <HAL_GPIO_Init+0x240>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d052      	beq.n	8002110 <HAL_GPIO_Init+0x268>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <HAL_GPIO_Init+0x244>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d031      	beq.n	80020d6 <HAL_GPIO_Init+0x22e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1e      	ldr	r2, [pc, #120]	; (80020f0 <HAL_GPIO_Init+0x248>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02b      	beq.n	80020d2 <HAL_GPIO_Init+0x22a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <HAL_GPIO_Init+0x24c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x226>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <HAL_GPIO_Init+0x250>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x222>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <HAL_GPIO_Init+0x254>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x21e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_GPIO_Init+0x258>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x21a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_GPIO_Init+0x25c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x216>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a18      	ldr	r2, [pc, #96]	; (8002108 <HAL_GPIO_Init+0x260>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x212>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_GPIO_Init+0x264>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x20e>
 80020b2:	2309      	movs	r3, #9
 80020b4:	e02d      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020b6:	230a      	movs	r3, #10
 80020b8:	e02b      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e029      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020be:	2307      	movs	r3, #7
 80020c0:	e027      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e025      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e023      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e021      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e01f      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e01d      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e01b      	b.n	8002112 <HAL_GPIO_Init+0x26a>
 80020da:	bf00      	nop
 80020dc:	58000080 	.word	0x58000080
 80020e0:	58024400 	.word	0x58024400
 80020e4:	58000400 	.word	0x58000400
 80020e8:	58020000 	.word	0x58020000
 80020ec:	58020400 	.word	0x58020400
 80020f0:	58020800 	.word	0x58020800
 80020f4:	58020c00 	.word	0x58020c00
 80020f8:	58021000 	.word	0x58021000
 80020fc:	58021400 	.word	0x58021400
 8002100:	58021800 	.word	0x58021800
 8002104:	58021c00 	.word	0x58021c00
 8002108:	58022000 	.word	0x58022000
 800210c:	58022400 	.word	0x58022400
 8002110:	2300      	movs	r3, #0
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	f002 0203 	and.w	r2, r2, #3
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	4093      	lsls	r3, r2
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002122:	4938      	ldr	r1, [pc, #224]	; (8002204 <HAL_GPIO_Init+0x35c>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800215e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	3301      	adds	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f ae63 	bne.w	8001ebc <HAL_GPIO_Init+0x14>
  }
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3724      	adds	r7, #36	; 0x24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	58000400 	.word	0x58000400

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07f      	b.n	800234e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fc2c 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2224      	movs	r2, #36	; 0x24
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800228c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800229c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	e006      	b.n	80022c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d104      	bne.n	80022d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_I2C_Init+0x11c>)
 80022e2:	430b      	orrs	r3, r1
 80022e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69d9      	ldr	r1, [r3, #28]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1a      	ldr	r2, [r3, #32]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	02008000 	.word	0x02008000

0800235c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b20      	cmp	r3, #32
 8002370:	d138      	bne.n	80023e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800237c:	2302      	movs	r3, #2
 800237e:	e032      	b.n	80023e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	; 0x24
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b20      	cmp	r3, #32
 8002406:	d139      	bne.n	800247c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002412:	2302      	movs	r3, #2
 8002414:	e033      	b.n	800247e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2224      	movs	r2, #36	; 0x24
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
  }
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e116      	b.n	80026cc <HAL_I2S_Init+0x240>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fb9e 	bl	8000bf4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d008      	beq.n	8002500 <HAL_I2S_Init+0x74>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d004      	beq.n	8002500 <HAL_I2S_Init+0x74>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b0a      	cmp	r3, #10
 80024fc:	f040 8090 	bne.w	8002620 <HAL_I2S_Init+0x194>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d063      	beq.n	80025d0 <HAL_I2S_Init+0x144>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8002510:	2302      	movs	r3, #2
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e001      	b.n	800251a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002516:	2301      	movs	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b30      	cmp	r3, #48	; 0x30
 8002520:	d003      	beq.n	800252a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002526:	2bb0      	cmp	r3, #176	; 0xb0
 8002528:	d102      	bne.n	8002530 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800252a:	2301      	movs	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	e001      	b.n	8002534 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a66      	ldr	r2, [pc, #408]	; (80026d4 <HAL_I2S_Init+0x248>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d105      	bne.n	800254a <HAL_I2S_Init+0xbe>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 800253e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002542:	f003 f98d 	bl	8005860 <HAL_RCCEx_GetPeriphCLKFreq>
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	e004      	b.n	8002554 <HAL_I2S_Init+0xc8>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800254a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800254e:	f003 f987 	bl	8005860 <HAL_RCCEx_GetPeriphCLKFreq>
 8002552:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800255c:	d113      	bne.n	8002586 <HAL_I2S_Init+0xfa>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800255e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	fbb2 f2f3 	udiv	r2, r2, r3
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	461a      	mov	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	3305      	adds	r3, #5
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e014      	b.n	80025b0 <HAL_I2S_Init+0x124>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002586:	2220      	movs	r2, #32
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	fbb2 f2f3 	udiv	r2, r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	3305      	adds	r3, #5
 80025ae:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4a49      	ldr	r2, [pc, #292]	; (80026d8 <HAL_I2S_Init+0x24c>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e003      	b.n	80025d8 <HAL_I2S_Init+0x14c>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80025d0:	2302      	movs	r3, #2
 80025d2:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <HAL_I2S_Init+0x158>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d002      	beq.n	80025ea <HAL_I2S_Init+0x15e>
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2bff      	cmp	r3, #255	; 0xff
 80025e8:	d907      	bls.n	80025fa <HAL_I2S_Init+0x16e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e068      	b.n	80026cc <HAL_I2S_Init+0x240>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_I2S_Init+0x178>
    {
      i2sodd = 1UL;
 8002600:	2301      	movs	r3, #1
 8002602:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_I2S_Init+0x250>)
 800260c:	4013      	ands	r3, r2
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	0411      	lsls	r1, r2, #16
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	0612      	lsls	r2, r2, #24
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	430b      	orrs	r3, r1
 800261e:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HAL_I2S_Init+0x254>)
 8002628:	4013      	ands	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6851      	ldr	r1, [r2, #4]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6892      	ldr	r2, [r2, #8]
 8002632:	4311      	orrs	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68d2      	ldr	r2, [r2, #12]
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6992      	ldr	r2, [r2, #24]
 800263e:	4311      	orrs	r1, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6a12      	ldr	r2, [r2, #32]
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800264a:	4311      	orrs	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6912      	ldr	r2, [r2, #16]
 8002650:	430a      	orrs	r2, r1
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f640 72f8 	movw	r2, #4088	; 0xff8
 8002666:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002676:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d007      	beq.n	80026a6 <HAL_I2S_Init+0x21a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b06      	cmp	r3, #6
 800269c:	d003      	beq.n	80026a6 <HAL_I2S_Init+0x21a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b0a      	cmp	r3, #10
 80026a4:	d10a      	bne.n	80026bc <HAL_I2S_Init+0x230>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3720      	adds	r7, #32
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	58001400 	.word	0x58001400
 80026d8:	cccccccd 	.word	0xcccccccd
 80026dc:	fe00ffff 	.word	0xfe00ffff
 80026e0:	fdff9040 	.word	0xfdff9040

080026e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0bf      	b.n	8002876 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fbb0 	bl	8000e70 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002726:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6999      	ldr	r1, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800273c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <HAL_LTDC_Init+0x19c>)
 8002758:	400b      	ands	r3, r1
 800275a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68d9      	ldr	r1, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <HAL_LTDC_Init+0x19c>)
 8002786:	400b      	ands	r3, r1
 8002788:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	041b      	lsls	r3, r3, #16
 8002790:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68d9      	ldr	r1, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6919      	ldr	r1, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b33      	ldr	r3, [pc, #204]	; (8002880 <HAL_LTDC_Init+0x19c>)
 80027b4:	400b      	ands	r3, r1
 80027b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6959      	ldr	r1, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_LTDC_Init+0x19c>)
 80027e2:	400b      	ands	r3, r1
 80027e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6959      	ldr	r1, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0206 	orr.w	r2, r2, #6
 8002852:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	f000f800 	.word	0xf000f800

08002884 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_LTDC_ConfigLayer+0x1a>
 800289a:	2302      	movs	r3, #2
 800289c:	e02c      	b.n	80028f8 <HAL_LTDC_ConfigLayer+0x74>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2134      	movs	r1, #52	; 0x34
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4614      	mov	r4, r2
 80028c2:	461d      	mov	r5, r3
 80028c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f811 	bl	8002900 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2201      	movs	r2, #1
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}

08002900 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291c:	4413      	add	r3, r2
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	01db      	lsls	r3, r3, #7
 800292c:	4413      	add	r3, r2
 800292e:	3384      	adds	r3, #132	; 0x84
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4611      	mov	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	01d2      	lsls	r2, r2, #7
 800293c:	440a      	add	r2, r1
 800293e:	3284      	adds	r2, #132	; 0x84
 8002940:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002944:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002956:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002958:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	01db      	lsls	r3, r3, #7
 8002964:	440b      	add	r3, r1
 8002966:	3384      	adds	r3, #132	; 0x84
 8002968:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800296e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297e:	4413      	add	r3, r2
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	01db      	lsls	r3, r3, #7
 800298e:	4413      	add	r3, r2
 8002990:	3384      	adds	r3, #132	; 0x84
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	4611      	mov	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	01d2      	lsls	r2, r2, #7
 800299e:	440a      	add	r2, r1
 80029a0:	3284      	adds	r2, #132	; 0x84
 80029a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80029a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b6:	4413      	add	r3, r2
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	01db      	lsls	r3, r3, #7
 80029c4:	440b      	add	r3, r1
 80029c6:	3384      	adds	r3, #132	; 0x84
 80029c8:	4619      	mov	r1, r3
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	01db      	lsls	r3, r3, #7
 80029da:	4413      	add	r3, r2
 80029dc:	3384      	adds	r3, #132	; 0x84
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	4611      	mov	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	01d2      	lsls	r2, r2, #7
 80029ea:	440a      	add	r2, r1
 80029ec:	3284      	adds	r2, #132	; 0x84
 80029ee:	f023 0307 	bic.w	r3, r3, #7
 80029f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	01db      	lsls	r3, r3, #7
 80029fe:	4413      	add	r3, r2
 8002a00:	3384      	adds	r3, #132	; 0x84
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a1a:	041b      	lsls	r3, r3, #16
 8002a1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	061b      	lsls	r3, r3, #24
 8002a24:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	01db      	lsls	r3, r3, #7
 8002a30:	4413      	add	r3, r2
 8002a32:	3384      	adds	r3, #132	; 0x84
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	01db      	lsls	r3, r3, #7
 8002a40:	4413      	add	r3, r2
 8002a42:	3384      	adds	r3, #132	; 0x84
 8002a44:	461a      	mov	r2, r3
 8002a46:	2300      	movs	r3, #0
 8002a48:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a50:	461a      	mov	r2, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	01db      	lsls	r3, r3, #7
 8002a64:	440b      	add	r3, r1
 8002a66:	3384      	adds	r3, #132	; 0x84
 8002a68:	4619      	mov	r1, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	01db      	lsls	r3, r3, #7
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3384      	adds	r3, #132	; 0x84
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	4611      	mov	r1, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	01d2      	lsls	r2, r2, #7
 8002a8a:	440a      	add	r2, r1
 8002a8c:	3284      	adds	r2, #132	; 0x84
 8002a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a92:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	01db      	lsls	r3, r3, #7
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3384      	adds	r3, #132	; 0x84
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	01db      	lsls	r3, r3, #7
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3384      	adds	r3, #132	; 0x84
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	01db      	lsls	r3, r3, #7
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3384      	adds	r3, #132	; 0x84
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <LTDC_SetConfig+0x32c>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	68f9      	ldr	r1, [r7, #12]
 8002ada:	6809      	ldr	r1, [r1, #0]
 8002adc:	4608      	mov	r0, r1
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	01c9      	lsls	r1, r1, #7
 8002ae2:	4401      	add	r1, r0
 8002ae4:	3184      	adds	r1, #132	; 0x84
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	01db      	lsls	r3, r3, #7
 8002af4:	4413      	add	r3, r2
 8002af6:	3384      	adds	r3, #132	; 0x84
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	01db      	lsls	r3, r3, #7
 8002b04:	4413      	add	r3, r2
 8002b06:	3384      	adds	r3, #132	; 0x84
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	01db      	lsls	r3, r3, #7
 8002b18:	4413      	add	r3, r2
 8002b1a:	3384      	adds	r3, #132	; 0x84
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	e01b      	b.n	8002b6a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d102      	bne.n	8002b40 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e014      	b.n	8002b6a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d00b      	beq.n	8002b60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d007      	beq.n	8002b60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d003      	beq.n	8002b60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b5c:	2b07      	cmp	r3, #7
 8002b5e:	d102      	bne.n	8002b66 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002b60:	2302      	movs	r3, #2
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	e001      	b.n	8002b6a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	01db      	lsls	r3, r3, #7
 8002b74:	4413      	add	r3, r2
 8002b76:	3384      	adds	r3, #132	; 0x84
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	01d2      	lsls	r2, r2, #7
 8002b84:	440a      	add	r2, r1
 8002b86:	3284      	adds	r2, #132	; 0x84
 8002b88:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	1acb      	subs	r3, r1, r3
 8002ba4:	69f9      	ldr	r1, [r7, #28]
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	3307      	adds	r3, #7
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	6809      	ldr	r1, [r1, #0]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	01c9      	lsls	r1, r1, #7
 8002bb6:	4401      	add	r1, r0
 8002bb8:	3184      	adds	r1, #132	; 0x84
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	01db      	lsls	r3, r3, #7
 8002bc8:	4413      	add	r3, r2
 8002bca:	3384      	adds	r3, #132	; 0x84
 8002bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	01db      	lsls	r3, r3, #7
 8002bd8:	440b      	add	r3, r1
 8002bda:	3384      	adds	r3, #132	; 0x84
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <LTDC_SetConfig+0x330>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	01db      	lsls	r3, r3, #7
 8002bee:	4413      	add	r3, r2
 8002bf0:	3384      	adds	r3, #132	; 0x84
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	01db      	lsls	r3, r3, #7
 8002c04:	4413      	add	r3, r2
 8002c06:	3384      	adds	r3, #132	; 0x84
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	01d2      	lsls	r2, r2, #7
 8002c14:	440a      	add	r2, r1
 8002c16:	3284      	adds	r2, #132	; 0x84
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6013      	str	r3, [r2, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	fffff8f8 	.word	0xfffff8f8
 8002c30:	fffff800 	.word	0xfffff800

08002c34 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff f81e 	bl	8001c80 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e0a5      	b.n	8002d9e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 809e 	bne.w	8002d9e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fb34 	bl	80012d0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002c68:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f89d 	bl	8002dac <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <HAL_OSPI_Init+0x174>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68d1      	ldr	r1, [r2, #12]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6912      	ldr	r2, [r2, #16]
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0412      	lsls	r2, r2, #16
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6952      	ldr	r2, [r2, #20]
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0212      	lsls	r2, r2, #8
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	69d2      	ldr	r2, [r2, #28]
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cd8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	021a      	lsls	r2, r3, #8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2120      	movs	r1, #32
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fd4b 	bl	800379c <OSPI_WaitFlagStateUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d146      	bne.n	8002d9e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	1e5a      	subs	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d46:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0202 	orr.w	r2, r2, #2
 8002d84:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d8e:	d103      	bne.n	8002d98 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50
 8002d96:	e002      	b.n	8002d9e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	f8e0f8f4 	.word	0xf8e0f8f4

08002dac <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b094      	sub	sp, #80	; 0x50
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a9d      	ldr	r2, [pc, #628]	; (8003060 <HAL_OSPIM_Config+0x294>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d105      	bne.n	8002dfa <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002df8:	e004      	b.n	8002e04 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002e0a:	e01d      	b.n	8002e48 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002e0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e10:	3301      	adds	r3, #1
 8002e12:	b2d8      	uxtb	r0, r3
 8002e14:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002e18:	f107 0114 	add.w	r1, r7, #20
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	4619      	mov	r1, r3
 8002e28:	f000 fcf0 	bl	800380c <OSPIM_GetConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002e3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e42:	3301      	adds	r3, #1
 8002e44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002e48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d9dd      	bls.n	8002e0c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002e50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8495 	bne.w	8003784 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002e5a:	4b81      	ldr	r3, [pc, #516]	; (8003060 <HAL_OSPIM_Config+0x294>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002e66:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_OSPIM_Config+0x294>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7d      	ldr	r2, [pc, #500]	; (8003060 <HAL_OSPIM_Config+0x294>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002e72:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002e7e:	4b79      	ldr	r3, [pc, #484]	; (8003064 <HAL_OSPIM_Config+0x298>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_OSPIM_Config+0x298>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	; (8003064 <HAL_OSPIM_Config+0x298>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002e96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002ea2:	4971      	ldr	r1, [pc, #452]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	3350      	adds	r3, #80	; 0x50
 8002eb0:	443b      	add	r3, r7
 8002eb2:	3b34      	subs	r3, #52	; 0x34
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	486a      	ldr	r0, [pc, #424]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	3350      	adds	r3, #80	; 0x50
 8002ecc:	443b      	add	r3, r7
 8002ece:	3b34      	subs	r3, #52	; 0x34
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4403      	add	r3, r0
 8002edc:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002ede:	4b62      	ldr	r3, [pc, #392]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80c0 	beq.w	800306c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002eec:	4b5e      	ldr	r3, [pc, #376]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002ef8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	f040 8162 	bne.w	80031c6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8002f02:	4959      	ldr	r1, [pc, #356]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002f04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	3350      	adds	r3, #80	; 0x50
 8002f12:	443b      	add	r3, r7
 8002f14:	3b3c      	subs	r3, #60	; 0x3c
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	4851      	ldr	r0, [pc, #324]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002f22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	3350      	adds	r3, #80	; 0x50
 8002f30:	443b      	add	r3, r7
 8002f32:	3b3c      	subs	r3, #60	; 0x3c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	f041 0202 	orr.w	r2, r1, #2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4403      	add	r3, r0
 8002f40:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002f42:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	3350      	adds	r3, #80	; 0x50
 8002f50:	443b      	add	r3, r7
 8002f52:	3b38      	subs	r3, #56	; 0x38
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01f      	beq.n	8002f9a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8002f5a:	4943      	ldr	r1, [pc, #268]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002f5c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	3350      	adds	r3, #80	; 0x50
 8002f6a:	443b      	add	r3, r7
 8002f6c:	3b38      	subs	r3, #56	; 0x38
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	483b      	ldr	r0, [pc, #236]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002f7a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	3350      	adds	r3, #80	; 0x50
 8002f88:	443b      	add	r3, r7
 8002f8a:	3b38      	subs	r3, #56	; 0x38
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f041 0220 	orr.w	r2, r1, #32
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4403      	add	r3, r0
 8002f98:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002f9a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	3350      	adds	r3, #80	; 0x50
 8002fa8:	443b      	add	r3, r7
 8002faa:	3b30      	subs	r3, #48	; 0x30
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d023      	beq.n	8002ffa <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8002fb2:	492d      	ldr	r1, [pc, #180]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002fb4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	3350      	adds	r3, #80	; 0x50
 8002fc2:	443b      	add	r3, r7
 8002fc4:	3b30      	subs	r3, #48	; 0x30
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	4824      	ldr	r0, [pc, #144]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8002fd6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	3350      	adds	r3, #80	; 0x50
 8002fe4:	443b      	add	r3, r7
 8002fe6:	3b30      	subs	r3, #48	; 0x30
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4403      	add	r3, r0
 8002ff8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002ffa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	3350      	adds	r3, #80	; 0x50
 8003008:	443b      	add	r3, r7
 800300a:	3b2c      	subs	r3, #44	; 0x2c
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80d9 	beq.w	80031c6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8003014:	4914      	ldr	r1, [pc, #80]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8003016:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	3350      	adds	r3, #80	; 0x50
 8003024:	443b      	add	r3, r7
 8003026:	3b2c      	subs	r3, #44	; 0x2c
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3b01      	subs	r3, #1
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	480c      	ldr	r0, [pc, #48]	; (8003068 <HAL_OSPIM_Config+0x29c>)
 8003038:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	3350      	adds	r3, #80	; 0x50
 8003046:	443b      	add	r3, r7
 8003048:	3b2c      	subs	r3, #44	; 0x2c
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3b01      	subs	r3, #1
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4403      	add	r3, r0
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	e0b3      	b.n	80031c6 <HAL_OSPIM_Config+0x3fa>
 800305e:	bf00      	nop
 8003060:	52005000 	.word	0x52005000
 8003064:	5200a000 	.word	0x5200a000
 8003068:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800306c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	3350      	adds	r3, #80	; 0x50
 8003078:	443b      	add	r3, r7
 800307a:	3b3c      	subs	r3, #60	; 0x3c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80a1 	beq.w	80031c6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003084:	4993      	ldr	r1, [pc, #588]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 8003086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	3350      	adds	r3, #80	; 0x50
 8003092:	443b      	add	r3, r7
 8003094:	3b3c      	subs	r3, #60	; 0x3c
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	488c      	ldr	r0, [pc, #560]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 80030a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	3350      	adds	r3, #80	; 0x50
 80030ae:	443b      	add	r3, r7
 80030b0:	3b3c      	subs	r3, #60	; 0x3c
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	f021 0201 	bic.w	r2, r1, #1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4403      	add	r3, r0
 80030be:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80030c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	3350      	adds	r3, #80	; 0x50
 80030cc:	443b      	add	r3, r7
 80030ce:	3b38      	subs	r3, #56	; 0x38
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01d      	beq.n	8003112 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80030d6:	497f      	ldr	r1, [pc, #508]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 80030d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	3350      	adds	r3, #80	; 0x50
 80030e4:	443b      	add	r3, r7
 80030e6:	3b38      	subs	r3, #56	; 0x38
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	4878      	ldr	r0, [pc, #480]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 80030f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	3350      	adds	r3, #80	; 0x50
 8003100:	443b      	add	r3, r7
 8003102:	3b38      	subs	r3, #56	; 0x38
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3b01      	subs	r3, #1
 8003108:	f021 0210 	bic.w	r2, r1, #16
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4403      	add	r3, r0
 8003110:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	3350      	adds	r3, #80	; 0x50
 800311e:	443b      	add	r3, r7
 8003120:	3b30      	subs	r3, #48	; 0x30
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d021      	beq.n	800316c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003128:	496a      	ldr	r1, [pc, #424]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 800312a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	3350      	adds	r3, #80	; 0x50
 8003136:	443b      	add	r3, r7
 8003138:	3b30      	subs	r3, #48	; 0x30
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	4862      	ldr	r0, [pc, #392]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 800314a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	3350      	adds	r3, #80	; 0x50
 8003156:	443b      	add	r3, r7
 8003158:	3b30      	subs	r3, #48	; 0x30
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4403      	add	r3, r0
 800316a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800316c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	3350      	adds	r3, #80	; 0x50
 8003178:	443b      	add	r3, r7
 800317a:	3b2c      	subs	r3, #44	; 0x2c
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d021      	beq.n	80031c6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003182:	4954      	ldr	r1, [pc, #336]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 8003184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	3350      	adds	r3, #80	; 0x50
 8003190:	443b      	add	r3, r7
 8003192:	3b2c      	subs	r3, #44	; 0x2c
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3b01      	subs	r3, #1
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	484c      	ldr	r0, [pc, #304]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 80031a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	3350      	adds	r3, #80	; 0x50
 80031b0:	443b      	add	r3, r7
 80031b2:	3b2c      	subs	r3, #44	; 0x2c
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4403      	add	r3, r0
 80031c4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031ce:	4613      	mov	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	3350      	adds	r3, #80	; 0x50
 80031d8:	443b      	add	r3, r7
 80031da:	3b3c      	subs	r3, #60	; 0x3c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4299      	cmp	r1, r3
 80031e0:	d038      	beq.n	8003254 <HAL_OSPIM_Config+0x488>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	3350      	adds	r3, #80	; 0x50
 80031f4:	443b      	add	r3, r7
 80031f6:	3b38      	subs	r3, #56	; 0x38
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4299      	cmp	r1, r3
 80031fc:	d02a      	beq.n	8003254 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	3350      	adds	r3, #80	; 0x50
 8003210:	443b      	add	r3, r7
 8003212:	3b34      	subs	r3, #52	; 0x34
 8003214:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003216:	4299      	cmp	r1, r3
 8003218:	d01c      	beq.n	8003254 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	68d9      	ldr	r1, [r3, #12]
 800321e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	3350      	adds	r3, #80	; 0x50
 800322c:	443b      	add	r3, r7
 800322e:	3b30      	subs	r3, #48	; 0x30
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4299      	cmp	r1, r3
 8003234:	d00e      	beq.n	8003254 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6919      	ldr	r1, [r3, #16]
 800323a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	3350      	adds	r3, #80	; 0x50
 8003248:	443b      	add	r3, r7
 800324a:	3b2c      	subs	r3, #44	; 0x2c
 800324c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800324e:	4299      	cmp	r1, r3
 8003250:	f040 810e 	bne.w	8003470 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	3350      	adds	r3, #80	; 0x50
 8003266:	443b      	add	r3, r7
 8003268:	3b3c      	subs	r3, #60	; 0x3c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4299      	cmp	r1, r3
 800326e:	d133      	bne.n	80032d8 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	3350      	adds	r3, #80	; 0x50
 8003282:	443b      	add	r3, r7
 8003284:	3b38      	subs	r3, #56	; 0x38
 8003286:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003288:	4299      	cmp	r1, r3
 800328a:	d125      	bne.n	80032d8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	68d9      	ldr	r1, [r3, #12]
 8003290:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3350      	adds	r3, #80	; 0x50
 800329e:	443b      	add	r3, r7
 80032a0:	3b30      	subs	r3, #48	; 0x30
 80032a2:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80032a4:	4299      	cmp	r1, r3
 80032a6:	d117      	bne.n	80032d8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6919      	ldr	r1, [r3, #16]
 80032ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	3350      	adds	r3, #80	; 0x50
 80032ba:	443b      	add	r3, r7
 80032bc:	3b2c      	subs	r3, #44	; 0x2c
 80032be:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80032c0:	4299      	cmp	r1, r3
 80032c2:	d109      	bne.n	80032d8 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a02      	ldr	r2, [pc, #8]	; (80032d4 <HAL_OSPIM_Config+0x508>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e0ce      	b.n	8003470 <HAL_OSPIM_Config+0x6a4>
 80032d2:	bf00      	nop
 80032d4:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80032d8:	49bb      	ldr	r1, [pc, #748]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80032da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	3350      	adds	r3, #80	; 0x50
 80032e8:	443b      	add	r3, r7
 80032ea:	3b3c      	subs	r3, #60	; 0x3c
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	48b4      	ldr	r0, [pc, #720]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80032f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	3350      	adds	r3, #80	; 0x50
 8003306:	443b      	add	r3, r7
 8003308:	3b3c      	subs	r3, #60	; 0x3c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	f021 0201 	bic.w	r2, r1, #1
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4403      	add	r3, r0
 8003316:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003318:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	3350      	adds	r3, #80	; 0x50
 8003326:	443b      	add	r3, r7
 8003328:	3b38      	subs	r3, #56	; 0x38
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01f      	beq.n	8003370 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003330:	49a5      	ldr	r1, [pc, #660]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 8003332:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	3350      	adds	r3, #80	; 0x50
 8003340:	443b      	add	r3, r7
 8003342:	3b38      	subs	r3, #56	; 0x38
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3b01      	subs	r3, #1
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	489e      	ldr	r0, [pc, #632]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 8003350:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	3350      	adds	r3, #80	; 0x50
 800335e:	443b      	add	r3, r7
 8003360:	3b38      	subs	r3, #56	; 0x38
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3b01      	subs	r3, #1
 8003366:	f021 0210 	bic.w	r2, r1, #16
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003370:	4995      	ldr	r1, [pc, #596]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 8003372:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	3350      	adds	r3, #80	; 0x50
 8003380:	443b      	add	r3, r7
 8003382:	3b34      	subs	r3, #52	; 0x34
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3b01      	subs	r3, #1
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	488e      	ldr	r0, [pc, #568]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 8003390:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	3350      	adds	r3, #80	; 0x50
 800339e:	443b      	add	r3, r7
 80033a0:	3b34      	subs	r3, #52	; 0x34
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4403      	add	r3, r0
 80033ae:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80033b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	3350      	adds	r3, #80	; 0x50
 80033be:	443b      	add	r3, r7
 80033c0:	3b30      	subs	r3, #48	; 0x30
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80033c8:	497f      	ldr	r1, [pc, #508]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80033ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	3350      	adds	r3, #80	; 0x50
 80033d8:	443b      	add	r3, r7
 80033da:	3b30      	subs	r3, #48	; 0x30
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3b01      	subs	r3, #1
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	4877      	ldr	r0, [pc, #476]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80033ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	3350      	adds	r3, #80	; 0x50
 80033fa:	443b      	add	r3, r7
 80033fc:	3b30      	subs	r3, #48	; 0x30
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3b01      	subs	r3, #1
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4403      	add	r3, r0
 800340e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003410:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	3350      	adds	r3, #80	; 0x50
 800341e:	443b      	add	r3, r7
 8003420:	3b2c      	subs	r3, #44	; 0x2c
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d023      	beq.n	8003470 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003428:	4967      	ldr	r1, [pc, #412]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 800342a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	3350      	adds	r3, #80	; 0x50
 8003438:	443b      	add	r3, r7
 800343a:	3b2c      	subs	r3, #44	; 0x2c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3b01      	subs	r3, #1
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	485f      	ldr	r0, [pc, #380]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 800344c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	3350      	adds	r3, #80	; 0x50
 800345a:	443b      	add	r3, r7
 800345c:	3b2c      	subs	r3, #44	; 0x2c
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4403      	add	r3, r0
 800346e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003470:	4a55      	ldr	r2, [pc, #340]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	3b01      	subs	r3, #1
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003484:	025b      	lsls	r3, r3, #9
 8003486:	431a      	orrs	r2, r3
 8003488:	494f      	ldr	r1, [pc, #316]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	3b01      	subs	r3, #1
 8003490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	1e5a      	subs	r2, r3, #1
 80034a0:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d90a      	bls.n	80034c2 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80034ac:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	4942      	ldr	r1, [pc, #264]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80034c2:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 809a 	beq.w	8003604 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80034d0:	4a3d      	ldr	r2, [pc, #244]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	4939      	ldr	r1, [pc, #228]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d011      	beq.n	8003520 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80034fc:	4a32      	ldr	r2, [pc, #200]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800350e:	492e      	ldr	r1, [pc, #184]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	3b01      	subs	r3, #1
 8003516:	f042 0210 	orr.w	r2, r2, #16
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d016      	beq.n	800355a <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800352c:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	3b01      	subs	r3, #1
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003542:	4921      	ldr	r1, [pc, #132]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	3b01      	subs	r3, #1
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	e019      	b.n	800358e <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d015      	beq.n	800358e <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003562:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	3b01      	subs	r3, #1
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003578:	4913      	ldr	r1, [pc, #76]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d018      	beq.n	80035cc <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800359a:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035b0:	4905      	ldr	r1, [pc, #20]	; (80035c8 <HAL_OSPIM_Config+0x7fc>)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	e0c5      	b.n	8003754 <HAL_OSPIM_Config+0x988>
 80035c8:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80bf 	beq.w	8003754 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80035d6:	4a6e      	ldr	r2, [pc, #440]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	3b01      	subs	r3, #1
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80035ec:	4968      	ldr	r1, [pc, #416]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	e0a7      	b.n	8003754 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003604:	4a62      	ldr	r2, [pc, #392]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3b01      	subs	r3, #1
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	431a      	orrs	r2, r3
 800361c:	495c      	ldr	r1, [pc, #368]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3b01      	subs	r3, #1
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d014      	beq.n	8003660 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003636:	4a56      	ldr	r2, [pc, #344]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	3b01      	subs	r3, #1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	431a      	orrs	r2, r3
 800364e:	4950      	ldr	r1, [pc, #320]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	3b01      	subs	r3, #1
 8003656:	f042 0210 	orr.w	r2, r2, #16
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d019      	beq.n	80036a0 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800366c:	4a48      	ldr	r2, [pc, #288]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	3b01      	subs	r3, #1
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003684:	049b      	lsls	r3, r3, #18
 8003686:	431a      	orrs	r2, r3
 8003688:	4941      	ldr	r1, [pc, #260]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	3b01      	subs	r3, #1
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	e01c      	b.n	80036da <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d018      	beq.n	80036da <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80036a8:	4a39      	ldr	r2, [pc, #228]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c0:	069b      	lsls	r3, r3, #26
 80036c2:	431a      	orrs	r2, r3
 80036c4:	4932      	ldr	r1, [pc, #200]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d019      	beq.n	800371a <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80036e6:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80036fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fe:	049b      	lsls	r3, r3, #18
 8003700:	431a      	orrs	r2, r3
 8003702:	4923      	ldr	r1, [pc, #140]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	3b01      	subs	r3, #1
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	e01c      	b.n	8003754 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003722:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	3b01      	subs	r3, #1
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373a:	069b      	lsls	r3, r3, #26
 800373c:	431a      	orrs	r2, r3
 800373e:	4914      	ldr	r1, [pc, #80]	; (8003790 <HAL_OSPIM_Config+0x9c4>)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	3b01      	subs	r3, #1
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003754:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_OSPIM_Config+0x9c8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_OSPIM_Config+0x9c8>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800376c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_OSPIM_Config+0x9cc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a06      	ldr	r2, [pc, #24]	; (8003798 <HAL_OSPIM_Config+0x9cc>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003784:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003788:	4618      	mov	r0, r3
 800378a:	3750      	adds	r7, #80	; 0x50
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	5200b400 	.word	0x5200b400
 8003794:	52005000 	.word	0x52005000
 8003798:	5200a000 	.word	0x5200a000

0800379c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80037ac:	e01a      	b.n	80037e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b4:	d016      	beq.n	80037e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fe fa63 	bl	8001c80 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <OSPI_WaitFlagStateUntilTimeout+0x30>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d2:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f043 0201 	orr.w	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e00e      	b.n	8003802 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf14      	ite	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	2300      	moveq	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1d6      	bne.n	80037ae <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <OSPIM_GetConfig+0x26>
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d802      	bhi.n	8003832 <OSPIM_GetConfig+0x26>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
 8003836:	e098      	b.n	800396a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2200      	movs	r2, #0
 8003842:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d10b      	bne.n	8003874 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800385c:	4b46      	ldr	r3, [pc, #280]	; (8003978 <OSPIM_GetConfig+0x16c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003868:	4b44      	ldr	r3, [pc, #272]	; (800397c <OSPIM_GetConfig+0x170>)
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	e002      	b.n	8003874 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800386e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003872:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e074      	b.n	8003964 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800387a:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <OSPIM_GetConfig+0x16c>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4053      	eors	r3, r2
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d103      	bne.n	80038a6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4053      	eors	r3, r2
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4053      	eors	r3, r2
 80038d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d018      	beq.n	8003922 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4053      	eors	r3, r2
 80038f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d111      	bne.n	8003922 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	e005      	b.n	8003922 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3301      	adds	r3, #1
 800391a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d018      	beq.n	800395e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4053      	eors	r3, r2
 8003932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d111      	bne.n	800395e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3301      	adds	r3, #1
 8003948:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	611a      	str	r2, [r3, #16]
 8003950:	e005      	b.n	800395e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3301      	adds	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d987      	bls.n	800387a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	5200b400 	.word	0x5200b400
 800397c:	04040222 	.word	0x04040222

08003980 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800398a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	58024800 	.word	0x58024800

080039a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039a8:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	2b06      	cmp	r3, #6
 80039b2:	d00a      	beq.n	80039ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e040      	b.n	8003a48 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e03e      	b.n	8003a48 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80039d2:	491f      	ldr	r1, [pc, #124]	; (8003a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039da:	f7fe f951 	bl	8001c80 <HAL_GetTick>
 80039de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039e0:	e009      	b.n	80039f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039e2:	f7fe f94d 	bl	8001c80 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f0:	d901      	bls.n	80039f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e028      	b.n	8003a48 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a02:	d1ee      	bne.n	80039e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b1e      	cmp	r3, #30
 8003a08:	d008      	beq.n	8003a1c <HAL_PWREx_ConfigSupply+0x7c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a0e:	d005      	beq.n	8003a1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b1d      	cmp	r3, #29
 8003a14:	d002      	beq.n	8003a1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b2d      	cmp	r3, #45	; 0x2d
 8003a1a:	d114      	bne.n	8003a46 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a1c:	f7fe f930 	bl	8001c80 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a22:	e009      	b.n	8003a38 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a24:	f7fe f92c 	bl	8001c80 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a32:	d901      	bls.n	8003a38 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e007      	b.n	8003a48 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d1ee      	bne.n	8003a24 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	58024800 	.word	0x58024800

08003a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e3f4      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80b3 	beq.w	8003bda <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a74:	4b95      	ldr	r3, [pc, #596]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a7e:	4b93      	ldr	r3, [pc, #588]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d007      	beq.n	8003a9a <HAL_RCC_OscConfig+0x46>
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	2b18      	cmp	r3, #24
 8003a8e:	d112      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x62>
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d10d      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9a:	4b8c      	ldr	r3, [pc, #560]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8098 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x184>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 8093 	bne.w	8003bd8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e3cc      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x7a>
 8003ac0:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a81      	ldr	r2, [pc, #516]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	e058      	b.n	8003b80 <HAL_RCC_OscConfig+0x12c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d112      	bne.n	8003afc <HAL_RCC_OscConfig+0xa8>
 8003ad6:	4b7d      	ldr	r3, [pc, #500]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7c      	ldr	r2, [pc, #496]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b7a      	ldr	r3, [pc, #488]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a79      	ldr	r2, [pc, #484]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003ae8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b77      	ldr	r3, [pc, #476]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a76      	ldr	r2, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e041      	b.n	8003b80 <HAL_RCC_OscConfig+0x12c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b04:	d112      	bne.n	8003b2c <HAL_RCC_OscConfig+0xd8>
 8003b06:	4b71      	ldr	r3, [pc, #452]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a70      	ldr	r2, [pc, #448]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b6e      	ldr	r3, [pc, #440]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6d      	ldr	r2, [pc, #436]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b6b      	ldr	r3, [pc, #428]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6a      	ldr	r2, [pc, #424]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e029      	b.n	8003b80 <HAL_RCC_OscConfig+0x12c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003b34:	d112      	bne.n	8003b5c <HAL_RCC_OscConfig+0x108>
 8003b36:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a64      	ldr	r2, [pc, #400]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b62      	ldr	r3, [pc, #392]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a61      	ldr	r2, [pc, #388]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b5f      	ldr	r3, [pc, #380]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5e      	ldr	r2, [pc, #376]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e011      	b.n	8003b80 <HAL_RCC_OscConfig+0x12c>
 8003b5c:	4b5b      	ldr	r3, [pc, #364]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5a      	ldr	r2, [pc, #360]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b58      	ldr	r3, [pc, #352]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a57      	ldr	r2, [pc, #348]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b55      	ldr	r3, [pc, #340]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a54      	ldr	r2, [pc, #336]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe f87a 	bl	8001c80 <HAL_GetTick>
 8003b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fe f876 	bl	8001c80 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e356      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x13c>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe f866 	bl	8001c80 <HAL_GetTick>
 8003bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe f862 	bl	8001c80 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e342      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x164>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 808d 	beq.w	8003d02 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be8:	4b38      	ldr	r3, [pc, #224]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bf0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_RCC_OscConfig+0x1ba>
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	2b18      	cmp	r3, #24
 8003c02:	d137      	bne.n	8003c74 <HAL_RCC_OscConfig+0x220>
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d132      	bne.n	8003c74 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0e:	4b2f      	ldr	r3, [pc, #188]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1d2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e314      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c26:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0219 	bic.w	r2, r3, #25
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4926      	ldr	r1, [pc, #152]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c38:	f7fe f822 	bl	8001c80 <HAL_GetTick>
 8003c3c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fe f81e 	bl	8001c80 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e2fe      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	4917      	ldr	r1, [pc, #92]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c72:	e046      	b.n	8003d02 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d029      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 0219 	bic.w	r2, r3, #25
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4910      	ldr	r1, [pc, #64]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fff7 	bl	8001c80 <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fd fff3 	bl	8001c80 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e2d3      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	4902      	ldr	r1, [pc, #8]	; (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
 8003cc8:	e01b      	b.n	8003d02 <HAL_RCC_OscConfig+0x2ae>
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd0:	4b97      	ldr	r3, [pc, #604]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a96      	ldr	r2, [pc, #600]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd ffd0 	bl	8001c80 <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fd ffcc 	bl	8001c80 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e2ac      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cf6:	4b8e      	ldr	r3, [pc, #568]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d06a      	beq.n	8003de4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0e:	4b88      	ldr	r3, [pc, #544]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d18:	4b85      	ldr	r3, [pc, #532]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d007      	beq.n	8003d34 <HAL_RCC_OscConfig+0x2e0>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b18      	cmp	r3, #24
 8003d28:	d11b      	bne.n	8003d62 <HAL_RCC_OscConfig+0x30e>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d116      	bne.n	8003d62 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d34:	4b7e      	ldr	r3, [pc, #504]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_OscConfig+0x2f8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	2b80      	cmp	r3, #128	; 0x80
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e281      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d4c:	4b78      	ldr	r3, [pc, #480]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	4975      	ldr	r1, [pc, #468]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d60:	e040      	b.n	8003de4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d023      	beq.n	8003db2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d6a:	4b71      	ldr	r3, [pc, #452]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a70      	ldr	r2, [pc, #448]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd ff83 	bl	8001c80 <HAL_GetTick>
 8003d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d7e:	f7fd ff7f 	bl	8001c80 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e25f      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d90:	4b67      	ldr	r3, [pc, #412]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d9c:	4b64      	ldr	r3, [pc, #400]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	4961      	ldr	r1, [pc, #388]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
 8003db0:	e018      	b.n	8003de4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003db2:	4b5f      	ldr	r3, [pc, #380]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a5e      	ldr	r2, [pc, #376]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fd ff5f 	bl	8001c80 <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003dc6:	f7fd ff5b 	bl	8001c80 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e23b      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dd8:	4b55      	ldr	r3, [pc, #340]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d036      	beq.n	8003e5e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d019      	beq.n	8003e2c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df8:	4b4d      	ldr	r3, [pc, #308]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfc:	4a4c      	ldr	r2, [pc, #304]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7fd ff3c 	bl	8001c80 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0c:	f7fd ff38 	bl	8001c80 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e218      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e1e:	4b44      	ldr	r3, [pc, #272]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x3b8>
 8003e2a:	e018      	b.n	8003e5e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2c:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e30:	4a3f      	ldr	r2, [pc, #252]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd ff22 	bl	8001c80 <HAL_GetTick>
 8003e3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fd ff1e 	bl	8001c80 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e1fe      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e52:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d036      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d019      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e72:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e7e:	f7fd feff 	bl	8001c80 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e86:	f7fd fefb 	bl	8001c80 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1db      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x432>
 8003ea4:	e018      	b.n	8003ed8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fee5 	bl	8001c80 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003eba:	f7fd fee1 	bl	8001c80 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1c1      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80af 	beq.w	8004044 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCC_OscConfig+0x4e0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <HAL_RCC_OscConfig+0x4e0>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ef2:	f7fd fec5 	bl	8001c80 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003efa:	f7fd fec1 	bl	8001c80 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b64      	cmp	r3, #100	; 0x64
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1a1      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_OscConfig+0x4e0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d10b      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4e4>
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a02      	ldr	r2, [pc, #8]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2c:	e05b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x592>
 8003f2e:	bf00      	nop
 8003f30:	58024400 	.word	0x58024400
 8003f34:	58024800 	.word	0x58024800
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d112      	bne.n	8003f66 <HAL_RCC_OscConfig+0x512>
 8003f40:	4b9d      	ldr	r3, [pc, #628]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	4a9c      	ldr	r2, [pc, #624]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4c:	4b9a      	ldr	r3, [pc, #616]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a99      	ldr	r2, [pc, #612]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	4b97      	ldr	r3, [pc, #604]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a96      	ldr	r2, [pc, #600]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f5e:	f023 0304 	bic.w	r3, r3, #4
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	e03f      	b.n	8003fe6 <HAL_RCC_OscConfig+0x592>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCC_OscConfig+0x540>
 8003f6e:	4b92      	ldr	r3, [pc, #584]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4a91      	ldr	r2, [pc, #580]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7a:	4b8f      	ldr	r3, [pc, #572]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a8e      	ldr	r2, [pc, #568]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	4b8c      	ldr	r3, [pc, #560]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a8b      	ldr	r2, [pc, #556]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	e028      	b.n	8003fe6 <HAL_RCC_OscConfig+0x592>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b85      	cmp	r3, #133	; 0x85
 8003f9a:	d112      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x56e>
 8003f9c:	4b86      	ldr	r3, [pc, #536]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a85      	ldr	r2, [pc, #532]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b83      	ldr	r3, [pc, #524]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a82      	ldr	r2, [pc, #520]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb4:	4b80      	ldr	r3, [pc, #512]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	4a7f      	ldr	r2, [pc, #508]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc0:	e011      	b.n	8003fe6 <HAL_RCC_OscConfig+0x592>
 8003fc2:	4b7d      	ldr	r3, [pc, #500]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a7c      	ldr	r2, [pc, #496]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fce:	4b7a      	ldr	r3, [pc, #488]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a79      	ldr	r2, [pc, #484]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	4b77      	ldr	r3, [pc, #476]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a76      	ldr	r2, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d015      	beq.n	800401a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fee:	f7fd fe47 	bl	8001c80 <HAL_GetTick>
 8003ff2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ff4:	e00a      	b.n	800400c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff6:	f7fd fe43 	bl	8001c80 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f241 3288 	movw	r2, #5000	; 0x1388
 8004004:	4293      	cmp	r3, r2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e121      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ee      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x5a2>
 8004018:	e014      	b.n	8004044 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fd fe31 	bl	8001c80 <HAL_GetTick>
 800401e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fd fe2d 	bl	8001c80 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e10b      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004038:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ee      	bne.n	8004022 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8100 	beq.w	800424e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800404e:	4b5a      	ldr	r3, [pc, #360]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004056:	2b18      	cmp	r3, #24
 8004058:	f000 80bb 	beq.w	80041d2 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b02      	cmp	r3, #2
 8004062:	f040 8095 	bne.w	8004190 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b54      	ldr	r3, [pc, #336]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a53      	ldr	r2, [pc, #332]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800406c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fd fe05 	bl	8001c80 <HAL_GetTick>
 8004076:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407a:	f7fd fe01 	bl	8001c80 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0e1      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800408c:	4b4a      	ldr	r3, [pc, #296]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004098:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800409a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800409c:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_OscConfig+0x768>)
 800409e:	4013      	ands	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040a8:	0112      	lsls	r2, r2, #4
 80040aa:	430a      	orrs	r2, r1
 80040ac:	4942      	ldr	r1, [pc, #264]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	628b      	str	r3, [r1, #40]	; 0x28
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	3b01      	subs	r3, #1
 80040b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	3b01      	subs	r3, #1
 80040c2:	025b      	lsls	r3, r3, #9
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	3b01      	subs	r3, #1
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	3b01      	subs	r3, #1
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040e2:	4935      	ldr	r1, [pc, #212]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80040e8:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040f4:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 80040f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_OscConfig+0x76c>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004100:	00d2      	lsls	r2, r2, #3
 8004102:	492d      	ldr	r1, [pc, #180]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004104:	4313      	orrs	r3, r2
 8004106:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004108:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	f023 020c 	bic.w	r2, r3, #12
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	4928      	ldr	r1, [pc, #160]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004116:	4313      	orrs	r3, r2
 8004118:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f023 0202 	bic.w	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4924      	ldr	r1, [pc, #144]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004128:	4313      	orrs	r3, r2
 800412a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800412c:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004144:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800414a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800415c:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd fd8a 	bl	8001c80 <HAL_GetTick>
 800416c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd fd86 	bl	8001c80 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e066      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x71c>
 800418e:	e05e      	b.n	800424e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004190:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <HAL_RCC_OscConfig+0x764>)
 8004196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800419a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fd fd70 	bl	8001c80 <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041a2:	e00f      	b.n	80041c4 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd fd6c 	bl	8001c80 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d908      	bls.n	80041c4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e04c      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
 80041b6:	bf00      	nop
 80041b8:	58024400 	.word	0x58024400
 80041bc:	fffffc0c 	.word	0xfffffc0c
 80041c0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041c4:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_OscConfig+0x804>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e9      	bne.n	80041a4 <HAL_RCC_OscConfig+0x750>
 80041d0:	e03d      	b.n	800424e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041d2:	4b21      	ldr	r3, [pc, #132]	; (8004258 <HAL_RCC_OscConfig+0x804>)
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041d8:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <HAL_RCC_OscConfig+0x804>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d031      	beq.n	800424a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f003 0203 	and.w	r2, r3, #3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d12a      	bne.n	800424a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d122      	bne.n	800424a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d11a      	bne.n	800424a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	0a5b      	lsrs	r3, r3, #9
 8004218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d111      	bne.n	800424a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d108      	bne.n	800424a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	0e1b      	lsrs	r3, r3, #24
 800423c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3730      	adds	r7, #48	; 0x30
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	58024400 	.word	0x58024400

0800425c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e19c      	b.n	80045aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004270:	4b8a      	ldr	r3, [pc, #552]	; (800449c <HAL_RCC_ClockConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d910      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b87      	ldr	r3, [pc, #540]	; (800449c <HAL_RCC_ClockConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 020f 	bic.w	r2, r3, #15
 8004286:	4985      	ldr	r1, [pc, #532]	; (800449c <HAL_RCC_ClockConfig+0x240>)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b83      	ldr	r3, [pc, #524]	; (800449c <HAL_RCC_ClockConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e184      	b.n	80045aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d010      	beq.n	80042ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	4b7b      	ldr	r3, [pc, #492]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d908      	bls.n	80042ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042bc:	4b78      	ldr	r3, [pc, #480]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	4975      	ldr	r1, [pc, #468]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d010      	beq.n	80042fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	4b70      	ldr	r3, [pc, #448]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d908      	bls.n	80042fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ea:	4b6d      	ldr	r3, [pc, #436]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	496a      	ldr	r1, [pc, #424]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	4b64      	ldr	r3, [pc, #400]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004314:	429a      	cmp	r2, r3
 8004316:	d908      	bls.n	800432a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004318:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	495e      	ldr	r1, [pc, #376]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 8004326:	4313      	orrs	r3, r2
 8004328:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d010      	beq.n	8004358 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	4b59      	ldr	r3, [pc, #356]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004342:	429a      	cmp	r2, r3
 8004344:	d908      	bls.n	8004358 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004346:	4b56      	ldr	r3, [pc, #344]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4953      	ldr	r1, [pc, #332]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 8004354:	4313      	orrs	r3, r2
 8004356:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	4b4d      	ldr	r3, [pc, #308]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	429a      	cmp	r2, r3
 8004372:	d908      	bls.n	8004386 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b4a      	ldr	r3, [pc, #296]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f023 020f 	bic.w	r2, r3, #15
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4947      	ldr	r1, [pc, #284]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 8004382:	4313      	orrs	r3, r2
 8004384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d055      	beq.n	800443e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004392:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	4940      	ldr	r1, [pc, #256]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ac:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d121      	bne.n	80043fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0f6      	b.n	80045aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043c4:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d115      	bne.n	80043fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0ea      	b.n	80045aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043dc:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0de      	b.n	80045aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ec:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0d6      	b.n	80045aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043fc:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f023 0207 	bic.w	r2, r3, #7
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4925      	ldr	r1, [pc, #148]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 800440a:	4313      	orrs	r3, r2
 800440c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fd fc37 	bl	8001c80 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004414:	e00a      	b.n	800442c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004416:	f7fd fc33 	bl	8001c80 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0be      	b.n	80045aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	429a      	cmp	r2, r3
 800443c:	d1eb      	bne.n	8004416 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d010      	beq.n	800446c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	429a      	cmp	r2, r3
 8004458:	d208      	bcs.n	800446c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f023 020f 	bic.w	r2, r3, #15
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	490e      	ldr	r1, [pc, #56]	; (80044a0 <HAL_RCC_ClockConfig+0x244>)
 8004468:	4313      	orrs	r3, r2
 800446a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_ClockConfig+0x240>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d214      	bcs.n	80044a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCC_ClockConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 020f 	bic.w	r2, r3, #15
 8004482:	4906      	ldr	r1, [pc, #24]	; (800449c <HAL_RCC_ClockConfig+0x240>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_ClockConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e086      	b.n	80045aa <HAL_RCC_ClockConfig+0x34e>
 800449c:	52002000 	.word	0x52002000
 80044a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d010      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044bc:	429a      	cmp	r2, r3
 80044be:	d208      	bcs.n	80044d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044c0:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	4939      	ldr	r1, [pc, #228]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d010      	beq.n	8004500 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d208      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	492e      	ldr	r1, [pc, #184]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d010      	beq.n	800452e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004518:	429a      	cmp	r2, r3
 800451a:	d208      	bcs.n	800452e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800451c:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	4922      	ldr	r1, [pc, #136]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 800452a:	4313      	orrs	r3, r2
 800452c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d010      	beq.n	800455c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004546:	429a      	cmp	r2, r3
 8004548:	d208      	bcs.n	800455c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	4917      	ldr	r1, [pc, #92]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 8004558:	4313      	orrs	r3, r2
 800455a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800455c:	f000 f89e 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	4912      	ldr	r1, [pc, #72]	; (80045b8 <HAL_RCC_ClockConfig+0x35c>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800457a:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <HAL_RCC_ClockConfig+0x358>)
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <HAL_RCC_ClockConfig+0x35c>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <HAL_RCC_ClockConfig+0x360>)
 8004592:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004594:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <HAL_RCC_ClockConfig+0x364>)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <HAL_RCC_ClockConfig+0x368>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fd fb24 	bl	8001bec <HAL_InitTick>
 80045a4:	4603      	mov	r3, r0
 80045a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	58024400 	.word	0x58024400
 80045b8:	0800a140 	.word	0x0800a140
 80045bc:	24000004 	.word	0x24000004
 80045c0:	24000000 	.word	0x24000000
 80045c4:	24000008 	.word	0x24000008

080045c8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08c      	sub	sp, #48	; 0x30
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d12a      	bne.n	8004630 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80045da:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 80045dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 80045ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80045f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	2302      	movs	r3, #2
 8004600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004602:	2303      	movs	r3, #3
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004606:	2300      	movs	r3, #0
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800460a:	2300      	movs	r3, #0
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800460e:	f107 031c 	add.w	r3, r7, #28
 8004612:	4619      	mov	r1, r3
 8004614:	481f      	ldr	r0, [pc, #124]	; (8004694 <HAL_RCC_MCOConfig+0xcc>)
 8004616:	f7fd fc47 	bl	8001ea8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	430b      	orrs	r3, r1
 8004628:	4919      	ldr	r1, [pc, #100]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800462e:	e02a      	b.n	8004686 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 8004632:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004636:	4a16      	ldr	r2, [pc, #88]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 8004638:	f043 0304 	orr.w	r3, r3, #4
 800463c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 8004642:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800464e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004654:	2302      	movs	r3, #2
 8004656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004658:	2303      	movs	r3, #3
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004660:	2300      	movs	r3, #0
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004664:	f107 031c 	add.w	r3, r7, #28
 8004668:	4619      	mov	r1, r3
 800466a:	480b      	ldr	r0, [pc, #44]	; (8004698 <HAL_RCC_MCOConfig+0xd0>)
 800466c:	f7fd fc1c 	bl	8001ea8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	01d9      	lsls	r1, r3, #7
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	430b      	orrs	r3, r1
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCC_MCOConfig+0xc8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	610b      	str	r3, [r1, #16]
}
 8004686:	bf00      	nop
 8004688:	3730      	adds	r7, #48	; 0x30
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400
 8004694:	58020000 	.word	0x58020000
 8004698:	58020800 	.word	0x58020800

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a2:	4bb3      	ldr	r3, [pc, #716]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046aa:	2b18      	cmp	r3, #24
 80046ac:	f200 8155 	bhi.w	800495a <HAL_RCC_GetSysClockFreq+0x2be>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800495b 	.word	0x0800495b
 80046c0:	0800495b 	.word	0x0800495b
 80046c4:	0800495b 	.word	0x0800495b
 80046c8:	0800495b 	.word	0x0800495b
 80046cc:	0800495b 	.word	0x0800495b
 80046d0:	0800495b 	.word	0x0800495b
 80046d4:	0800495b 	.word	0x0800495b
 80046d8:	08004743 	.word	0x08004743
 80046dc:	0800495b 	.word	0x0800495b
 80046e0:	0800495b 	.word	0x0800495b
 80046e4:	0800495b 	.word	0x0800495b
 80046e8:	0800495b 	.word	0x0800495b
 80046ec:	0800495b 	.word	0x0800495b
 80046f0:	0800495b 	.word	0x0800495b
 80046f4:	0800495b 	.word	0x0800495b
 80046f8:	08004749 	.word	0x08004749
 80046fc:	0800495b 	.word	0x0800495b
 8004700:	0800495b 	.word	0x0800495b
 8004704:	0800495b 	.word	0x0800495b
 8004708:	0800495b 	.word	0x0800495b
 800470c:	0800495b 	.word	0x0800495b
 8004710:	0800495b 	.word	0x0800495b
 8004714:	0800495b 	.word	0x0800495b
 8004718:	0800474f 	.word	0x0800474f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800471c:	4b94      	ldr	r3, [pc, #592]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004728:	4b91      	ldr	r3, [pc, #580]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a90      	ldr	r2, [pc, #576]	; (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800473a:	e111      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800473c:	4b8d      	ldr	r3, [pc, #564]	; (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800473e:	61bb      	str	r3, [r7, #24]
    break;
 8004740:	e10e      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004742:	4b8d      	ldr	r3, [pc, #564]	; (8004978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004744:	61bb      	str	r3, [r7, #24]
    break;
 8004746:	e10b      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004748:	4b8c      	ldr	r3, [pc, #560]	; (800497c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800474a:	61bb      	str	r3, [r7, #24]
    break;
 800474c:	e108      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800474e:	4b88      	ldr	r3, [pc, #544]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004758:	4b85      	ldr	r3, [pc, #532]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004762:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004764:	4b82      	ldr	r3, [pc, #520]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800476e:	4b80      	ldr	r3, [pc, #512]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80e1 	beq.w	8004954 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b02      	cmp	r3, #2
 8004796:	f000 8083 	beq.w	80048a0 <HAL_RCC_GetSysClockFreq+0x204>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b02      	cmp	r3, #2
 800479e:	f200 80a1 	bhi.w	80048e4 <HAL_RCC_GetSysClockFreq+0x248>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x114>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d056      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x1c0>
 80047ae:	e099      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b0:	4b6f      	ldr	r3, [pc, #444]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02d      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047bc:	4b6c      	ldr	r3, [pc, #432]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	08db      	lsrs	r3, r3, #3
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	4a6b      	ldr	r2, [pc, #428]	; (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b62      	ldr	r3, [pc, #392]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004816:	e087      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004984 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b51      	ldr	r3, [pc, #324]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a02 	vldr	s12, [r7, #8]
 800483e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485a:	e065      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004988 <HAL_RCC_GetSysClockFreq+0x2ec>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b40      	ldr	r3, [pc, #256]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004882:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489e:	e043      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800498c <HAL_RCC_GetSysClockFreq+0x2f0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b2f      	ldr	r3, [pc, #188]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e2:	e021      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004988 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a02 	vldr	s12, [r7, #8]
 800490a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004926:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004932:	3301      	adds	r3, #1
 8004934:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004940:	edd7 6a07 	vldr	s13, [r7, #28]
 8004944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494c:	ee17 3a90 	vmov	r3, s15
 8004950:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004952:	e005      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
    break;
 8004958:	e002      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800495c:	61bb      	str	r3, [r7, #24]
    break;
 800495e:	bf00      	nop
  }

  return sysclockfreq;
 8004960:	69bb      	ldr	r3, [r7, #24]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3724      	adds	r7, #36	; 0x24
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	03d09000 	.word	0x03d09000
 8004978:	003d0900 	.word	0x003d0900
 800497c:	016e3600 	.word	0x016e3600
 8004980:	46000000 	.word	0x46000000
 8004984:	4c742400 	.word	0x4c742400
 8004988:	4a742400 	.word	0x4a742400
 800498c:	4bb71b00 	.word	0x4bb71b00

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004996:	f7ff fe81 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490f      	ldr	r1, [pc, #60]	; (80049e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ce:	4a07      	ldr	r2, [pc, #28]	; (80049ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	58024400 	.word	0x58024400
 80049e4:	0800a140 	.word	0x0800a140
 80049e8:	24000004 	.word	0x24000004
 80049ec:	24000000 	.word	0x24000000

080049f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80049f4:	f7ff ffcc 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4904      	ldr	r1, [pc, #16]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58024400 	.word	0x58024400
 8004a18:	0800a140 	.word	0x0800a140

08004a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004a20:	f7ff ffb6 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4904      	ldr	r1, [pc, #16]	; (8004a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58024400 	.word	0x58024400
 8004a44:	0800a140 	.word	0x0800a140

08004a48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a50:	2300      	movs	r3, #0
 8004a52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a54:	2300      	movs	r3, #0
 8004a56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03f      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a6c:	d02a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a72:	d824      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a78:	d018      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a7e:	d81e      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a88:	d007      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a8a:	e018      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8c:	4b9f      	ldr	r3, [pc, #636]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4a9e      	ldr	r2, [pc, #632]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a98:	e015      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 ff1b 	bl	80068dc <RCCEx_PLL2_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004aaa:	e00c      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3324      	adds	r3, #36	; 0x24
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 ffc4 	bl	8006a40 <RCCEx_PLL3_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004abc:	e003      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004acc:	4b8f      	ldr	r3, [pc, #572]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ad8:	498c      	ldr	r1, [pc, #560]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ade:	e001      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d03d      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d826      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b15 	.word	0x08004b15
 8004b04:	08004b23 	.word	0x08004b23
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	08004b4d 	.word	0x08004b4d
 8004b10:	08004b4d 	.word	0x08004b4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b14:	4b7d      	ldr	r3, [pc, #500]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	4a7c      	ldr	r2, [pc, #496]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b20:	e015      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3304      	adds	r3, #4
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 fed7 	bl	80068dc <RCCEx_PLL2_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b32:	e00c      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3324      	adds	r3, #36	; 0x24
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 ff80 	bl	8006a40 <RCCEx_PLL3_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b44:	e003      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4a:	e000      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b54:	4b6d      	ldr	r3, [pc, #436]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b58:	f023 0207 	bic.w	r2, r3, #7
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	496a      	ldr	r1, [pc, #424]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	650b      	str	r3, [r1, #80]	; 0x50
 8004b66:	e001      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d04a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b80:	d031      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004b82:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b86:	d82b      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8c:	d02d      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b92:	d825      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004b94:	2bc0      	cmp	r3, #192	; 0xc0
 8004b96:	d02a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b98:	2bc0      	cmp	r3, #192	; 0xc0
 8004b9a:	d821      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d016      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004ba0:	2b80      	cmp	r3, #128	; 0x80
 8004ba2:	d81d      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d007      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004bac:	e018      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bae:	4b57      	ldr	r3, [pc, #348]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	4a56      	ldr	r2, [pc, #344]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004bba:	e019      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 fe8a 	bl	80068dc <RCCEx_PLL2_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004bcc:	e010      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3324      	adds	r3, #36	; 0x24
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 ff33 	bl	8006a40 <RCCEx_PLL3_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004bde:	e007      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
      break;
 8004be4:	e004      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004bf6:	4b45      	ldr	r3, [pc, #276]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	4942      	ldr	r1, [pc, #264]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	650b      	str	r3, [r1, #80]	; 0x50
 8004c08:	e001      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d04f      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c22:	d036      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004c24:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c28:	d830      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2e:	d032      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c34:	d82a      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004c36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c3a:	d02e      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004c3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c40:	d824      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d018      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d81e      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c56:	d007      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004c58:	e018      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5a:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004c66:	e019      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f001 fe34 	bl	80068dc <RCCEx_PLL2_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004c78:	e010      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3324      	adds	r3, #36	; 0x24
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 fedd 	bl	8006a40 <RCCEx_PLL3_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004c8a:	e007      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c90:	e004      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	4917      	ldr	r1, [pc, #92]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	650b      	str	r3, [r1, #80]	; 0x50
 8004cb4:	e001      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d034      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d01c      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004cce:	2b30      	cmp	r3, #48	; 0x30
 8004cd0:	d817      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d00c      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d813      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d018      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d10f      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004cee:	e010      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 fdf0 	bl	80068dc <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004d00:	e007      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
      break;
 8004d06:	e004      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004d08:	bf00      	nop
 8004d0a:	e002      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d0c:	58024400 	.word	0x58024400
      break;
 8004d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d18:	4b9b      	ldr	r3, [pc, #620]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d24:	4998      	ldr	r1, [pc, #608]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d2a:	e001      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d047      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d44:	d030      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d4a:	d82a      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d50:	d02c      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004d52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d56:	d824      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5c:	d018      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d62:	d81e      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6c:	d007      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d6e:	e018      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4b85      	ldr	r3, [pc, #532]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a84      	ldr	r2, [pc, #528]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d7c:	e017      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 fda9 	bl	80068dc <RCCEx_PLL2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d8e:	e00e      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3324      	adds	r3, #36	; 0x24
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 fe52 	bl	8006a40 <RCCEx_PLL3_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004da0:	e005      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
      break;
 8004da6:	e002      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004db4:	4b74      	ldr	r3, [pc, #464]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	4971      	ldr	r1, [pc, #452]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	650b      	str	r3, [r1, #80]	; 0x50
 8004dc6:	e001      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d049      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de0:	d02e      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004de2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de6:	d828      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dec:	d02a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004dee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004df2:	d822      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004df4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004df8:	d026      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004dfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dfe:	d81c      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e04:	d010      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e0a:	d816      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01d      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e14:	d111      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 fd5d 	bl	80068dc <RCCEx_PLL2_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e26:	e012      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3324      	adds	r3, #36	; 0x24
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fe06 	bl	8006a40 <RCCEx_PLL3_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e38:	e009      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3e:	e006      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004e40:	bf00      	nop
 8004e42:	e004      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004e44:	bf00      	nop
 8004e46:	e002      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004e48:	bf00      	nop
 8004e4a:	e000      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e54:	4b4c      	ldr	r3, [pc, #304]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e60:	4949      	ldr	r1, [pc, #292]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	650b      	str	r3, [r1, #80]	; 0x50
 8004e66:	e001      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d053      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e7e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e82:	d034      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004e84:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e88:	d82e      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e8e:	d030      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e94:	d828      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d02c      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea0:	d822      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ea2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ea6:	d028      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004ea8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eac:	d81c      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb2:	d010      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb8:	d816      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01f      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec2:	d111      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	2101      	movs	r1, #1
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f001 fd06 	bl	80068dc <RCCEx_PLL2_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ed4:	e014      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3324      	adds	r3, #36	; 0x24
 8004eda:	2101      	movs	r1, #1
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fdaf 	bl	8006a40 <RCCEx_PLL3_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ee6:	e00b      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	75fb      	strb	r3, [r7, #23]
      break;
 8004eec:	e008      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e006      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e004      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e002      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004efa:	bf00      	nop
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f06:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f14:	491c      	ldr	r1, [pc, #112]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	658b      	str	r3, [r1, #88]	; 0x58
 8004f1a:	e001      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d031      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f34:	d00e      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3a:	d814      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f44:	d10f      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f52:	e00c      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f001 fcbe 	bl	80068dc <RCCEx_PLL2_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f64:	e003      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f80:	4901      	ldr	r1, [pc, #4]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	650b      	str	r3, [r1, #80]	; 0x50
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d032      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d81b      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fe3 	.word	0x08004fe3
 8004fb0:	08004fbd 	.word	0x08004fbd
 8004fb4:	08004fcb 	.word	0x08004fcb
 8004fb8:	08004fe3 	.word	0x08004fe3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbc:	4bb2      	ldr	r3, [pc, #712]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	4ab1      	ldr	r2, [pc, #708]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004fc8:	e00c      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2102      	movs	r1, #2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 fc83 	bl	80068dc <RCCEx_PLL2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004fda:	e003      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fea:	4ba7      	ldr	r3, [pc, #668]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fee:	f023 0203 	bic.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	49a4      	ldr	r1, [pc, #656]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ffc:	e001      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8086 	beq.w	800511c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005010:	4b9e      	ldr	r3, [pc, #632]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a9d      	ldr	r2, [pc, #628]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800501c:	f7fc fe30 	bl	8001c80 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005022:	e009      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005024:	f7fc fe2c 	bl	8001c80 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d902      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	75fb      	strb	r3, [r7, #23]
        break;
 8005036:	e005      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005038:	4b94      	ldr	r3, [pc, #592]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0ef      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d166      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800504a:	4b8f      	ldr	r3, [pc, #572]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800504c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005054:	4053      	eors	r3, r2
 8005056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505a:	2b00      	cmp	r3, #0
 800505c:	d013      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800505e:	4b8a      	ldr	r3, [pc, #552]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005066:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005068:	4b87      	ldr	r3, [pc, #540]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	4a86      	ldr	r2, [pc, #536]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800506e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005072:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005074:	4b84      	ldr	r3, [pc, #528]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a83      	ldr	r2, [pc, #524]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800507a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005080:	4a81      	ldr	r2, [pc, #516]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800508c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005090:	d115      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005092:	f7fc fdf5 	bl	8001c80 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005098:	e00b      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fc fdf1 	bl	8001c80 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d902      	bls.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	75fb      	strb	r3, [r7, #23]
            break;
 80050b0:	e005      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050b2:	4b75      	ldr	r3, [pc, #468]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0ed      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d126      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d2:	d10d      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80050d4:	4b6c      	ldr	r3, [pc, #432]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050e2:	0919      	lsrs	r1, r3, #4
 80050e4:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80050e6:	400b      	ands	r3, r1
 80050e8:	4967      	ldr	r1, [pc, #412]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	610b      	str	r3, [r1, #16]
 80050ee:	e005      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80050f0:	4b65      	ldr	r3, [pc, #404]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	4a64      	ldr	r2, [pc, #400]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050fa:	6113      	str	r3, [r2, #16]
 80050fc:	4b62      	ldr	r3, [pc, #392]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510a:	495f      	ldr	r1, [pc, #380]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800510c:	4313      	orrs	r3, r2
 800510e:	670b      	str	r3, [r1, #112]	; 0x70
 8005110:	e004      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	75bb      	strb	r3, [r7, #22]
 8005116:	e001      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d07f      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512e:	2b28      	cmp	r3, #40	; 0x28
 8005130:	d866      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	08005207 	.word	0x08005207
 800513c:	08005201 	.word	0x08005201
 8005140:	08005201 	.word	0x08005201
 8005144:	08005201 	.word	0x08005201
 8005148:	08005201 	.word	0x08005201
 800514c:	08005201 	.word	0x08005201
 8005150:	08005201 	.word	0x08005201
 8005154:	08005201 	.word	0x08005201
 8005158:	080051dd 	.word	0x080051dd
 800515c:	08005201 	.word	0x08005201
 8005160:	08005201 	.word	0x08005201
 8005164:	08005201 	.word	0x08005201
 8005168:	08005201 	.word	0x08005201
 800516c:	08005201 	.word	0x08005201
 8005170:	08005201 	.word	0x08005201
 8005174:	08005201 	.word	0x08005201
 8005178:	080051ef 	.word	0x080051ef
 800517c:	08005201 	.word	0x08005201
 8005180:	08005201 	.word	0x08005201
 8005184:	08005201 	.word	0x08005201
 8005188:	08005201 	.word	0x08005201
 800518c:	08005201 	.word	0x08005201
 8005190:	08005201 	.word	0x08005201
 8005194:	08005201 	.word	0x08005201
 8005198:	08005207 	.word	0x08005207
 800519c:	08005201 	.word	0x08005201
 80051a0:	08005201 	.word	0x08005201
 80051a4:	08005201 	.word	0x08005201
 80051a8:	08005201 	.word	0x08005201
 80051ac:	08005201 	.word	0x08005201
 80051b0:	08005201 	.word	0x08005201
 80051b4:	08005201 	.word	0x08005201
 80051b8:	08005207 	.word	0x08005207
 80051bc:	08005201 	.word	0x08005201
 80051c0:	08005201 	.word	0x08005201
 80051c4:	08005201 	.word	0x08005201
 80051c8:	08005201 	.word	0x08005201
 80051cc:	08005201 	.word	0x08005201
 80051d0:	08005201 	.word	0x08005201
 80051d4:	08005201 	.word	0x08005201
 80051d8:	08005207 	.word	0x08005207
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	2101      	movs	r1, #1
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 fb7a 	bl	80068dc <RCCEx_PLL2_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80051ec:	e00c      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3324      	adds	r3, #36	; 0x24
 80051f2:	2101      	movs	r1, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fc23 	bl	8006a40 <RCCEx_PLL3_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80051fe:	e003      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
      break;
 8005204:	e000      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8005206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800520e:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521c:	491a      	ldr	r1, [pc, #104]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800521e:	4313      	orrs	r3, r2
 8005220:	654b      	str	r3, [r1, #84]	; 0x54
 8005222:	e001      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d03f      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005238:	2b05      	cmp	r3, #5
 800523a:	d821      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005295 	.word	0x08005295
 8005248:	0800525d 	.word	0x0800525d
 800524c:	0800526f 	.word	0x0800526f
 8005250:	08005295 	.word	0x08005295
 8005254:	08005295 	.word	0x08005295
 8005258:	08005295 	.word	0x08005295
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f001 fb3a 	bl	80068dc <RCCEx_PLL2_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800526c:	e013      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3324      	adds	r3, #36	; 0x24
 8005272:	2101      	movs	r1, #1
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fbe3 	bl	8006a40 <RCCEx_PLL3_Config>
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800527e:	e00a      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
      break;
 8005284:	e007      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005286:	bf00      	nop
 8005288:	58024400 	.word	0x58024400
 800528c:	58024800 	.word	0x58024800
 8005290:	00ffffcf 	.word	0x00ffffcf
      break;
 8005294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800529c:	4b9f      	ldr	r3, [pc, #636]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	f023 0207 	bic.w	r2, r3, #7
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a8:	499c      	ldr	r1, [pc, #624]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	654b      	str	r3, [r1, #84]	; 0x54
 80052ae:	e001      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d039      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d820      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	08005313 	.word	0x08005313
 80052d4:	080052e9 	.word	0x080052e9
 80052d8:	080052fb 	.word	0x080052fb
 80052dc:	08005313 	.word	0x08005313
 80052e0:	08005313 	.word	0x08005313
 80052e4:	08005313 	.word	0x08005313
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 faf4 	bl	80068dc <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80052f8:	e00c      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	2101      	movs	r1, #1
 8005300:	4618      	mov	r0, r3
 8005302:	f001 fb9d 	bl	8006a40 <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	e000      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800531a:	4b80      	ldr	r3, [pc, #512]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800531c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531e:	f023 0207 	bic.w	r2, r3, #7
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005328:	497c      	ldr	r1, [pc, #496]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	658b      	str	r3, [r1, #88]	; 0x58
 800532e:	e001      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d04b      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800534a:	d02e      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x962>
 800534c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005350:	d828      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005356:	d02a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d822      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800535e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005362:	d026      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005368:	d81c      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800536a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536e:	d010      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005374:	d816      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01d      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800537a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537e:	d111      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	2100      	movs	r1, #0
 8005386:	4618      	mov	r0, r3
 8005388:	f001 faa8 	bl	80068dc <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005390:	e012      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3324      	adds	r3, #36	; 0x24
 8005396:	2102      	movs	r1, #2
 8005398:	4618      	mov	r0, r3
 800539a:	f001 fb51 	bl	8006a40 <RCCEx_PLL3_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053a2:	e009      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
      break;
 80053a8:	e006      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80053aa:	bf00      	nop
 80053ac:	e004      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80053ae:	bf00      	nop
 80053b0:	e002      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80053b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053be:	4b57      	ldr	r3, [pc, #348]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053cc:	4953      	ldr	r1, [pc, #332]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	654b      	str	r3, [r1, #84]	; 0x54
 80053d2:	e001      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d04b      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053ee:	d02e      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80053f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053f4:	d828      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d02a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80053fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005400:	d822      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005406:	d026      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800540c:	d81c      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800540e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005412:	d010      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005418:	d816      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01d      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800541e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005422:	d111      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fa56 	bl	80068dc <RCCEx_PLL2_Config>
 8005430:	4603      	mov	r3, r0
 8005432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005434:	e012      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3324      	adds	r3, #36	; 0x24
 800543a:	2102      	movs	r1, #2
 800543c:	4618      	mov	r0, r3
 800543e:	f001 faff 	bl	8006a40 <RCCEx_PLL3_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005446:	e009      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	75fb      	strb	r3, [r7, #23]
      break;
 800544c:	e006      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800544e:	bf00      	nop
 8005450:	e004      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005452:	bf00      	nop
 8005454:	e002      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800545a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005462:	4b2e      	ldr	r3, [pc, #184]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005470:	492a      	ldr	r1, [pc, #168]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005472:	4313      	orrs	r3, r2
 8005474:	658b      	str	r3, [r1, #88]	; 0x58
 8005476:	e001      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d04d      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800548e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005492:	d02e      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005494:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005498:	d828      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800549a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549e:	d02a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a4:	d822      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80054a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054aa:	d026      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80054ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054b0:	d81c      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80054b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b6:	d010      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80054b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054bc:	d816      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01d      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80054c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c6:	d111      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 fa04 	bl	80068dc <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054d8:	e012      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	2102      	movs	r1, #2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 faad 	bl	8006a40 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054ea:	e009      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
      break;
 80054f0:	e006      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80054f2:	bf00      	nop
 80054f4:	e004      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80054f6:	bf00      	nop
 80054f8:	e002      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80054fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10c      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005514:	4901      	ldr	r1, [pc, #4]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005516:	4313      	orrs	r3, r2
 8005518:	658b      	str	r3, [r1, #88]	; 0x58
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800551c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553a:	d10a      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3324      	adds	r3, #36	; 0x24
 8005540:	2102      	movs	r1, #2
 8005542:	4618      	mov	r0, r3
 8005544:	f001 fa7c 	bl	8006a40 <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005552:	4b8c      	ldr	r3, [pc, #560]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	4988      	ldr	r1, [pc, #544]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005562:	4313      	orrs	r3, r2
 8005564:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557c:	d10a      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3324      	adds	r3, #36	; 0x24
 8005582:	2102      	movs	r1, #2
 8005584:	4618      	mov	r0, r3
 8005586:	f001 fa5b 	bl	8006a40 <RCCEx_PLL3_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005594:	4b7b      	ldr	r3, [pc, #492]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a2:	4978      	ldr	r1, [pc, #480]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d034      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055be:	d01d      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80055c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c4:	d817      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80055ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ce:	d009      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80055d0:	e011      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 f97f 	bl	80068dc <RCCEx_PLL2_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055e2:	e00c      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3324      	adds	r3, #36	; 0x24
 80055e8:	2102      	movs	r1, #2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fa28 	bl	8006a40 <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055f4:	e003      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
      break;
 80055fa:	e000      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80055fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005604:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005612:	495c      	ldr	r1, [pc, #368]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	658b      	str	r3, [r1, #88]	; 0x58
 8005618:	e001      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d033      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005630:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005634:	d01c      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005636:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800563a:	d816      	bhi.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800563c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005640:	d003      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005646:	d007      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005648:	e00f      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564a:	4b4e      	ldr	r3, [pc, #312]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	4a4d      	ldr	r2, [pc, #308]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005656:	e00c      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3324      	adds	r3, #36	; 0x24
 800565c:	2101      	movs	r1, #1
 800565e:	4618      	mov	r0, r3
 8005660:	f001 f9ee 	bl	8006a40 <RCCEx_PLL3_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005668:	e003      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
      break;
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005678:	4b42      	ldr	r3, [pc, #264]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800567a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005686:	493f      	ldr	r1, [pc, #252]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005688:	4313      	orrs	r3, r2
 800568a:	654b      	str	r3, [r1, #84]	; 0x54
 800568c:	e001      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	7dfb      	ldrb	r3, [r7, #23]
 8005690:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d029      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d007      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80056ac:	e00f      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ae:	4b35      	ldr	r3, [pc, #212]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	4a34      	ldr	r2, [pc, #208]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80056b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056ba:	e00b      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	2102      	movs	r1, #2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 f90a 	bl	80068dc <RCCEx_PLL2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056cc:	e002      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]
      break;
 80056d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056da:	4b2a      	ldr	r3, [pc, #168]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	4927      	ldr	r1, [pc, #156]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056ec:	e001      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3324      	adds	r3, #36	; 0x24
 8005702:	2102      	movs	r1, #2
 8005704:	4618      	mov	r0, r3
 8005706:	f001 f99b 	bl	8006a40 <RCCEx_PLL3_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d035      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572a:	d017      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800572c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005730:	d811      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005736:	d013      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573c:	d80b      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d010      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d106      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800574e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005754:	e007      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
      break;
 800575a:	e004      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800575c:	bf00      	nop
 800575e:	e002      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005760:	bf00      	nop
 8005762:	e000      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10d      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577a:	4902      	ldr	r1, [pc, #8]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800577c:	4313      	orrs	r3, r2
 800577e:	654b      	str	r3, [r1, #84]	; 0x54
 8005780:	e004      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005782:	bf00      	nop
 8005784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005798:	4b30      	ldr	r3, [pc, #192]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800579a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a4:	492d      	ldr	r1, [pc, #180]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057b6:	4b29      	ldr	r3, [pc, #164]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c2:	4926      	ldr	r1, [pc, #152]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80057d4:	4b21      	ldr	r3, [pc, #132]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	491e      	ldr	r1, [pc, #120]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00d      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057f2:	4b1a      	ldr	r3, [pc, #104]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	4a19      	ldr	r2, [pc, #100]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057fc:	6113      	str	r3, [r2, #16]
 80057fe:	4b17      	ldr	r3, [pc, #92]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005808:	4914      	ldr	r1, [pc, #80]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800580a:	4313      	orrs	r3, r2
 800580c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	da08      	bge.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005816:	4b11      	ldr	r3, [pc, #68]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005822:	490e      	ldr	r1, [pc, #56]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005824:	4313      	orrs	r3, r2
 8005826:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005838:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	4906      	ldr	r1, [pc, #24]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005844:	4313      	orrs	r3, r2
 8005846:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005848:	7dbb      	ldrb	r3, [r7, #22]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e000      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	58024400 	.word	0x58024400

08005860 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b090      	sub	sp, #64	; 0x40
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586e:	f040 8089 	bne.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005872:	4b91      	ldr	r3, [pc, #580]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	2b04      	cmp	r3, #4
 8005880:	d87d      	bhi.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	0800589d 	.word	0x0800589d
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005979 	.word	0x08005979
 8005898:	08005909 	.word	0x08005909
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800589c:	4b86      	ldr	r3, [pc, #536]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a8:	d107      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fec2 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058b8:	e3f4      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058be:	e3f1      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058c0:	4b7d      	ldr	r3, [pc, #500]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058cc:	d107      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ce:	f107 0318 	add.w	r3, r7, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fc08 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058dc:	e3e2      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e2:	e3df      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058e4:	4b74      	ldr	r3, [pc, #464]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f0:	d107      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f2:	f107 030c 	add.w	r3, r7, #12
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fd4a 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005900:	e3d0      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005906:	e3cd      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005908:	4b6b      	ldr	r3, [pc, #428]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800590a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005910:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005912:	4b69      	ldr	r3, [pc, #420]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d10c      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005924:	4b64      	ldr	r3, [pc, #400]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	08db      	lsrs	r3, r3, #3
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	4a63      	ldr	r2, [pc, #396]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005936:	e01e      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005938:	4b5f      	ldr	r3, [pc, #380]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005944:	d106      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594c:	d102      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800594e:	4b5c      	ldr	r3, [pc, #368]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005952:	e010      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005954:	4b58      	ldr	r3, [pc, #352]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005960:	d106      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005968:	d102      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800596a:	4b56      	ldr	r3, [pc, #344]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596e:	e002      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005974:	e396      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005976:	e395      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005978:	4b53      	ldr	r3, [pc, #332]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597c:	e392      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005982:	e38f      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800598a:	f040 809f 	bne.w	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800598e:	4b4a      	ldr	r3, [pc, #296]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005992:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005996:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599e:	d04d      	beq.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	f200 8084 	bhi.w	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2bc0      	cmp	r3, #192	; 0xc0
 80059ae:	d07d      	beq.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	2bc0      	cmp	r3, #192	; 0xc0
 80059b4:	d87d      	bhi.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d02d      	beq.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	d877      	bhi.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d012      	beq.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80059ce:	e070      	b.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059d0:	4b39      	ldr	r3, [pc, #228]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059dc:	d107      	bne.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fe28 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059ec:	e35a      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059f2:	e357      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059f4:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a00:	d107      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a02:	f107 0318 	add.w	r3, r7, #24
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fb6e 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a10:	e348      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a16:	e345      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a18:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a24:	d107      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a26:	f107 030c 	add.w	r3, r7, #12
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fcb0 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a34:	e336      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a3a:	e333      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a3c:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a46:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d10c      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d109      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a58:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	08db      	lsrs	r3, r3, #3
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	4a16      	ldr	r2, [pc, #88]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a6a:	e01e      	b.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a6c:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a78:	d106      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a80:	d102      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a82:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a86:	e010      	b.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a94:	d106      	bne.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a9c:	d102      	bne.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a9e:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa2:	e002      	b.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005aa8:	e2fc      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005aaa:	e2fb      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab0:	e2f8      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab6:	e2f5      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	03d09000 	.word	0x03d09000
 8005ac0:	003d0900 	.word	0x003d0900
 8005ac4:	016e3600 	.word	0x016e3600
 8005ac8:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad2:	f040 809c 	bne.w	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8005ad6:	4b9d      	ldr	r3, [pc, #628]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005ade:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae6:	d054      	beq.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aee:	f200 808b 	bhi.w	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005af8:	f000 8083 	beq.w	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b02:	f200 8081 	bhi.w	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0c:	d02f      	beq.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b14:	d878      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b22:	d012      	beq.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005b24:	e070      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b26:	4b89      	ldr	r3, [pc, #548]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b32:	d107      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fd7d 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b42:	e2af      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b48:	e2ac      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b4a:	4b80      	ldr	r3, [pc, #512]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b56:	d107      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b58:	f107 0318 	add.w	r3, r7, #24
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fac3 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b66:	e29d      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b6c:	e29a      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b6e:	4b77      	ldr	r3, [pc, #476]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b7c:	f107 030c 	add.w	r3, r7, #12
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fc05 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b8a:	e28b      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b90:	e288      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b92:	4b6e      	ldr	r3, [pc, #440]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b9c:	4b6b      	ldr	r3, [pc, #428]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d10c      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bae:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	08db      	lsrs	r3, r3, #3
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	4a65      	ldr	r2, [pc, #404]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc0:	e01e      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bc2:	4b62      	ldr	r3, [pc, #392]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bce:	d106      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bd6:	d102      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005bd8:	4b5e      	ldr	r3, [pc, #376]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bdc:	e010      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bde:	4b5b      	ldr	r3, [pc, #364]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bea:	d106      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf2:	d102      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005bf4:	4b58      	ldr	r3, [pc, #352]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf8:	e002      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8005bfe:	e251      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005c00:	e250      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c02:	4b56      	ldr	r3, [pc, #344]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c06:	e24d      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c0c:	e24a      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c14:	f040 80a7 	bne.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005c18:	4b4c      	ldr	r3, [pc, #304]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005c20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c28:	d055      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c30:	f200 8096 	bhi.w	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c3a:	f000 8084 	beq.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c44:	f200 808c 	bhi.w	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4e:	d030      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c56:	f200 8083 	bhi.w	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c66:	d012      	beq.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8005c68:	e07a      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c6a:	4b38      	ldr	r3, [pc, #224]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c76:	d107      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fcdb 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c86:	e20d      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c8c:	e20a      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c8e:	4b2f      	ldr	r3, [pc, #188]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c9a:	d107      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c9c:	f107 0318 	add.w	r3, r7, #24
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fa21 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005caa:	e1fb      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cb0:	e1f8      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cb2:	4b26      	ldr	r3, [pc, #152]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc0:	f107 030c 	add.w	r3, r7, #12
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fb63 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cce:	e1e9      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cd4:	e1e6      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005cd6:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cde:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d10c      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cf2:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	08db      	lsrs	r3, r3, #3
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d04:	e01e      	b.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d12:	d106      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d1a:	d102      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d20:	e010      	b.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d22:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d2e:	d106      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d36:	d102      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	e002      	b.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d42:	e1af      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005d44:	e1ae      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d4a:	e1ab      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	03d09000 	.word	0x03d09000
 8005d54:	003d0900 	.word	0x003d0900
 8005d58:	016e3600 	.word	0x016e3600
 8005d5c:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d64:	e19e      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d6c:	d173      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005d6e:	4b9d      	ldr	r3, [pc, #628]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d7e:	d02f      	beq.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d86:	d863      	bhi.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d012      	beq.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8005d96:	e05b      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d98:	4b92      	ldr	r3, [pc, #584]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da4:	d107      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da6:	f107 0318 	add.w	r3, r7, #24
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f99c 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005db4:	e176      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dba:	e173      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dbc:	4b89      	ldr	r3, [pc, #548]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc8:	d107      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dca:	f107 030c 	add.w	r3, r7, #12
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fade 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005dd8:	e164      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dde:	e161      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005de0:	4b80      	ldr	r3, [pc, #512]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dea:	4b7e      	ldr	r3, [pc, #504]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dfc:	4b79      	ldr	r3, [pc, #484]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	08db      	lsrs	r3, r3, #3
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	4a78      	ldr	r2, [pc, #480]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e0e:	e01e      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e10:	4b74      	ldr	r3, [pc, #464]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1c:	d106      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e24:	d102      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005e26:	4b71      	ldr	r3, [pc, #452]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e2a:	e010      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e2c:	4b6d      	ldr	r3, [pc, #436]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e38:	d106      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e40:	d102      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e42:	4b6b      	ldr	r3, [pc, #428]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e46:	e002      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e4c:	e12a      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005e4e:	e129      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e54:	e126      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d133      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005e5e:	4b61      	ldr	r3, [pc, #388]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e66:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e74:	d012      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005e76:	e023      	b.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e78:	4b5a      	ldr	r3, [pc, #360]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e84:	d107      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fbd4 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e94:	e106      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e9a:	e103      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e9c:	4b51      	ldr	r3, [pc, #324]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea8:	d107      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eaa:	f107 0318 	add.w	r3, r7, #24
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f91a 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005eb8:	e0f4      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ebe:	e0f1      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ec4:	e0ee      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ecc:	f040 809b 	bne.w	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005ed0:	4b44      	ldr	r3, [pc, #272]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005ed8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005ee0:	f000 808b 	beq.w	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005eea:	f200 8089 	bhi.w	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ef4:	d06c      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005efc:	f200 8080 	bhi.w	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f06:	d056      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d877      	bhi.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f16:	d03b      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f1e:	d86f      	bhi.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f26:	d021      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2e:	d867      	bhi.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f3c:	d004      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8005f3e:	e05f      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005f40:	f000 f8bc 	bl	80060bc <HAL_RCCEx_GetD3PCLK1Freq>
 8005f44:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005f46:	e0ad      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f48:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f54:	d107      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f56:	f107 0318 	add.w	r3, r7, #24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f8c4 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f64:	e09e      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f6a:	e09b      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f78:	d107      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f7a:	f107 030c 	add.w	r3, r7, #12
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fa06 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f88:	e08c      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f8e:	e089      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f90:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d109      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	08db      	lsrs	r3, r3, #3
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fae:	e079      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fb4:	e076      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc2:	d102      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005fc8:	e06c      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fce:	e069      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fd0:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fdc:	d10a      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8005fde:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fe2:	e05f      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	03d09000 	.word	0x03d09000
 8005fec:	003d0900 	.word	0x003d0900
 8005ff0:	016e3600 	.word	0x016e3600
          frequency = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ff8:	e054      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ffa:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ffe:	e051      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006004:	e04e      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600c:	d148      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800600e:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8006010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006016:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601e:	d02a      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006026:	d838      	bhi.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	2b00      	cmp	r3, #0
 800602c:	d004      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006034:	d00d      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006036:	e030      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006044:	d102      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800604a:	e02b      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006050:	e028      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006052:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800605e:	d107      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fae7 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800606e:	e019      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006074:	e016      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006076:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800607e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006082:	d107      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006084:	f107 0318 	add.w	r3, r7, #24
 8006088:	4618      	mov	r0, r3
 800608a:	f000 f82d 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006092:	e007      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006098:	e004      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800609e:	e001      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80060a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3740      	adds	r7, #64	; 0x40
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	00bb8000 	.word	0x00bb8000
 80060b4:	58024400 	.word	0x58024400
 80060b8:	016e3600 	.word	0x016e3600

080060bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80060c0:	f7fe fc66 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80060c4:	4602      	mov	r2, r0
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	4904      	ldr	r1, [pc, #16]	; (80060e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80060d2:	5ccb      	ldrb	r3, [r1, r3]
 80060d4:	f003 031f 	and.w	r3, r3, #31
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	58024400 	.word	0x58024400
 80060e4:	0800a140 	.word	0x0800a140

080060e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b089      	sub	sp, #36	; 0x24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060f0:	4ba1      	ldr	r3, [pc, #644]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80060fa:	4b9f      	ldr	r3, [pc, #636]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	0b1b      	lsrs	r3, r3, #12
 8006100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006104:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006106:	4b9c      	ldr	r3, [pc, #624]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006112:	4b99      	ldr	r3, [pc, #612]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	08db      	lsrs	r3, r3, #3
 8006118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8111 	beq.w	8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b02      	cmp	r3, #2
 800613a:	f000 8083 	beq.w	8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b02      	cmp	r3, #2
 8006142:	f200 80a1 	bhi.w	8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d056      	beq.n	8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006152:	e099      	b.n	8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006154:	4b88      	ldr	r3, [pc, #544]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02d      	beq.n	80061bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006160:	4b85      	ldr	r3, [pc, #532]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	08db      	lsrs	r3, r3, #3
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	4a84      	ldr	r2, [pc, #528]	; (800637c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
 8006170:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618a:	4b7b      	ldr	r3, [pc, #492]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619a:	ed97 6a03 	vldr	s12, [r7, #12]
 800619e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061ba:	e087      	b.n	80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006384 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80061ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ce:	4b6a      	ldr	r3, [pc, #424]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061de:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061fe:	e065      	b.n	80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800620e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006212:	4b59      	ldr	r3, [pc, #356]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006222:	ed97 6a03 	vldr	s12, [r7, #12]
 8006226:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800622a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006242:	e043      	b.n	80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800638c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006256:	4b48      	ldr	r3, [pc, #288]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006266:	ed97 6a03 	vldr	s12, [r7, #12]
 800626a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800626e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800627a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006282:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006286:	e021      	b.n	80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006292:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629a:	4b37      	ldr	r3, [pc, #220]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80062cc:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	0a5b      	lsrs	r3, r3, #9
 80062d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f2:	ee17 2a90 	vmov	r2, s15
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80062fa:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006314:	edd7 6a07 	vldr	s13, [r7, #28]
 8006318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800631c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006320:	ee17 2a90 	vmov	r2, s15
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006328:	4b13      	ldr	r3, [pc, #76]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	0e1b      	lsrs	r3, r3, #24
 800632e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800633e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006342:	edd7 6a07 	vldr	s13, [r7, #28]
 8006346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800634a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634e:	ee17 2a90 	vmov	r2, s15
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006356:	e008      	b.n	800636a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
}
 800636a:	bf00      	nop
 800636c:	3724      	adds	r7, #36	; 0x24
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
 800637c:	03d09000 	.word	0x03d09000
 8006380:	46000000 	.word	0x46000000
 8006384:	4c742400 	.word	0x4c742400
 8006388:	4a742400 	.word	0x4a742400
 800638c:	4bb71b00 	.word	0x4bb71b00

08006390 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006390:	b480      	push	{r7}
 8006392:	b089      	sub	sp, #36	; 0x24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006398:	4ba1      	ldr	r3, [pc, #644]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80063a2:	4b9f      	ldr	r3, [pc, #636]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	0d1b      	lsrs	r3, r3, #20
 80063a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80063ae:	4b9c      	ldr	r3, [pc, #624]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80063ba:	4b99      	ldr	r3, [pc, #612]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	08db      	lsrs	r3, r3, #3
 80063c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8111 	beq.w	8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	f000 8083 	beq.w	80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	f200 80a1 	bhi.w	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d056      	beq.n	80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063fa:	e099      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fc:	4b88      	ldr	r3, [pc, #544]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02d      	beq.n	8006464 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006408:	4b85      	ldr	r3, [pc, #532]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	08db      	lsrs	r3, r3, #3
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	4a84      	ldr	r2, [pc, #528]	; (8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b7b      	ldr	r3, [pc, #492]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a03 	vldr	s12, [r7, #12]
 8006446:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006462:	e087      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800662c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a03 	vldr	s12, [r7, #12]
 800648a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a6:	e065      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ba:	4b59      	ldr	r3, [pc, #356]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ea:	e043      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fe:	4b48      	ldr	r3, [pc, #288]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006512:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652e:	e021      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800653e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006542:	4b37      	ldr	r3, [pc, #220]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006552:	ed97 6a03 	vldr	s12, [r7, #12]
 8006556:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800655a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800655e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006572:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006574:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	0a5b      	lsrs	r3, r3, #9
 800657a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800658e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659a:	ee17 2a90 	vmov	r2, s15
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80065a2:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	0c1b      	lsrs	r3, r3, #16
 80065a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c8:	ee17 2a90 	vmov	r2, s15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80065d0:	4b13      	ldr	r3, [pc, #76]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f6:	ee17 2a90 	vmov	r2, s15
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065fe:	e008      	b.n	8006612 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
}
 8006612:	bf00      	nop
 8006614:	3724      	adds	r7, #36	; 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
 8006624:	03d09000 	.word	0x03d09000
 8006628:	46000000 	.word	0x46000000
 800662c:	4c742400 	.word	0x4c742400
 8006630:	4a742400 	.word	0x4a742400
 8006634:	4bb71b00 	.word	0x4bb71b00

08006638 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	; 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006640:	4ba0      	ldr	r3, [pc, #640]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800664a:	4b9e      	ldr	r3, [pc, #632]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	091b      	lsrs	r3, r3, #4
 8006650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006654:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006656:	4b9b      	ldr	r3, [pc, #620]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006660:	4b98      	ldr	r3, [pc, #608]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	08db      	lsrs	r3, r3, #3
 8006666:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006678:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 8111 	beq.w	80068a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b02      	cmp	r3, #2
 8006688:	f000 8083 	beq.w	8006792 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	2b02      	cmp	r3, #2
 8006690:	f200 80a1 	bhi.w	80067d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d056      	beq.n	800674e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80066a0:	e099      	b.n	80067d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a2:	4b88      	ldr	r3, [pc, #544]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d02d      	beq.n	800670a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066ae:	4b85      	ldr	r3, [pc, #532]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	08db      	lsrs	r3, r3, #3
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	4a83      	ldr	r2, [pc, #524]	; (80068c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d8:	4b7a      	ldr	r3, [pc, #488]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e0:	ee07 3a90 	vmov	s15, r3
 80066e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 80068cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006704:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006708:	e087      	b.n	800681a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006714:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80068d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671c:	4b69      	ldr	r3, [pc, #420]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006730:	eddf 5a66 	vldr	s11, [pc, #408]	; 80068cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006734:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006748:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800674c:	e065      	b.n	800681a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006758:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80068d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800675c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006760:	4b58      	ldr	r3, [pc, #352]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006770:	ed97 6a03 	vldr	s12, [r7, #12]
 8006774:	eddf 5a55 	vldr	s11, [pc, #340]	; 80068cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006790:	e043      	b.n	800681a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80068d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80067a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a4:	4b47      	ldr	r3, [pc, #284]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80067b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80068cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067d4:	e021      	b.n	800681a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80068d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80067e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e8:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80067fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80068cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006814:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006818:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800681a:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	0a5b      	lsrs	r3, r3, #9
 8006820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006834:	edd7 6a07 	vldr	s13, [r7, #28]
 8006838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006840:	ee17 2a90 	vmov	r2, s15
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	0c1b      	lsrs	r3, r3, #16
 800684e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800685e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006862:	edd7 6a07 	vldr	s13, [r7, #28]
 8006866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800686e:	ee17 2a90 	vmov	r2, s15
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006876:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	0e1b      	lsrs	r3, r3, #24
 800687c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800688c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006890:	edd7 6a07 	vldr	s13, [r7, #28]
 8006894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800689c:	ee17 2a90 	vmov	r2, s15
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80068a4:	e008      	b.n	80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	bf00      	nop
 80068ba:	3724      	adds	r7, #36	; 0x24
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	58024400 	.word	0x58024400
 80068c8:	03d09000 	.word	0x03d09000
 80068cc:	46000000 	.word	0x46000000
 80068d0:	4c742400 	.word	0x4c742400
 80068d4:	4a742400 	.word	0x4a742400
 80068d8:	4bb71b00 	.word	0x4bb71b00

080068dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068ea:	4b53      	ldr	r3, [pc, #332]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d101      	bne.n	80068fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e099      	b.n	8006a2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068fa:	4b4f      	ldr	r3, [pc, #316]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a4e      	ldr	r2, [pc, #312]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 8006900:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006906:	f7fb f9bb 	bl	8001c80 <HAL_GetTick>
 800690a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800690c:	e008      	b.n	8006920 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800690e:	f7fb f9b7 	bl	8001c80 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e086      	b.n	8006a2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006920:	4b45      	ldr	r3, [pc, #276]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1f0      	bne.n	800690e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800692c:	4b42      	ldr	r3, [pc, #264]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 800692e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006930:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	031b      	lsls	r3, r3, #12
 800693a:	493f      	ldr	r1, [pc, #252]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 800693c:	4313      	orrs	r3, r2
 800693e:	628b      	str	r3, [r1, #40]	; 0x28
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	3b01      	subs	r3, #1
 8006946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	3b01      	subs	r3, #1
 8006950:	025b      	lsls	r3, r3, #9
 8006952:	b29b      	uxth	r3, r3
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	3b01      	subs	r3, #1
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	3b01      	subs	r3, #1
 800696a:	061b      	lsls	r3, r3, #24
 800696c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006970:	4931      	ldr	r1, [pc, #196]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006976:	4b30      	ldr	r3, [pc, #192]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	492d      	ldr	r1, [pc, #180]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 8006984:	4313      	orrs	r3, r2
 8006986:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006988:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	f023 0220 	bic.w	r2, r3, #32
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	4928      	ldr	r1, [pc, #160]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 8006996:	4313      	orrs	r3, r2
 8006998:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800699a:	4b27      	ldr	r3, [pc, #156]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069a0:	f023 0310 	bic.w	r3, r3, #16
 80069a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069a6:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069aa:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <RCCEx_PLL2_Config+0x160>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	69d2      	ldr	r2, [r2, #28]
 80069b2:	00d2      	lsls	r2, r2, #3
 80069b4:	4920      	ldr	r1, [pc, #128]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069ba:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069c0:	f043 0310 	orr.w	r3, r3, #16
 80069c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069cc:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069d8:	e00f      	b.n	80069fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d106      	bne.n	80069ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069e0:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069ec:	e005      	b.n	80069fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80069ee:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	4a11      	ldr	r2, [pc, #68]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069fa:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a0e      	ldr	r2, [pc, #56]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 8006a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a06:	f7fb f93b 	bl	8001c80 <HAL_GetTick>
 8006a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a0c:	e008      	b.n	8006a20 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a0e:	f7fb f937 	bl	8001c80 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e006      	b.n	8006a2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <RCCEx_PLL2_Config+0x15c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	58024400 	.word	0x58024400
 8006a3c:	ffff0007 	.word	0xffff0007

08006a40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a4e:	4b53      	ldr	r3, [pc, #332]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d101      	bne.n	8006a5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e099      	b.n	8006b92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a5e:	4b4f      	ldr	r3, [pc, #316]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a4e      	ldr	r2, [pc, #312]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6a:	f7fb f909 	bl	8001c80 <HAL_GetTick>
 8006a6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a70:	e008      	b.n	8006a84 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a72:	f7fb f905 	bl	8001c80 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e086      	b.n	8006b92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a84:	4b45      	ldr	r3, [pc, #276]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f0      	bne.n	8006a72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a90:	4b42      	ldr	r3, [pc, #264]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	051b      	lsls	r3, r3, #20
 8006a9e:	493f      	ldr	r1, [pc, #252]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	628b      	str	r3, [r1, #40]	; 0x28
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	025b      	lsls	r3, r3, #9
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	061b      	lsls	r3, r3, #24
 8006ad0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ad4:	4931      	ldr	r1, [pc, #196]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ada:	4b30      	ldr	r3, [pc, #192]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	492d      	ldr	r1, [pc, #180]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006aec:	4b2b      	ldr	r3, [pc, #172]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	4928      	ldr	r1, [pc, #160]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006afe:	4b27      	ldr	r3, [pc, #156]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b0a:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0e:	4b24      	ldr	r3, [pc, #144]	; (8006ba0 <RCCEx_PLL3_Config+0x160>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	69d2      	ldr	r2, [r2, #28]
 8006b16:	00d2      	lsls	r2, r2, #3
 8006b18:	4920      	ldr	r1, [pc, #128]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	4a19      	ldr	r2, [pc, #100]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b3c:	e00f      	b.n	8006b5e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d106      	bne.n	8006b52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b44:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	4a14      	ldr	r2, [pc, #80]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b50:	e005      	b.n	8006b5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	4a11      	ldr	r2, [pc, #68]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a0e      	ldr	r2, [pc, #56]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b6a:	f7fb f889 	bl	8001c80 <HAL_GetTick>
 8006b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b70:	e008      	b.n	8006b84 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b72:	f7fb f885 	bl	8001c80 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e006      	b.n	8006b92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <RCCEx_PLL3_Config+0x15c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0f0      	beq.n	8006b72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	ffff0007 	.word	0xffff0007

08006ba4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d06a      	beq.n	8006c8c <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fa fc98 	bl	8001500 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	22ca      	movs	r2, #202	; 0xca
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2253      	movs	r2, #83	; 0x53
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f87d 	bl	8006ce8 <RTC_EnterInitMode>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d13e      	bne.n	8006c76 <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6999      	ldr	r1, [r3, #24]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <HAL_RTC_Init+0xf4>)
 8006c04:	400b      	ands	r3, r1
 8006c06:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6999      	ldr	r1, [r3, #24]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	0419      	lsls	r1, r3, #16
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f88b 	bl	8006d54 <RTC_ExitInitMode>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d116      	bne.n	8006c76 <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006c56:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6999      	ldr	r1, [r3, #24]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1a      	ldr	r2, [r3, #32]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	22ff      	movs	r2, #255	; 0xff
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	fb8fffbf 	.word	0xfb8fffbf

08006c9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006cb2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8006cb4:	f7fa ffe4 	bl	8001c80 <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006cba:	e009      	b.n	8006cd0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006cbc:	f7fa ffe0 	bl	8001c80 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cca:	d901      	bls.n	8006cd0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e007      	b.n	8006ce0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0ee      	beq.n	8006cbc <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d123      	bne.n	8006d4a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d10:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006d12:	f7fa ffb5 	bl	8001c80 <HAL_GetTick>
 8006d16:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006d18:	e00d      	b.n	8006d36 <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006d1a:	f7fa ffb1 	bl	8001c80 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d28:	d905      	bls.n	8006d36 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2203      	movs	r2, #3
 8006d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <RTC_EnterInitMode+0x62>
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d1e7      	bne.n	8006d1a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006d60:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <RTC_ExitInitMode+0x78>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <RTC_ExitInitMode+0x78>)
 8006d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d6a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006d6c:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <RTC_ExitInitMode+0x78>)
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10c      	bne.n	8006d92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ff8f 	bl	8006c9c <HAL_RTC_WaitForSynchro>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01e      	beq.n	8006dc2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2203      	movs	r2, #3
 8006d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	73fb      	strb	r3, [r7, #15]
 8006d90:	e017      	b.n	8006dc2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d92:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <RTC_ExitInitMode+0x78>)
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	4a0d      	ldr	r2, [pc, #52]	; (8006dcc <RTC_ExitInitMode+0x78>)
 8006d98:	f023 0320 	bic.w	r3, r3, #32
 8006d9c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff ff7c 	bl	8006c9c <HAL_RTC_WaitForSynchro>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2203      	movs	r2, #3
 8006dae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <RTC_ExitInitMode+0x78>)
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	4a04      	ldr	r2, [pc, #16]	; (8006dcc <RTC_ExitInitMode+0x78>)
 8006dbc:	f043 0320 	orr.w	r3, r3, #32
 8006dc0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	58004000 	.word	0x58004000

08006dd0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e075      	b.n	8006ece <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d105      	bne.n	8006dfa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fa fbd7 	bl	80015a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f868 	bl	8006ed8 <HAL_SD_InitCard>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e05d      	b.n	8006ece <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006e12:	f107 0308 	add.w	r3, r7, #8
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa97 	bl	800734c <HAL_SD_GetCardStatus>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e052      	b.n	8006ece <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006e28:	7e3b      	ldrb	r3, [r7, #24]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006e2e:	7e7b      	ldrb	r3, [r7, #25]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d10a      	bne.n	8006e52 <HAL_SD_Init+0x82>
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <HAL_SD_Init+0x78>
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4e:	659a      	str	r2, [r3, #88]	; 0x58
 8006e50:	e00b      	b.n	8006e6a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d104      	bne.n	8006e64 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e60:	659a      	str	r2, [r3, #88]	; 0x58
 8006e62:	e002      	b.n	8006e6a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb29 	bl	80074c8 <HAL_SD_ConfigWideBusOperation>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e026      	b.n	8006ece <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006e80:	f7fa fefe 	bl	8001c80 <HAL_GetTick>
 8006e84:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006e86:	e011      	b.n	8006eac <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e88:	f7fa fefa 	bl	8001c80 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e96:	d109      	bne.n	8006eac <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e9e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e010      	b.n	8006ece <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fc1d 	bl	80076ec <HAL_SD_GetCardState>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d1e7      	bne.n	8006e88 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b08d      	sub	sp, #52	; 0x34
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006ef4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006ef8:	f7fe fcb2 	bl	8005860 <HAL_RCCEx_GetPeriphCLKFreq>
 8006efc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e06a      	b.n	8006fee <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	4a36      	ldr	r2, [pc, #216]	; (8006ff8 <HAL_SD_InitCard+0x120>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	091b      	lsrs	r3, r3, #4
 8006f24:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681c      	ldr	r4, [r3, #0]
 8006f2a:	466a      	mov	r2, sp
 8006f2c:	f107 0318 	add.w	r3, r7, #24
 8006f30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f34:	e882 0003 	stmia.w	r2, {r0, r1}
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f002 fb46 	bl	80095d0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f002 fb78 	bl	800963e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006f5a:	4a28      	ldr	r2, [pc, #160]	; (8006ffc <HAL_SD_InitCard+0x124>)
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f62:	3301      	adds	r3, #1
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fa fe97 	bl	8001c98 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fcac 	bl	80078c8 <SD_PowerON>
 8006f70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e02e      	b.n	8006fee <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fbcb 	bl	800772c <SD_InitCard>
 8006f96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e01b      	b.n	8006fee <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 fbd2 	bl	8009768 <SDMMC_CmdBlockLength>
 8006fc4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00f      	beq.n	8006fec <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	; (8007000 <HAL_SD_InitCard+0x128>)
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	372c      	adds	r7, #44	; 0x2c
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd90      	pop	{r4, r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	014f8b59 	.word	0x014f8b59
 8006ffc:	00012110 	.word	0x00012110
 8007000:	1fe00fff 	.word	0x1fe00fff

08007004 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007012:	0f9b      	lsrs	r3, r3, #30
 8007014:	b2da      	uxtb	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701e:	0e9b      	lsrs	r3, r3, #26
 8007020:	b2db      	uxtb	r3, r3
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	b2da      	uxtb	r2, r3
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007030:	0e1b      	lsrs	r3, r3, #24
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	b2da      	uxtb	r2, r3
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	b2da      	uxtb	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b2da      	uxtb	r2, r3
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705a:	b2da      	uxtb	r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007064:	0d1b      	lsrs	r3, r3, #20
 8007066:	b29a      	uxth	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007070:	0c1b      	lsrs	r3, r3, #16
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	b2da      	uxtb	r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007082:	0bdb      	lsrs	r3, r3, #15
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007094:	0b9b      	lsrs	r3, r3, #14
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a6:	0b5b      	lsrs	r3, r3, #13
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b8:	0b1b      	lsrs	r3, r3, #12
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2200      	movs	r2, #0
 80070ca:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d163      	bne.n	800719c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d8:	009a      	lsls	r2, r3, #2
 80070da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070de:	4013      	ands	r3, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80070e4:	0f92      	lsrs	r2, r2, #30
 80070e6:	431a      	orrs	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f0:	0edb      	lsrs	r3, r3, #27
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007102:	0e1b      	lsrs	r3, r3, #24
 8007104:	b2db      	uxtb	r3, r3
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	b2da      	uxtb	r2, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007114:	0d5b      	lsrs	r3, r3, #21
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	b2da      	uxtb	r2, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007126:	0c9b      	lsrs	r3, r3, #18
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	b2da      	uxtb	r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007138:	0bdb      	lsrs	r3, r3, #15
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	b2da      	uxtb	r2, r3
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	7e1b      	ldrb	r3, [r3, #24]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	3302      	adds	r3, #2
 800715c:	2201      	movs	r2, #1
 800715e:	fa02 f303 	lsl.w	r3, r2, r3
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007166:	fb03 f202 	mul.w	r2, r3, r2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	7a1b      	ldrb	r3, [r3, #8]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	2201      	movs	r2, #1
 800717a:	409a      	lsls	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007188:	0a52      	lsrs	r2, r2, #9
 800718a:	fb03 f202 	mul.w	r2, r3, r2
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007198:	655a      	str	r2, [r3, #84]	; 0x54
 800719a:	e031      	b.n	8007200 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d11d      	bne.n	80071e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b2:	0c1b      	lsrs	r3, r3, #16
 80071b4:	431a      	orrs	r2, r3
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	3301      	adds	r3, #1
 80071c0:	029a      	lsls	r2, r3, #10
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	655a      	str	r2, [r3, #84]	; 0x54
 80071de:	e00f      	b.n	8007200 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a58      	ldr	r2, [pc, #352]	; (8007348 <HAL_SD_GetCardCSD+0x344>)
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e09d      	b.n	800733c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007204:	0b9b      	lsrs	r3, r3, #14
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	b2da      	uxtb	r2, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007216:	09db      	lsrs	r3, r3, #7
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722e:	b2da      	uxtb	r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007238:	0fdb      	lsrs	r3, r3, #31
 800723a:	b2da      	uxtb	r2, r3
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007244:	0f5b      	lsrs	r3, r3, #29
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	b2da      	uxtb	r2, r3
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007256:	0e9b      	lsrs	r3, r3, #26
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	b2da      	uxtb	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007268:	0d9b      	lsrs	r3, r3, #22
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 030f 	and.w	r3, r3, #15
 8007270:	b2da      	uxtb	r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800727a:	0d5b      	lsrs	r3, r3, #21
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	b2da      	uxtb	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007296:	0c1b      	lsrs	r3, r3, #16
 8007298:	b2db      	uxtb	r3, r3
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072aa:	0bdb      	lsrs	r3, r3, #15
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072be:	0b9b      	lsrs	r3, r3, #14
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d2:	0b5b      	lsrs	r3, r3, #13
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072e6:	0b1b      	lsrs	r3, r3, #12
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072fa:	0a9b      	lsrs	r3, r3, #10
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	b2da      	uxtb	r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	b2da      	uxtb	r2, r3
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732a:	b2da      	uxtb	r2, r3
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	1fe00fff 	.word	0x1fe00fff

0800734c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b094      	sub	sp, #80	; 0x50
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b03      	cmp	r3, #3
 8007366:	d101      	bne.n	800736c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e0a7      	b.n	80074bc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800736c:	f107 0308 	add.w	r3, r7, #8
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fb36 	bl	80079e4 <SD_SendSDStatus>
 8007378:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800737a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800737c:	2b00      	cmp	r3, #0
 800737e:	d011      	beq.n	80073a4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a4f      	ldr	r2, [pc, #316]	; (80074c4 <HAL_SD_GetCardStatus+0x178>)
 8007386:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800738c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80073a2:	e070      	b.n	8007486 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	0e1b      	lsrs	r3, r3, #24
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	4313      	orrs	r3, r2
 80073d8:	b29a      	uxth	r2, r3
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	061a      	lsls	r2, r3, #24
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073ea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80073f4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	0e1b      	lsrs	r3, r3, #24
 80073fa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	b2da      	uxtb	r2, r3
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	0a1b      	lsrs	r3, r3, #8
 800740c:	b2da      	uxtb	r2, r3
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	0d1b      	lsrs	r3, r3, #20
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	b2da      	uxtb	r2, r3
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	b29b      	uxth	r3, r3
 8007428:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800742c:	b29a      	uxth	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	b29b      	uxth	r3, r3
 8007432:	b2db      	uxtb	r3, r3
 8007434:	b29b      	uxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	0a9b      	lsrs	r3, r3, #10
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007448:	b2da      	uxtb	r2, r3
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	0a1b      	lsrs	r3, r3, #8
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	b2da      	uxtb	r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	091b      	lsrs	r3, r3, #4
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	b2da      	uxtb	r2, r3
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	b2da      	uxtb	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	0e1b      	lsrs	r3, r3, #24
 8007480:	b2da      	uxtb	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800748e:	4618      	mov	r0, r3
 8007490:	f002 f96a 	bl	8009768 <SDMMC_CmdBlockLength>
 8007494:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00d      	beq.n	80074b8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a08      	ldr	r2, [pc, #32]	; (80074c4 <HAL_SD_GetCardStatus+0x178>)
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80074b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3750      	adds	r7, #80	; 0x50
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	1fe00fff 	.word	0x1fe00fff

080074c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b08d      	sub	sp, #52	; 0x34
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2203      	movs	r2, #3
 80074e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d02e      	beq.n	800754a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f2:	d106      	bne.n	8007502 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	635a      	str	r2, [r3, #52]	; 0x34
 8007500:	e029      	b.n	8007556 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007508:	d10a      	bne.n	8007520 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fb62 	bl	8007bd4 <SD_WideBus_Enable>
 8007510:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	635a      	str	r2, [r3, #52]	; 0x34
 800751e:	e01a      	b.n	8007556 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fb9f 	bl	8007c6a <SD_WideBus_Disable>
 800752c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	635a      	str	r2, [r3, #52]	; 0x34
 800753a:	e00c      	b.n	8007556 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007540:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	635a      	str	r2, [r3, #52]	; 0x34
 8007548:	e005      	b.n	8007556 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a5e      	ldr	r2, [pc, #376]	; (80076dc <HAL_SD_ConfigWideBusOperation+0x214>)
 8007564:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800756c:	e094      	b.n	8007698 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800756e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007572:	f7fe f975 	bl	8005860 <HAL_RCCEx_GetPeriphCLKFreq>
 8007576:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8083 	beq.w	8007686 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	4950      	ldr	r1, [pc, #320]	; (80076e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800759e:	fba1 1303 	umull	r1, r3, r1, r3
 80075a2:	0e1b      	lsrs	r3, r3, #24
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d303      	bcc.n	80075b0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e05a      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b8:	d103      	bne.n	80075c2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	e051      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ca:	d126      	bne.n	800761a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10e      	bne.n	80075f2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	4a43      	ldr	r2, [pc, #268]	; (80076e4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d906      	bls.n	80075ea <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	4a40      	ldr	r2, [pc, #256]	; (80076e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80075e0:	fba2 2303 	umull	r2, r3, r2, r3
 80075e4:	0e5b      	lsrs	r3, r3, #25
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	e03d      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	61bb      	str	r3, [r7, #24]
 80075f0:	e039      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	6a3a      	ldr	r2, [r7, #32]
 80075fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fe:	4a39      	ldr	r2, [pc, #228]	; (80076e4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d906      	bls.n	8007612 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	4a36      	ldr	r2, [pc, #216]	; (80076e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	0e5b      	lsrs	r3, r3, #25
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	e029      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e025      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10e      	bne.n	8007640 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	4a30      	ldr	r2, [pc, #192]	; (80076e8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d906      	bls.n	8007638 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	4a2c      	ldr	r2, [pc, #176]	; (80076e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800762e:	fba2 2303 	umull	r2, r3, r2, r3
 8007632:	0e1b      	lsrs	r3, r3, #24
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	e016      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	e012      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	6a3a      	ldr	r2, [r7, #32]
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	4a26      	ldr	r2, [pc, #152]	; (80076e8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d906      	bls.n	8007660 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	4a22      	ldr	r2, [pc, #136]	; (80076e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007656:	fba2 2303 	umull	r2, r3, r2, r3
 800765a:	0e1b      	lsrs	r3, r3, #24
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	e002      	b.n	8007666 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681c      	ldr	r4, [r3, #0]
 800766a:	466a      	mov	r2, sp
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007674:	e882 0003 	stmia.w	r2, {r0, r1}
 8007678:	f107 0308 	add.w	r3, r7, #8
 800767c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800767e:	4620      	mov	r0, r4
 8007680:	f001 ffa6 	bl	80095d0 <SDMMC_Init>
 8007684:	e008      	b.n	8007698 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076a0:	4618      	mov	r0, r3
 80076a2:	f002 f861 	bl	8009768 <SDMMC_CmdBlockLength>
 80076a6:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <HAL_SD_ConfigWideBusOperation+0x214>)
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80076d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	372c      	adds	r7, #44	; 0x2c
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd90      	pop	{r4, r7, pc}
 80076dc:	1fe00fff 	.word	0x1fe00fff
 80076e0:	55e63b89 	.word	0x55e63b89
 80076e4:	02faf080 	.word	0x02faf080
 80076e8:	017d7840 	.word	0x017d7840

080076ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80076f8:	f107 030c 	add.w	r3, r7, #12
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa40 	bl	8007b84 <SD_SendStatus>
 8007704:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0a5b      	lsrs	r3, r3, #9
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007722:	693b      	ldr	r3, [r7, #16]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b090      	sub	sp, #64	; 0x40
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007738:	f7fa faa2 	bl	8001c80 <HAL_GetTick>
 800773c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f001 ff8c 	bl	8009660 <SDMMC_GetPowerState>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d102      	bne.n	8007754 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800774e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007752:	e0b5      	b.n	80078c0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	2b03      	cmp	r3, #3
 800775a:	d02e      	beq.n	80077ba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f002 f90d 	bl	8009980 <SDMMC_CmdSendCID>
 8007766:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <SD_InitCard+0x46>
    {
      return errorstate;
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	e0a6      	b.n	80078c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2100      	movs	r1, #0
 8007778:	4618      	mov	r0, r3
 800777a:	f001 ffb6 	bl	80096ea <SDMMC_GetResponse>
 800777e:	4602      	mov	r2, r0
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2104      	movs	r1, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f001 ffad 	bl	80096ea <SDMMC_GetResponse>
 8007790:	4602      	mov	r2, r0
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2108      	movs	r1, #8
 800779c:	4618      	mov	r0, r3
 800779e:	f001 ffa4 	bl	80096ea <SDMMC_GetResponse>
 80077a2:	4602      	mov	r2, r0
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	210c      	movs	r1, #12
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 ff9b 	bl	80096ea <SDMMC_GetResponse>
 80077b4:	4602      	mov	r2, r0
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d01d      	beq.n	80077fe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80077c2:	e019      	b.n	80077f8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f107 020a 	add.w	r2, r7, #10
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f002 f915 	bl	80099fe <SDMMC_CmdSetRelAdd>
 80077d4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	e06f      	b.n	80078c0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80077e0:	f7fa fa4e 	bl	8001c80 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d902      	bls.n	80077f8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80077f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077f6:	e063      	b.n	80078c0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80077f8:	897b      	ldrh	r3, [r7, #10]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0e2      	beq.n	80077c4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	2b03      	cmp	r3, #3
 8007804:	d036      	beq.n	8007874 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007806:	897b      	ldrh	r3, [r7, #10]
 8007808:	461a      	mov	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007816:	041b      	lsls	r3, r3, #16
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f002 f8cf 	bl	80099be <SDMMC_CmdSendCSD>
 8007820:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <SD_InitCard+0x100>
    {
      return errorstate;
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	e049      	b.n	80078c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f001 ff59 	bl	80096ea <SDMMC_GetResponse>
 8007838:	4602      	mov	r2, r0
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2104      	movs	r1, #4
 8007844:	4618      	mov	r0, r3
 8007846:	f001 ff50 	bl	80096ea <SDMMC_GetResponse>
 800784a:	4602      	mov	r2, r0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2108      	movs	r1, #8
 8007856:	4618      	mov	r0, r3
 8007858:	f001 ff47 	bl	80096ea <SDMMC_GetResponse>
 800785c:	4602      	mov	r2, r0
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	210c      	movs	r1, #12
 8007868:	4618      	mov	r0, r3
 800786a:	f001 ff3e 	bl	80096ea <SDMMC_GetResponse>
 800786e:	4602      	mov	r2, r0
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2104      	movs	r1, #4
 800787a:	4618      	mov	r0, r3
 800787c:	f001 ff35 	bl	80096ea <SDMMC_GetResponse>
 8007880:	4603      	mov	r3, r0
 8007882:	0d1a      	lsrs	r2, r3, #20
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007888:	f107 030c 	add.w	r3, r7, #12
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff fbb8 	bl	8007004 <HAL_SD_GetCardCSD>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800789a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800789e:	e00f      	b.n	80078c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a8:	041b      	lsls	r3, r3, #16
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f001 ff7e 	bl	80097ae <SDMMC_CmdSelDesel>
 80078b2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <SD_InitCard+0x192>
  {
    return errorstate;
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	e000      	b.n	80078c0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3740      	adds	r7, #64	; 0x40
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 ff87 	bl	80097f4 <SDMMC_CmdGoIdleState>
 80078e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	e072      	b.n	80079d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f001 ff9a 	bl	8009830 <SDMMC_CmdOperCond>
 80078fc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007904:	d10d      	bne.n	8007922 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4618      	mov	r0, r3
 8007912:	f001 ff6f 	bl	80097f4 <SDMMC_CmdGoIdleState>
 8007916:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <SD_PowerON+0x60>
    {
      return errorstate;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	e05a      	b.n	80079d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d137      	bne.n	80079a0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f001 ff9a 	bl	8009870 <SDMMC_CmdAppCommand>
 800793c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d02d      	beq.n	80079a0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007944:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007948:	e046      	b.n	80079d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2100      	movs	r1, #0
 8007950:	4618      	mov	r0, r3
 8007952:	f001 ff8d 	bl	8009870 <SDMMC_CmdAppCommand>
 8007956:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <SD_PowerON+0x9a>
    {
      return errorstate;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	e03a      	b.n	80079d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	491e      	ldr	r1, [pc, #120]	; (80079e0 <SD_PowerON+0x118>)
 8007968:	4618      	mov	r0, r3
 800796a:	f001 ffa4 	bl	80098b6 <SDMMC_CmdAppOperCommand>
 800796e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800797a:	e02d      	b.n	80079d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2100      	movs	r1, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f001 feb1 	bl	80096ea <SDMMC_GetResponse>
 8007988:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	0fdb      	lsrs	r3, r3, #31
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <SD_PowerON+0xce>
 8007992:	2301      	movs	r3, #1
 8007994:	e000      	b.n	8007998 <SD_PowerON+0xd0>
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]

    count++;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	3301      	adds	r3, #1
 800799e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d802      	bhi.n	80079b0 <SD_PowerON+0xe8>
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0cc      	beq.n	800794a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d902      	bls.n	80079c0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80079ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079be:	e00b      	b.n	80079d8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	c1100000 	.word	0xc1100000

080079e4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08c      	sub	sp, #48	; 0x30
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079ee:	f7fa f947 	bl	8001c80 <HAL_GetTick>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f001 fe73 	bl	80096ea <SDMMC_GetResponse>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a0e:	d102      	bne.n	8007a16 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a14:	e0b0      	b.n	8007b78 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2140      	movs	r1, #64	; 0x40
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 fea3 	bl	8009768 <SDMMC_CmdBlockLength>
 8007a22:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	e0a0      	b.n	8007b78 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3e:	041b      	lsls	r3, r3, #16
 8007a40:	4619      	mov	r1, r3
 8007a42:	4610      	mov	r0, r2
 8007a44:	f001 ff14 	bl	8009870 <SDMMC_CmdAppCommand>
 8007a48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	e08d      	b.n	8007b78 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a60:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007a62:	2340      	movs	r3, #64	; 0x40
 8007a64:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007a66:	2360      	movs	r3, #96	; 0x60
 8007a68:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a72:	2301      	movs	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 fe45 	bl	8009710 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fffc 	bl	8009a88 <SDMMC_CmdStatusRegister>
 8007a90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02b      	beq.n	8007af0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	e069      	b.n	8007b78 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d013      	beq.n	8007ada <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab6:	e00d      	b.n	8007ad4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 fdb1 	bl	8009624 <SDMMC_ReadFIFO>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	601a      	str	r2, [r3, #0]
        pData++;
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	3304      	adds	r3, #4
 8007acc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	2b07      	cmp	r3, #7
 8007ad8:	d9ee      	bls.n	8007ab8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ada:	f7fa f8d1 	bl	8001c80 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ae8:	d102      	bne.n	8007af0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007aea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007aee:	e043      	b.n	8007b78 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0d2      	beq.n	8007aa4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	e033      	b.n	8007b78 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e02a      	b.n	8007b78 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d017      	beq.n	8007b60 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007b30:	2320      	movs	r3, #32
 8007b32:	e021      	b.n	8007b78 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 fd73 	bl	8009624 <SDMMC_ReadFIFO>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	601a      	str	r2, [r3, #0]
    pData++;
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	3304      	adds	r3, #4
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b4a:	f7fa f899 	bl	8001c80 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b58:	d102      	bne.n	8007b60 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007b5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b5e:	e00b      	b.n	8007b78 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e2      	bne.n	8007b34 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a03      	ldr	r2, [pc, #12]	; (8007b80 <SD_SendSDStatus+0x19c>)
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3730      	adds	r7, #48	; 0x30
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	18000f3a 	.word	0x18000f3a

08007b84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d102      	bne.n	8007b9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b98:	e018      	b.n	8007bcc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f001 ff4b 	bl	8009a42 <SDMMC_CmdSendStatus>
 8007bac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	e009      	b.n	8007bcc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 fd93 	bl	80096ea <SDMMC_GetResponse>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2100      	movs	r1, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 fd7d 	bl	80096ea <SDMMC_GetResponse>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bfa:	d102      	bne.n	8007c02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c00:	e02f      	b.n	8007c62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c02:	f107 030c 	add.w	r3, r7, #12
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f879 	bl	8007d00 <SD_FindSCR>
 8007c0e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	e023      	b.n	8007c62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01c      	beq.n	8007c5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2c:	041b      	lsls	r3, r3, #16
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4610      	mov	r0, r2
 8007c32:	f001 fe1d 	bl	8009870 <SDMMC_CmdAppCommand>
 8007c36:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	e00f      	b.n	8007c62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2102      	movs	r1, #2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f001 fe54 	bl	80098f6 <SDMMC_CmdBusWidth>
 8007c4e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	e003      	b.n	8007c62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e001      	b.n	8007c62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	2300      	movs	r3, #0
 8007c78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f001 fd32 	bl	80096ea <SDMMC_GetResponse>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c90:	d102      	bne.n	8007c98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c96:	e02f      	b.n	8007cf8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f82e 	bl	8007d00 <SD_FindSCR>
 8007ca4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	e023      	b.n	8007cf8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01c      	beq.n	8007cf4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc2:	041b      	lsls	r3, r3, #16
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f001 fdd2 	bl	8009870 <SDMMC_CmdAppCommand>
 8007ccc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	e00f      	b.n	8007cf8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fe09 	bl	80098f6 <SDMMC_CmdBusWidth>
 8007ce4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	e003      	b.n	8007cf8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e001      	b.n	8007cf8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007cf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08e      	sub	sp, #56	; 0x38
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d0a:	f7f9 ffb9 	bl	8001c80 <HAL_GetTick>
 8007d0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007d14:	2300      	movs	r3, #0
 8007d16:	60bb      	str	r3, [r7, #8]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2108      	movs	r1, #8
 8007d26:	4618      	mov	r0, r3
 8007d28:	f001 fd1e 	bl	8009768 <SDMMC_CmdBlockLength>
 8007d2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	e0ad      	b.n	8007e94 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d40:	041b      	lsls	r3, r3, #16
 8007d42:	4619      	mov	r1, r3
 8007d44:	4610      	mov	r0, r2
 8007d46:	f001 fd93 	bl	8009870 <SDMMC_CmdAppCommand>
 8007d4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	e09e      	b.n	8007e94 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007d5c:	2308      	movs	r3, #8
 8007d5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007d60:	2330      	movs	r3, #48	; 0x30
 8007d62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d64:	2302      	movs	r3, #2
 8007d66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f107 0210 	add.w	r2, r7, #16
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fcc8 	bl	8009710 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fdd9 	bl	800993c <SDMMC_CmdSendSCR>
 8007d8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d027      	beq.n	8007de2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	e07e      	b.n	8007e94 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d113      	bne.n	8007dcc <SD_FindSCR+0xcc>
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d110      	bne.n	8007dcc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 fc38 	bl	8009624 <SDMMC_ReadFIFO>
 8007db4:	4603      	mov	r3, r0
 8007db6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 fc31 	bl	8009624 <SDMMC_ReadFIFO>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	60fb      	str	r3, [r7, #12]
      index++;
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	3301      	adds	r3, #1
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dcc:	f7f9 ff58 	bl	8001c80 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dda:	d102      	bne.n	8007de2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007de0:	e058      	b.n	8007e94 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de8:	f240 532a 	movw	r3, #1322	; 0x52a
 8007dec:	4013      	ands	r3, r2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0d1      	beq.n	8007d96 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2208      	movs	r2, #8
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e08:	2308      	movs	r3, #8
 8007e0a:	e043      	b.n	8007e94 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e22:	2302      	movs	r3, #2
 8007e24:	e036      	b.n	8007e94 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007e3c:	2320      	movs	r3, #32
 8007e3e:	e029      	b.n	8007e94 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a15      	ldr	r2, [pc, #84]	; (8007e9c <SD_FindSCR+0x19c>)
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	061a      	lsls	r2, r3, #24
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	0a1b      	lsrs	r3, r3, #8
 8007e5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007e5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	0e1b      	lsrs	r3, r3, #24
 8007e64:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	601a      	str	r2, [r3, #0]
    scr++;
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	061a      	lsls	r2, r3, #24
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	0a1b      	lsrs	r3, r3, #8
 8007e82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007e86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	0e1b      	lsrs	r3, r3, #24
 8007e8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3738      	adds	r7, #56	; 0x38
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	18000f3a 	.word	0x18000f3a

08007ea0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e02b      	b.n	8007f0c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7f8 fc61 	bl	8000790 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f001 faaf 	bl	8009444 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	f001 fb03 	bl	80094fc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007ef6:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <HAL_SDRAM_Init+0x74>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a06      	ldr	r2, [pc, #24]	; (8007f14 <HAL_SDRAM_Init+0x74>)
 8007efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f00:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	52004000 	.word	0x52004000

08007f18 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e0f1      	b.n	800810e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a78      	ldr	r2, [pc, #480]	; (8008118 <HAL_SPI_Init+0x200>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00f      	beq.n	8007f5a <HAL_SPI_Init+0x42>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a77      	ldr	r2, [pc, #476]	; (800811c <HAL_SPI_Init+0x204>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00a      	beq.n	8007f5a <HAL_SPI_Init+0x42>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a75      	ldr	r2, [pc, #468]	; (8008120 <HAL_SPI_Init+0x208>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d005      	beq.n	8007f5a <HAL_SPI_Init+0x42>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	2b0f      	cmp	r3, #15
 8007f54:	d901      	bls.n	8007f5a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e0d9      	b.n	800810e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f8e2 	bl	8008124 <SPI_GetPacketSize>
 8007f60:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a6c      	ldr	r2, [pc, #432]	; (8008118 <HAL_SPI_Init+0x200>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00c      	beq.n	8007f86 <HAL_SPI_Init+0x6e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a6a      	ldr	r2, [pc, #424]	; (800811c <HAL_SPI_Init+0x204>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d007      	beq.n	8007f86 <HAL_SPI_Init+0x6e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a69      	ldr	r2, [pc, #420]	; (8008120 <HAL_SPI_Init+0x208>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d002      	beq.n	8007f86 <HAL_SPI_Init+0x6e>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b08      	cmp	r3, #8
 8007f84:	d811      	bhi.n	8007faa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f8a:	4a63      	ldr	r2, [pc, #396]	; (8008118 <HAL_SPI_Init+0x200>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d009      	beq.n	8007fa4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a61      	ldr	r2, [pc, #388]	; (800811c <HAL_SPI_Init+0x204>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d004      	beq.n	8007fa4 <HAL_SPI_Init+0x8c>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a60      	ldr	r2, [pc, #384]	; (8008120 <HAL_SPI_Init+0x208>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d104      	bne.n	8007fae <HAL_SPI_Init+0x96>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b10      	cmp	r3, #16
 8007fa8:	d901      	bls.n	8007fae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e0af      	b.n	800810e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7f9 fbb2 	bl	800172c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0201 	bic.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007fea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ff4:	d119      	bne.n	800802a <HAL_SPI_Init+0x112>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ffe:	d103      	bne.n	8008008 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008004:	2b00      	cmp	r3, #0
 8008006:	d008      	beq.n	800801a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10c      	bne.n	800802a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008018:	d107      	bne.n	800802a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008028:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69da      	ldr	r2, [r3, #28]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	431a      	orrs	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803c:	ea42 0103 	orr.w	r1, r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	431a      	orrs	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808a:	ea42 0103 	orr.w	r1, r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d113      	bne.n	80080ca <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0201 	bic.w	r2, r2, #1
 80080d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	40013000 	.word	0x40013000
 800811c:	40003800 	.word	0x40003800
 8008120:	40003c00 	.word	0x40003c00

08008124 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008130:	095b      	lsrs	r3, r3, #5
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	3307      	adds	r3, #7
 8008142:	08db      	lsrs	r3, r3, #3
 8008144:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	fb02 f303 	mul.w	r3, r2, r3
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e042      	b.n	80081f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7f9 fc68 	bl	8001a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f82d 	bl	80081fc <UART_SetConfig>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e022      	b.n	80081f2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fe8d 	bl	8008ed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f042 0201 	orr.w	r2, r2, #1
 80081e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 ff14 	bl	8009018 <UART_CheckIdleState>
 80081f0:	4603      	mov	r3, r0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008200:	b092      	sub	sp, #72	; 0x48
 8008202:	af00      	add	r7, sp, #0
 8008204:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	431a      	orrs	r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	431a      	orrs	r2, r3
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	4313      	orrs	r3, r2
 8008222:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4bbe      	ldr	r3, [pc, #760]	; (8008524 <UART_SetConfig+0x328>)
 800822c:	4013      	ands	r3, r2
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008234:	430b      	orrs	r3, r1
 8008236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4ab3      	ldr	r2, [pc, #716]	; (8008528 <UART_SetConfig+0x32c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008264:	4313      	orrs	r3, r2
 8008266:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	4baf      	ldr	r3, [pc, #700]	; (800852c <UART_SetConfig+0x330>)
 8008270:	4013      	ands	r3, r2
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	6812      	ldr	r2, [r2, #0]
 8008276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008278:	430b      	orrs	r3, r1
 800827a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	f023 010f 	bic.w	r1, r3, #15
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4aa6      	ldr	r2, [pc, #664]	; (8008530 <UART_SetConfig+0x334>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d177      	bne.n	800838c <UART_SetConfig+0x190>
 800829c:	4ba5      	ldr	r3, [pc, #660]	; (8008534 <UART_SetConfig+0x338>)
 800829e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082a4:	2b28      	cmp	r3, #40	; 0x28
 80082a6:	d86d      	bhi.n	8008384 <UART_SetConfig+0x188>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <UART_SetConfig+0xb4>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	08008355 	.word	0x08008355
 80082b4:	08008385 	.word	0x08008385
 80082b8:	08008385 	.word	0x08008385
 80082bc:	08008385 	.word	0x08008385
 80082c0:	08008385 	.word	0x08008385
 80082c4:	08008385 	.word	0x08008385
 80082c8:	08008385 	.word	0x08008385
 80082cc:	08008385 	.word	0x08008385
 80082d0:	0800835d 	.word	0x0800835d
 80082d4:	08008385 	.word	0x08008385
 80082d8:	08008385 	.word	0x08008385
 80082dc:	08008385 	.word	0x08008385
 80082e0:	08008385 	.word	0x08008385
 80082e4:	08008385 	.word	0x08008385
 80082e8:	08008385 	.word	0x08008385
 80082ec:	08008385 	.word	0x08008385
 80082f0:	08008365 	.word	0x08008365
 80082f4:	08008385 	.word	0x08008385
 80082f8:	08008385 	.word	0x08008385
 80082fc:	08008385 	.word	0x08008385
 8008300:	08008385 	.word	0x08008385
 8008304:	08008385 	.word	0x08008385
 8008308:	08008385 	.word	0x08008385
 800830c:	08008385 	.word	0x08008385
 8008310:	0800836d 	.word	0x0800836d
 8008314:	08008385 	.word	0x08008385
 8008318:	08008385 	.word	0x08008385
 800831c:	08008385 	.word	0x08008385
 8008320:	08008385 	.word	0x08008385
 8008324:	08008385 	.word	0x08008385
 8008328:	08008385 	.word	0x08008385
 800832c:	08008385 	.word	0x08008385
 8008330:	08008375 	.word	0x08008375
 8008334:	08008385 	.word	0x08008385
 8008338:	08008385 	.word	0x08008385
 800833c:	08008385 	.word	0x08008385
 8008340:	08008385 	.word	0x08008385
 8008344:	08008385 	.word	0x08008385
 8008348:	08008385 	.word	0x08008385
 800834c:	08008385 	.word	0x08008385
 8008350:	0800837d 	.word	0x0800837d
 8008354:	2301      	movs	r3, #1
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835a:	e326      	b.n	80089aa <UART_SetConfig+0x7ae>
 800835c:	2304      	movs	r3, #4
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008362:	e322      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008364:	2308      	movs	r3, #8
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e31e      	b.n	80089aa <UART_SetConfig+0x7ae>
 800836c:	2310      	movs	r3, #16
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008372:	e31a      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008374:	2320      	movs	r3, #32
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837a:	e316      	b.n	80089aa <UART_SetConfig+0x7ae>
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e312      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008384:	2380      	movs	r3, #128	; 0x80
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e30e      	b.n	80089aa <UART_SetConfig+0x7ae>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a69      	ldr	r2, [pc, #420]	; (8008538 <UART_SetConfig+0x33c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d130      	bne.n	80083f8 <UART_SetConfig+0x1fc>
 8008396:	4b67      	ldr	r3, [pc, #412]	; (8008534 <UART_SetConfig+0x338>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d826      	bhi.n	80083f0 <UART_SetConfig+0x1f4>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <UART_SetConfig+0x1ac>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083c1 	.word	0x080083c1
 80083ac:	080083c9 	.word	0x080083c9
 80083b0:	080083d1 	.word	0x080083d1
 80083b4:	080083d9 	.word	0x080083d9
 80083b8:	080083e1 	.word	0x080083e1
 80083bc:	080083e9 	.word	0x080083e9
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c6:	e2f0      	b.n	80089aa <UART_SetConfig+0x7ae>
 80083c8:	2304      	movs	r3, #4
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ce:	e2ec      	b.n	80089aa <UART_SetConfig+0x7ae>
 80083d0:	2308      	movs	r3, #8
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d6:	e2e8      	b.n	80089aa <UART_SetConfig+0x7ae>
 80083d8:	2310      	movs	r3, #16
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083de:	e2e4      	b.n	80089aa <UART_SetConfig+0x7ae>
 80083e0:	2320      	movs	r3, #32
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e6:	e2e0      	b.n	80089aa <UART_SetConfig+0x7ae>
 80083e8:	2340      	movs	r3, #64	; 0x40
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ee:	e2dc      	b.n	80089aa <UART_SetConfig+0x7ae>
 80083f0:	2380      	movs	r3, #128	; 0x80
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f6:	e2d8      	b.n	80089aa <UART_SetConfig+0x7ae>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a4f      	ldr	r2, [pc, #316]	; (800853c <UART_SetConfig+0x340>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d130      	bne.n	8008464 <UART_SetConfig+0x268>
 8008402:	4b4c      	ldr	r3, [pc, #304]	; (8008534 <UART_SetConfig+0x338>)
 8008404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b05      	cmp	r3, #5
 800840c:	d826      	bhi.n	800845c <UART_SetConfig+0x260>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0x218>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	0800842d 	.word	0x0800842d
 8008418:	08008435 	.word	0x08008435
 800841c:	0800843d 	.word	0x0800843d
 8008420:	08008445 	.word	0x08008445
 8008424:	0800844d 	.word	0x0800844d
 8008428:	08008455 	.word	0x08008455
 800842c:	2300      	movs	r3, #0
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008432:	e2ba      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008434:	2304      	movs	r3, #4
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843a:	e2b6      	b.n	80089aa <UART_SetConfig+0x7ae>
 800843c:	2308      	movs	r3, #8
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008442:	e2b2      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008444:	2310      	movs	r3, #16
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844a:	e2ae      	b.n	80089aa <UART_SetConfig+0x7ae>
 800844c:	2320      	movs	r3, #32
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008452:	e2aa      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008454:	2340      	movs	r3, #64	; 0x40
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845a:	e2a6      	b.n	80089aa <UART_SetConfig+0x7ae>
 800845c:	2380      	movs	r3, #128	; 0x80
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008462:	e2a2      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a35      	ldr	r2, [pc, #212]	; (8008540 <UART_SetConfig+0x344>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d130      	bne.n	80084d0 <UART_SetConfig+0x2d4>
 800846e:	4b31      	ldr	r3, [pc, #196]	; (8008534 <UART_SetConfig+0x338>)
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	2b05      	cmp	r3, #5
 8008478:	d826      	bhi.n	80084c8 <UART_SetConfig+0x2cc>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <UART_SetConfig+0x284>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008499 	.word	0x08008499
 8008484:	080084a1 	.word	0x080084a1
 8008488:	080084a9 	.word	0x080084a9
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b9 	.word	0x080084b9
 8008494:	080084c1 	.word	0x080084c1
 8008498:	2300      	movs	r3, #0
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849e:	e284      	b.n	80089aa <UART_SetConfig+0x7ae>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a6:	e280      	b.n	80089aa <UART_SetConfig+0x7ae>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ae:	e27c      	b.n	80089aa <UART_SetConfig+0x7ae>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b6:	e278      	b.n	80089aa <UART_SetConfig+0x7ae>
 80084b8:	2320      	movs	r3, #32
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084be:	e274      	b.n	80089aa <UART_SetConfig+0x7ae>
 80084c0:	2340      	movs	r3, #64	; 0x40
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c6:	e270      	b.n	80089aa <UART_SetConfig+0x7ae>
 80084c8:	2380      	movs	r3, #128	; 0x80
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ce:	e26c      	b.n	80089aa <UART_SetConfig+0x7ae>
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1b      	ldr	r2, [pc, #108]	; (8008544 <UART_SetConfig+0x348>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d142      	bne.n	8008560 <UART_SetConfig+0x364>
 80084da:	4b16      	ldr	r3, [pc, #88]	; (8008534 <UART_SetConfig+0x338>)
 80084dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d838      	bhi.n	8008558 <UART_SetConfig+0x35c>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <UART_SetConfig+0x2f0>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	08008505 	.word	0x08008505
 80084f0:	0800850d 	.word	0x0800850d
 80084f4:	08008515 	.word	0x08008515
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008549 	.word	0x08008549
 8008500:	08008551 	.word	0x08008551
 8008504:	2300      	movs	r3, #0
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e24e      	b.n	80089aa <UART_SetConfig+0x7ae>
 800850c:	2304      	movs	r3, #4
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008512:	e24a      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008514:	2308      	movs	r3, #8
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851a:	e246      	b.n	80089aa <UART_SetConfig+0x7ae>
 800851c:	2310      	movs	r3, #16
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008522:	e242      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008524:	cfff69f3 	.word	0xcfff69f3
 8008528:	58000c00 	.word	0x58000c00
 800852c:	11fff4ff 	.word	0x11fff4ff
 8008530:	40011000 	.word	0x40011000
 8008534:	58024400 	.word	0x58024400
 8008538:	40004400 	.word	0x40004400
 800853c:	40004800 	.word	0x40004800
 8008540:	40004c00 	.word	0x40004c00
 8008544:	40005000 	.word	0x40005000
 8008548:	2320      	movs	r3, #32
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854e:	e22c      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008556:	e228      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008558:	2380      	movs	r3, #128	; 0x80
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855e:	e224      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4ab1      	ldr	r2, [pc, #708]	; (800882c <UART_SetConfig+0x630>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d176      	bne.n	8008658 <UART_SetConfig+0x45c>
 800856a:	4bb1      	ldr	r3, [pc, #708]	; (8008830 <UART_SetConfig+0x634>)
 800856c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008572:	2b28      	cmp	r3, #40	; 0x28
 8008574:	d86c      	bhi.n	8008650 <UART_SetConfig+0x454>
 8008576:	a201      	add	r2, pc, #4	; (adr r2, 800857c <UART_SetConfig+0x380>)
 8008578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857c:	08008621 	.word	0x08008621
 8008580:	08008651 	.word	0x08008651
 8008584:	08008651 	.word	0x08008651
 8008588:	08008651 	.word	0x08008651
 800858c:	08008651 	.word	0x08008651
 8008590:	08008651 	.word	0x08008651
 8008594:	08008651 	.word	0x08008651
 8008598:	08008651 	.word	0x08008651
 800859c:	08008629 	.word	0x08008629
 80085a0:	08008651 	.word	0x08008651
 80085a4:	08008651 	.word	0x08008651
 80085a8:	08008651 	.word	0x08008651
 80085ac:	08008651 	.word	0x08008651
 80085b0:	08008651 	.word	0x08008651
 80085b4:	08008651 	.word	0x08008651
 80085b8:	08008651 	.word	0x08008651
 80085bc:	08008631 	.word	0x08008631
 80085c0:	08008651 	.word	0x08008651
 80085c4:	08008651 	.word	0x08008651
 80085c8:	08008651 	.word	0x08008651
 80085cc:	08008651 	.word	0x08008651
 80085d0:	08008651 	.word	0x08008651
 80085d4:	08008651 	.word	0x08008651
 80085d8:	08008651 	.word	0x08008651
 80085dc:	08008639 	.word	0x08008639
 80085e0:	08008651 	.word	0x08008651
 80085e4:	08008651 	.word	0x08008651
 80085e8:	08008651 	.word	0x08008651
 80085ec:	08008651 	.word	0x08008651
 80085f0:	08008651 	.word	0x08008651
 80085f4:	08008651 	.word	0x08008651
 80085f8:	08008651 	.word	0x08008651
 80085fc:	08008641 	.word	0x08008641
 8008600:	08008651 	.word	0x08008651
 8008604:	08008651 	.word	0x08008651
 8008608:	08008651 	.word	0x08008651
 800860c:	08008651 	.word	0x08008651
 8008610:	08008651 	.word	0x08008651
 8008614:	08008651 	.word	0x08008651
 8008618:	08008651 	.word	0x08008651
 800861c:	08008649 	.word	0x08008649
 8008620:	2301      	movs	r3, #1
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008626:	e1c0      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008628:	2304      	movs	r3, #4
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862e:	e1bc      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008630:	2308      	movs	r3, #8
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008636:	e1b8      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008638:	2310      	movs	r3, #16
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e1b4      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008640:	2320      	movs	r3, #32
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008646:	e1b0      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e1ac      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008650:	2380      	movs	r3, #128	; 0x80
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e1a8      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a75      	ldr	r2, [pc, #468]	; (8008834 <UART_SetConfig+0x638>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d130      	bne.n	80086c4 <UART_SetConfig+0x4c8>
 8008662:	4b73      	ldr	r3, [pc, #460]	; (8008830 <UART_SetConfig+0x634>)
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	2b05      	cmp	r3, #5
 800866c:	d826      	bhi.n	80086bc <UART_SetConfig+0x4c0>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0x478>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	0800868d 	.word	0x0800868d
 8008678:	08008695 	.word	0x08008695
 800867c:	0800869d 	.word	0x0800869d
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086ad 	.word	0x080086ad
 8008688:	080086b5 	.word	0x080086b5
 800868c:	2300      	movs	r3, #0
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e18a      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008694:	2304      	movs	r3, #4
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e186      	b.n	80089aa <UART_SetConfig+0x7ae>
 800869c:	2308      	movs	r3, #8
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e182      	b.n	80089aa <UART_SetConfig+0x7ae>
 80086a4:	2310      	movs	r3, #16
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e17e      	b.n	80089aa <UART_SetConfig+0x7ae>
 80086ac:	2320      	movs	r3, #32
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e17a      	b.n	80089aa <UART_SetConfig+0x7ae>
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e176      	b.n	80089aa <UART_SetConfig+0x7ae>
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e172      	b.n	80089aa <UART_SetConfig+0x7ae>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a5b      	ldr	r2, [pc, #364]	; (8008838 <UART_SetConfig+0x63c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d130      	bne.n	8008730 <UART_SetConfig+0x534>
 80086ce:	4b58      	ldr	r3, [pc, #352]	; (8008830 <UART_SetConfig+0x634>)
 80086d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d826      	bhi.n	8008728 <UART_SetConfig+0x52c>
 80086da:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <UART_SetConfig+0x4e4>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	080086f9 	.word	0x080086f9
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008709 	.word	0x08008709
 80086ec:	08008711 	.word	0x08008711
 80086f0:	08008719 	.word	0x08008719
 80086f4:	08008721 	.word	0x08008721
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fe:	e154      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008706:	e150      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870e:	e14c      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e148      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008718:	2320      	movs	r3, #32
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e144      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e140      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e13c      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a41      	ldr	r2, [pc, #260]	; (800883c <UART_SetConfig+0x640>)
 8008736:	4293      	cmp	r3, r2
 8008738:	f040 8082 	bne.w	8008840 <UART_SetConfig+0x644>
 800873c:	4b3c      	ldr	r3, [pc, #240]	; (8008830 <UART_SetConfig+0x634>)
 800873e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008740:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008744:	2b28      	cmp	r3, #40	; 0x28
 8008746:	d86d      	bhi.n	8008824 <UART_SetConfig+0x628>
 8008748:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <UART_SetConfig+0x554>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	080087f5 	.word	0x080087f5
 8008754:	08008825 	.word	0x08008825
 8008758:	08008825 	.word	0x08008825
 800875c:	08008825 	.word	0x08008825
 8008760:	08008825 	.word	0x08008825
 8008764:	08008825 	.word	0x08008825
 8008768:	08008825 	.word	0x08008825
 800876c:	08008825 	.word	0x08008825
 8008770:	080087fd 	.word	0x080087fd
 8008774:	08008825 	.word	0x08008825
 8008778:	08008825 	.word	0x08008825
 800877c:	08008825 	.word	0x08008825
 8008780:	08008825 	.word	0x08008825
 8008784:	08008825 	.word	0x08008825
 8008788:	08008825 	.word	0x08008825
 800878c:	08008825 	.word	0x08008825
 8008790:	08008805 	.word	0x08008805
 8008794:	08008825 	.word	0x08008825
 8008798:	08008825 	.word	0x08008825
 800879c:	08008825 	.word	0x08008825
 80087a0:	08008825 	.word	0x08008825
 80087a4:	08008825 	.word	0x08008825
 80087a8:	08008825 	.word	0x08008825
 80087ac:	08008825 	.word	0x08008825
 80087b0:	0800880d 	.word	0x0800880d
 80087b4:	08008825 	.word	0x08008825
 80087b8:	08008825 	.word	0x08008825
 80087bc:	08008825 	.word	0x08008825
 80087c0:	08008825 	.word	0x08008825
 80087c4:	08008825 	.word	0x08008825
 80087c8:	08008825 	.word	0x08008825
 80087cc:	08008825 	.word	0x08008825
 80087d0:	08008815 	.word	0x08008815
 80087d4:	08008825 	.word	0x08008825
 80087d8:	08008825 	.word	0x08008825
 80087dc:	08008825 	.word	0x08008825
 80087e0:	08008825 	.word	0x08008825
 80087e4:	08008825 	.word	0x08008825
 80087e8:	08008825 	.word	0x08008825
 80087ec:	08008825 	.word	0x08008825
 80087f0:	0800881d 	.word	0x0800881d
 80087f4:	2301      	movs	r3, #1
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e0d6      	b.n	80089aa <UART_SetConfig+0x7ae>
 80087fc:	2304      	movs	r3, #4
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e0d2      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008804:	2308      	movs	r3, #8
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e0ce      	b.n	80089aa <UART_SetConfig+0x7ae>
 800880c:	2310      	movs	r3, #16
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e0ca      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008814:	2320      	movs	r3, #32
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881a:	e0c6      	b.n	80089aa <UART_SetConfig+0x7ae>
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e0c2      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008824:	2380      	movs	r3, #128	; 0x80
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e0be      	b.n	80089aa <UART_SetConfig+0x7ae>
 800882c:	40011400 	.word	0x40011400
 8008830:	58024400 	.word	0x58024400
 8008834:	40007800 	.word	0x40007800
 8008838:	40007c00 	.word	0x40007c00
 800883c:	40011800 	.word	0x40011800
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4aad      	ldr	r2, [pc, #692]	; (8008afc <UART_SetConfig+0x900>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d176      	bne.n	8008938 <UART_SetConfig+0x73c>
 800884a:	4bad      	ldr	r3, [pc, #692]	; (8008b00 <UART_SetConfig+0x904>)
 800884c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008852:	2b28      	cmp	r3, #40	; 0x28
 8008854:	d86c      	bhi.n	8008930 <UART_SetConfig+0x734>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <UART_SetConfig+0x660>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008901 	.word	0x08008901
 8008860:	08008931 	.word	0x08008931
 8008864:	08008931 	.word	0x08008931
 8008868:	08008931 	.word	0x08008931
 800886c:	08008931 	.word	0x08008931
 8008870:	08008931 	.word	0x08008931
 8008874:	08008931 	.word	0x08008931
 8008878:	08008931 	.word	0x08008931
 800887c:	08008909 	.word	0x08008909
 8008880:	08008931 	.word	0x08008931
 8008884:	08008931 	.word	0x08008931
 8008888:	08008931 	.word	0x08008931
 800888c:	08008931 	.word	0x08008931
 8008890:	08008931 	.word	0x08008931
 8008894:	08008931 	.word	0x08008931
 8008898:	08008931 	.word	0x08008931
 800889c:	08008911 	.word	0x08008911
 80088a0:	08008931 	.word	0x08008931
 80088a4:	08008931 	.word	0x08008931
 80088a8:	08008931 	.word	0x08008931
 80088ac:	08008931 	.word	0x08008931
 80088b0:	08008931 	.word	0x08008931
 80088b4:	08008931 	.word	0x08008931
 80088b8:	08008931 	.word	0x08008931
 80088bc:	08008919 	.word	0x08008919
 80088c0:	08008931 	.word	0x08008931
 80088c4:	08008931 	.word	0x08008931
 80088c8:	08008931 	.word	0x08008931
 80088cc:	08008931 	.word	0x08008931
 80088d0:	08008931 	.word	0x08008931
 80088d4:	08008931 	.word	0x08008931
 80088d8:	08008931 	.word	0x08008931
 80088dc:	08008921 	.word	0x08008921
 80088e0:	08008931 	.word	0x08008931
 80088e4:	08008931 	.word	0x08008931
 80088e8:	08008931 	.word	0x08008931
 80088ec:	08008931 	.word	0x08008931
 80088f0:	08008931 	.word	0x08008931
 80088f4:	08008931 	.word	0x08008931
 80088f8:	08008931 	.word	0x08008931
 80088fc:	08008929 	.word	0x08008929
 8008900:	2301      	movs	r3, #1
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e050      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008908:	2304      	movs	r3, #4
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e04c      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008910:	2308      	movs	r3, #8
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e048      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008918:	2310      	movs	r3, #16
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e044      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008920:	2320      	movs	r3, #32
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e040      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008928:	2340      	movs	r3, #64	; 0x40
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892e:	e03c      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008930:	2380      	movs	r3, #128	; 0x80
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008936:	e038      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a71      	ldr	r2, [pc, #452]	; (8008b04 <UART_SetConfig+0x908>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d130      	bne.n	80089a4 <UART_SetConfig+0x7a8>
 8008942:	4b6f      	ldr	r3, [pc, #444]	; (8008b00 <UART_SetConfig+0x904>)
 8008944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b05      	cmp	r3, #5
 800894c:	d826      	bhi.n	800899c <UART_SetConfig+0x7a0>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x758>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	0800896d 	.word	0x0800896d
 8008958:	08008975 	.word	0x08008975
 800895c:	0800897d 	.word	0x0800897d
 8008960:	08008985 	.word	0x08008985
 8008964:	0800898d 	.word	0x0800898d
 8008968:	08008995 	.word	0x08008995
 800896c:	2302      	movs	r3, #2
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e01a      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e016      	b.n	80089aa <UART_SetConfig+0x7ae>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e012      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898a:	e00e      	b.n	80089aa <UART_SetConfig+0x7ae>
 800898c:	2320      	movs	r3, #32
 800898e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008992:	e00a      	b.n	80089aa <UART_SetConfig+0x7ae>
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899a:	e006      	b.n	80089aa <UART_SetConfig+0x7ae>
 800899c:	2380      	movs	r3, #128	; 0x80
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a2:	e002      	b.n	80089aa <UART_SetConfig+0x7ae>
 80089a4:	2380      	movs	r3, #128	; 0x80
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a55      	ldr	r2, [pc, #340]	; (8008b04 <UART_SetConfig+0x908>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	f040 80f8 	bne.w	8008ba6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	dc46      	bgt.n	8008a4c <UART_SetConfig+0x850>
 80089be:	2b02      	cmp	r3, #2
 80089c0:	db75      	blt.n	8008aae <UART_SetConfig+0x8b2>
 80089c2:	3b02      	subs	r3, #2
 80089c4:	2b1e      	cmp	r3, #30
 80089c6:	d872      	bhi.n	8008aae <UART_SetConfig+0x8b2>
 80089c8:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <UART_SetConfig+0x7d4>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	08008a53 	.word	0x08008a53
 80089d4:	08008aaf 	.word	0x08008aaf
 80089d8:	08008a5b 	.word	0x08008a5b
 80089dc:	08008aaf 	.word	0x08008aaf
 80089e0:	08008aaf 	.word	0x08008aaf
 80089e4:	08008aaf 	.word	0x08008aaf
 80089e8:	08008a6b 	.word	0x08008a6b
 80089ec:	08008aaf 	.word	0x08008aaf
 80089f0:	08008aaf 	.word	0x08008aaf
 80089f4:	08008aaf 	.word	0x08008aaf
 80089f8:	08008aaf 	.word	0x08008aaf
 80089fc:	08008aaf 	.word	0x08008aaf
 8008a00:	08008aaf 	.word	0x08008aaf
 8008a04:	08008aaf 	.word	0x08008aaf
 8008a08:	08008a7b 	.word	0x08008a7b
 8008a0c:	08008aaf 	.word	0x08008aaf
 8008a10:	08008aaf 	.word	0x08008aaf
 8008a14:	08008aaf 	.word	0x08008aaf
 8008a18:	08008aaf 	.word	0x08008aaf
 8008a1c:	08008aaf 	.word	0x08008aaf
 8008a20:	08008aaf 	.word	0x08008aaf
 8008a24:	08008aaf 	.word	0x08008aaf
 8008a28:	08008aaf 	.word	0x08008aaf
 8008a2c:	08008aaf 	.word	0x08008aaf
 8008a30:	08008aaf 	.word	0x08008aaf
 8008a34:	08008aaf 	.word	0x08008aaf
 8008a38:	08008aaf 	.word	0x08008aaf
 8008a3c:	08008aaf 	.word	0x08008aaf
 8008a40:	08008aaf 	.word	0x08008aaf
 8008a44:	08008aaf 	.word	0x08008aaf
 8008a48:	08008aa1 	.word	0x08008aa1
 8008a4c:	2b40      	cmp	r3, #64	; 0x40
 8008a4e:	d02a      	beq.n	8008aa6 <UART_SetConfig+0x8aa>
 8008a50:	e02d      	b.n	8008aae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a52:	f7fd fb33 	bl	80060bc <HAL_RCCEx_GetD3PCLK1Freq>
 8008a56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a58:	e02f      	b.n	8008aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fd fb42 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a68:	e027      	b.n	8008aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a6a:	f107 0318 	add.w	r3, r7, #24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fd fc8e 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a78:	e01f      	b.n	8008aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a7a:	4b21      	ldr	r3, [pc, #132]	; (8008b00 <UART_SetConfig+0x904>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d009      	beq.n	8008a9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a86:	4b1e      	ldr	r3, [pc, #120]	; (8008b00 <UART_SetConfig+0x904>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	08db      	lsrs	r3, r3, #3
 8008a8c:	f003 0303 	and.w	r3, r3, #3
 8008a90:	4a1d      	ldr	r2, [pc, #116]	; (8008b08 <UART_SetConfig+0x90c>)
 8008a92:	fa22 f303 	lsr.w	r3, r2, r3
 8008a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a98:	e00f      	b.n	8008aba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a9a:	4b1b      	ldr	r3, [pc, #108]	; (8008b08 <UART_SetConfig+0x90c>)
 8008a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a9e:	e00c      	b.n	8008aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008aa0:	4b1a      	ldr	r3, [pc, #104]	; (8008b0c <UART_SetConfig+0x910>)
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa4:	e009      	b.n	8008aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aac:	e005      	b.n	8008aba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 81ee 	beq.w	8008e9e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	4a12      	ldr	r2, [pc, #72]	; (8008b10 <UART_SetConfig+0x914>)
 8008ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ad4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	4613      	mov	r3, r2
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	4413      	add	r3, r2
 8008ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d305      	bcc.n	8008af2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d910      	bls.n	8008b14 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008af8:	e1d1      	b.n	8008e9e <UART_SetConfig+0xca2>
 8008afa:	bf00      	nop
 8008afc:	40011c00 	.word	0x40011c00
 8008b00:	58024400 	.word	0x58024400
 8008b04:	58000c00 	.word	0x58000c00
 8008b08:	03d09000 	.word	0x03d09000
 8008b0c:	003d0900 	.word	0x003d0900
 8008b10:	0800a150 	.word	0x0800a150
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	2200      	movs	r2, #0
 8008b18:	60bb      	str	r3, [r7, #8]
 8008b1a:	60fa      	str	r2, [r7, #12]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	4ac0      	ldr	r2, [pc, #768]	; (8008e24 <UART_SetConfig+0xc28>)
 8008b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	2200      	movs	r2, #0
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	607a      	str	r2, [r7, #4]
 8008b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b36:	f7f7 fbd9 	bl	80002ec <__aeabi_uldivmod>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4619      	mov	r1, r3
 8008b42:	f04f 0200 	mov.w	r2, #0
 8008b46:	f04f 0300 	mov.w	r3, #0
 8008b4a:	020b      	lsls	r3, r1, #8
 8008b4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b50:	0202      	lsls	r2, r0, #8
 8008b52:	6979      	ldr	r1, [r7, #20]
 8008b54:	6849      	ldr	r1, [r1, #4]
 8008b56:	0849      	lsrs	r1, r1, #1
 8008b58:	2000      	movs	r0, #0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	eb12 0804 	adds.w	r8, r2, r4
 8008b62:	eb43 0905 	adc.w	r9, r3, r5
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	469a      	mov	sl, r3
 8008b6e:	4693      	mov	fp, r2
 8008b70:	4652      	mov	r2, sl
 8008b72:	465b      	mov	r3, fp
 8008b74:	4640      	mov	r0, r8
 8008b76:	4649      	mov	r1, r9
 8008b78:	f7f7 fbb8 	bl	80002ec <__aeabi_uldivmod>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4613      	mov	r3, r2
 8008b82:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b8a:	d308      	bcc.n	8008b9e <UART_SetConfig+0x9a2>
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b92:	d204      	bcs.n	8008b9e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b9a:	60da      	str	r2, [r3, #12]
 8008b9c:	e17f      	b.n	8008e9e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ba4:	e17b      	b.n	8008e9e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bae:	f040 80bd 	bne.w	8008d2c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008bb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	dc48      	bgt.n	8008c4c <UART_SetConfig+0xa50>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	db7b      	blt.n	8008cb6 <UART_SetConfig+0xaba>
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	d879      	bhi.n	8008cb6 <UART_SetConfig+0xaba>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <UART_SetConfig+0x9cc>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008c53 	.word	0x08008c53
 8008bcc:	08008c5b 	.word	0x08008c5b
 8008bd0:	08008cb7 	.word	0x08008cb7
 8008bd4:	08008cb7 	.word	0x08008cb7
 8008bd8:	08008c63 	.word	0x08008c63
 8008bdc:	08008cb7 	.word	0x08008cb7
 8008be0:	08008cb7 	.word	0x08008cb7
 8008be4:	08008cb7 	.word	0x08008cb7
 8008be8:	08008c73 	.word	0x08008c73
 8008bec:	08008cb7 	.word	0x08008cb7
 8008bf0:	08008cb7 	.word	0x08008cb7
 8008bf4:	08008cb7 	.word	0x08008cb7
 8008bf8:	08008cb7 	.word	0x08008cb7
 8008bfc:	08008cb7 	.word	0x08008cb7
 8008c00:	08008cb7 	.word	0x08008cb7
 8008c04:	08008cb7 	.word	0x08008cb7
 8008c08:	08008c83 	.word	0x08008c83
 8008c0c:	08008cb7 	.word	0x08008cb7
 8008c10:	08008cb7 	.word	0x08008cb7
 8008c14:	08008cb7 	.word	0x08008cb7
 8008c18:	08008cb7 	.word	0x08008cb7
 8008c1c:	08008cb7 	.word	0x08008cb7
 8008c20:	08008cb7 	.word	0x08008cb7
 8008c24:	08008cb7 	.word	0x08008cb7
 8008c28:	08008cb7 	.word	0x08008cb7
 8008c2c:	08008cb7 	.word	0x08008cb7
 8008c30:	08008cb7 	.word	0x08008cb7
 8008c34:	08008cb7 	.word	0x08008cb7
 8008c38:	08008cb7 	.word	0x08008cb7
 8008c3c:	08008cb7 	.word	0x08008cb7
 8008c40:	08008cb7 	.word	0x08008cb7
 8008c44:	08008cb7 	.word	0x08008cb7
 8008c48:	08008ca9 	.word	0x08008ca9
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	d02e      	beq.n	8008cae <UART_SetConfig+0xab2>
 8008c50:	e031      	b.n	8008cb6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c52:	f7fb fecd 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8008c56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c58:	e033      	b.n	8008cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c5a:	f7fb fedf 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8008c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c60:	e02f      	b.n	8008cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fd fa3e 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c70:	e027      	b.n	8008cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c72:	f107 0318 	add.w	r3, r7, #24
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fd fb8a 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c80:	e01f      	b.n	8008cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c82:	4b69      	ldr	r3, [pc, #420]	; (8008e28 <UART_SetConfig+0xc2c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c8e:	4b66      	ldr	r3, [pc, #408]	; (8008e28 <UART_SetConfig+0xc2c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	08db      	lsrs	r3, r3, #3
 8008c94:	f003 0303 	and.w	r3, r3, #3
 8008c98:	4a64      	ldr	r2, [pc, #400]	; (8008e2c <UART_SetConfig+0xc30>)
 8008c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ca0:	e00f      	b.n	8008cc2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008ca2:	4b62      	ldr	r3, [pc, #392]	; (8008e2c <UART_SetConfig+0xc30>)
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca6:	e00c      	b.n	8008cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ca8:	4b61      	ldr	r3, [pc, #388]	; (8008e30 <UART_SetConfig+0xc34>)
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cac:	e009      	b.n	8008cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb4:	e005      	b.n	8008cc2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 80ea 	beq.w	8008e9e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	4a55      	ldr	r2, [pc, #340]	; (8008e24 <UART_SetConfig+0xc28>)
 8008cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cdc:	005a      	lsls	r2, r3, #1
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	085b      	lsrs	r3, r3, #1
 8008ce4:	441a      	add	r2, r3
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf2:	2b0f      	cmp	r3, #15
 8008cf4:	d916      	bls.n	8008d24 <UART_SetConfig+0xb28>
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfc:	d212      	bcs.n	8008d24 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f023 030f 	bic.w	r3, r3, #15
 8008d06:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	085b      	lsrs	r3, r3, #1
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d16:	4313      	orrs	r3, r2
 8008d18:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008d20:	60da      	str	r2, [r3, #12]
 8008d22:	e0bc      	b.n	8008e9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d2a:	e0b8      	b.n	8008e9e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d30:	2b20      	cmp	r3, #32
 8008d32:	dc4b      	bgt.n	8008dcc <UART_SetConfig+0xbd0>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f2c0 8087 	blt.w	8008e48 <UART_SetConfig+0xc4c>
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	f200 8084 	bhi.w	8008e48 <UART_SetConfig+0xc4c>
 8008d40:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <UART_SetConfig+0xb4c>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008dd3 	.word	0x08008dd3
 8008d4c:	08008ddb 	.word	0x08008ddb
 8008d50:	08008e49 	.word	0x08008e49
 8008d54:	08008e49 	.word	0x08008e49
 8008d58:	08008de3 	.word	0x08008de3
 8008d5c:	08008e49 	.word	0x08008e49
 8008d60:	08008e49 	.word	0x08008e49
 8008d64:	08008e49 	.word	0x08008e49
 8008d68:	08008df3 	.word	0x08008df3
 8008d6c:	08008e49 	.word	0x08008e49
 8008d70:	08008e49 	.word	0x08008e49
 8008d74:	08008e49 	.word	0x08008e49
 8008d78:	08008e49 	.word	0x08008e49
 8008d7c:	08008e49 	.word	0x08008e49
 8008d80:	08008e49 	.word	0x08008e49
 8008d84:	08008e49 	.word	0x08008e49
 8008d88:	08008e03 	.word	0x08008e03
 8008d8c:	08008e49 	.word	0x08008e49
 8008d90:	08008e49 	.word	0x08008e49
 8008d94:	08008e49 	.word	0x08008e49
 8008d98:	08008e49 	.word	0x08008e49
 8008d9c:	08008e49 	.word	0x08008e49
 8008da0:	08008e49 	.word	0x08008e49
 8008da4:	08008e49 	.word	0x08008e49
 8008da8:	08008e49 	.word	0x08008e49
 8008dac:	08008e49 	.word	0x08008e49
 8008db0:	08008e49 	.word	0x08008e49
 8008db4:	08008e49 	.word	0x08008e49
 8008db8:	08008e49 	.word	0x08008e49
 8008dbc:	08008e49 	.word	0x08008e49
 8008dc0:	08008e49 	.word	0x08008e49
 8008dc4:	08008e49 	.word	0x08008e49
 8008dc8:	08008e3b 	.word	0x08008e3b
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d037      	beq.n	8008e40 <UART_SetConfig+0xc44>
 8008dd0:	e03a      	b.n	8008e48 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dd2:	f7fb fe0d 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8008dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dd8:	e03c      	b.n	8008e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dda:	f7fb fe1f 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8008dde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008de0:	e038      	b.n	8008e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd f97e 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008df0:	e030      	b.n	8008e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008df2:	f107 0318 	add.w	r3, r7, #24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fd faca 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e00:	e028      	b.n	8008e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e02:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <UART_SetConfig+0xc2c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d012      	beq.n	8008e34 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e0e:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <UART_SetConfig+0xc2c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	08db      	lsrs	r3, r3, #3
 8008e14:	f003 0303 	and.w	r3, r3, #3
 8008e18:	4a04      	ldr	r2, [pc, #16]	; (8008e2c <UART_SetConfig+0xc30>)
 8008e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e20:	e018      	b.n	8008e54 <UART_SetConfig+0xc58>
 8008e22:	bf00      	nop
 8008e24:	0800a150 	.word	0x0800a150
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	03d09000 	.word	0x03d09000
 8008e30:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008e34:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <UART_SetConfig+0xccc>)
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e38:	e00c      	b.n	8008e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e3a:	4b24      	ldr	r3, [pc, #144]	; (8008ecc <UART_SetConfig+0xcd0>)
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e3e:	e009      	b.n	8008e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e46:	e005      	b.n	8008e54 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e52:	bf00      	nop
    }

    if (pclk != 0U)
 8008e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d021      	beq.n	8008e9e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	4a1c      	ldr	r2, [pc, #112]	; (8008ed0 <UART_SetConfig+0xcd4>)
 8008e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e64:	461a      	mov	r2, r3
 8008e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e68:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	085b      	lsrs	r3, r3, #1
 8008e72:	441a      	add	r2, r3
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e7c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	2b0f      	cmp	r3, #15
 8008e82:	d909      	bls.n	8008e98 <UART_SetConfig+0xc9c>
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8a:	d205      	bcs.n	8008e98 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60da      	str	r2, [r3, #12]
 8008e96:	e002      	b.n	8008e9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008eba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3748      	adds	r7, #72	; 0x48
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ec8:	03d09000 	.word	0x03d09000
 8008ecc:	003d0900 	.word	0x003d0900
 8008ed0:	0800a150 	.word	0x0800a150

08008ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00a      	beq.n	8008efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f24:	f003 0304 	and.w	r3, r3, #4
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00a      	beq.n	8008f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00a      	beq.n	8008f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	f003 0320 	and.w	r3, r3, #32
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00a      	beq.n	8008fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01a      	beq.n	8008fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd2:	d10a      	bne.n	8008fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	605a      	str	r2, [r3, #4]
  }
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af02      	add	r7, sp, #8
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009028:	f7f8 fe2a 	bl	8001c80 <HAL_GetTick>
 800902c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0308 	and.w	r3, r3, #8
 8009038:	2b08      	cmp	r3, #8
 800903a:	d10e      	bne.n	800905a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800903c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f82f 	bl	80090ae <UART_WaitOnFlagUntilTimeout>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e025      	b.n	80090a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b04      	cmp	r3, #4
 8009066:	d10e      	bne.n	8009086 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f819 	bl	80090ae <UART_WaitOnFlagUntilTimeout>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e00f      	b.n	80090a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b09c      	sub	sp, #112	; 0x70
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	4613      	mov	r3, r2
 80090bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090be:	e0a9      	b.n	8009214 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c6:	f000 80a5 	beq.w	8009214 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ca:	f7f8 fdd9 	bl	8001c80 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d302      	bcc.n	80090e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80090da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d140      	bne.n	8009162 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090f4:	667b      	str	r3, [r7, #100]	; 0x64
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009100:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009102:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009104:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800910c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e6      	bne.n	80090e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	f023 0301 	bic.w	r3, r3, #1
 8009128:	663b      	str	r3, [r7, #96]	; 0x60
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009132:	64ba      	str	r2, [r7, #72]	; 0x48
 8009134:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e5      	bne.n	8009112 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2220      	movs	r2, #32
 800914a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2220      	movs	r2, #32
 8009152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e069      	b.n	8009236 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0304 	and.w	r3, r3, #4
 800916c:	2b00      	cmp	r3, #0
 800916e:	d051      	beq.n	8009214 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800917a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800917e:	d149      	bne.n	8009214 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009188:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800919e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091a8:	637b      	str	r3, [r7, #52]	; 0x34
 80091aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e6      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3308      	adds	r3, #8
 80091c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	613b      	str	r3, [r7, #16]
   return(result);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f023 0301 	bic.w	r3, r3, #1
 80091d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3308      	adds	r3, #8
 80091da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091dc:	623a      	str	r2, [r7, #32]
 80091de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	69f9      	ldr	r1, [r7, #28]
 80091e2:	6a3a      	ldr	r2, [r7, #32]
 80091e4:	e841 2300 	strex	r3, r2, [r1]
 80091e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e5      	bne.n	80091bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2220      	movs	r2, #32
 8009204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e010      	b.n	8009236 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	69da      	ldr	r2, [r3, #28]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4013      	ands	r3, r2
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	429a      	cmp	r2, r3
 8009222:	bf0c      	ite	eq
 8009224:	2301      	moveq	r3, #1
 8009226:	2300      	movne	r3, #0
 8009228:	b2db      	uxtb	r3, r3
 800922a:	461a      	mov	r2, r3
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	429a      	cmp	r2, r3
 8009230:	f43f af46 	beq.w	80090c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3770      	adds	r7, #112	; 0x70
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800923e:	b480      	push	{r7}
 8009240:	b085      	sub	sp, #20
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_UARTEx_DisableFifoMode+0x16>
 8009250:	2302      	movs	r3, #2
 8009252:	e027      	b.n	80092a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2224      	movs	r2, #36	; 0x24
 8009260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0201 	bic.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009282:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e02d      	b.n	8009324 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2224      	movs	r2, #36	; 0x24
 80092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0201 	bic.w	r2, r2, #1
 80092ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f84f 	bl	80093a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2220      	movs	r2, #32
 8009316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009340:	2302      	movs	r3, #2
 8009342:	e02d      	b.n	80093a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2224      	movs	r2, #36	; 0x24
 8009350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 0201 	bic.w	r2, r2, #1
 800936a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f811 	bl	80093a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2220      	movs	r2, #32
 8009392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d108      	bne.n	80093ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093c8:	e031      	b.n	800942e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093ca:	2310      	movs	r3, #16
 80093cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093ce:	2310      	movs	r3, #16
 80093d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	0e5b      	lsrs	r3, r3, #25
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 0307 	and.w	r3, r3, #7
 80093e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	0f5b      	lsrs	r3, r3, #29
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	f003 0307 	and.w	r3, r3, #7
 80093f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	7b3a      	ldrb	r2, [r7, #12]
 80093f6:	4911      	ldr	r1, [pc, #68]	; (800943c <UARTEx_SetNbDataToProcess+0x94>)
 80093f8:	5c8a      	ldrb	r2, [r1, r2]
 80093fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093fe:	7b3a      	ldrb	r2, [r7, #12]
 8009400:	490f      	ldr	r1, [pc, #60]	; (8009440 <UARTEx_SetNbDataToProcess+0x98>)
 8009402:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009404:	fb93 f3f2 	sdiv	r3, r3, r2
 8009408:	b29a      	uxth	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009410:	7bfb      	ldrb	r3, [r7, #15]
 8009412:	7b7a      	ldrb	r2, [r7, #13]
 8009414:	4909      	ldr	r1, [pc, #36]	; (800943c <UARTEx_SetNbDataToProcess+0x94>)
 8009416:	5c8a      	ldrb	r2, [r1, r2]
 8009418:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800941c:	7b7a      	ldrb	r2, [r7, #13]
 800941e:	4908      	ldr	r1, [pc, #32]	; (8009440 <UARTEx_SetNbDataToProcess+0x98>)
 8009420:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009422:	fb93 f3f2 	sdiv	r3, r3, r2
 8009426:	b29a      	uxth	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800942e:	bf00      	nop
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	0800a168 	.word	0x0800a168
 8009440:	0800a170 	.word	0x0800a170

08009444 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d121      	bne.n	800949a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	4b27      	ldr	r3, [pc, #156]	; (80094f8 <FMC_SDRAM_Init+0xb4>)
 800945c:	4013      	ands	r3, r2
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	6851      	ldr	r1, [r2, #4]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	6892      	ldr	r2, [r2, #8]
 8009466:	4311      	orrs	r1, r2
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	68d2      	ldr	r2, [r2, #12]
 800946c:	4311      	orrs	r1, r2
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	6912      	ldr	r2, [r2, #16]
 8009472:	4311      	orrs	r1, r2
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	6952      	ldr	r2, [r2, #20]
 8009478:	4311      	orrs	r1, r2
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	6992      	ldr	r2, [r2, #24]
 800947e:	4311      	orrs	r1, r2
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	69d2      	ldr	r2, [r2, #28]
 8009484:	4311      	orrs	r1, r2
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	6a12      	ldr	r2, [r2, #32]
 800948a:	4311      	orrs	r1, r2
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009490:	430a      	orrs	r2, r1
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	e026      	b.n	80094e8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	69d9      	ldr	r1, [r3, #28]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	4319      	orrs	r1, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	430b      	orrs	r3, r1
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <FMC_SDRAM_Init+0xb4>)
 80094be:	4013      	ands	r3, r2
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	6851      	ldr	r1, [r2, #4]
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	6892      	ldr	r2, [r2, #8]
 80094c8:	4311      	orrs	r1, r2
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	68d2      	ldr	r2, [r2, #12]
 80094ce:	4311      	orrs	r1, r2
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	6912      	ldr	r2, [r2, #16]
 80094d4:	4311      	orrs	r1, r2
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	6952      	ldr	r2, [r2, #20]
 80094da:	4311      	orrs	r1, r2
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	6992      	ldr	r2, [r2, #24]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	ffff8000 	.word	0xffff8000

080094fc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d128      	bne.n	8009560 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	1e59      	subs	r1, r3, #1
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	3b01      	subs	r3, #1
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	4319      	orrs	r1, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	3b01      	subs	r3, #1
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	4319      	orrs	r1, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	3b01      	subs	r3, #1
 8009536:	031b      	lsls	r3, r3, #12
 8009538:	4319      	orrs	r1, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	3b01      	subs	r3, #1
 8009540:	041b      	lsls	r3, r3, #16
 8009542:	4319      	orrs	r1, r3
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	3b01      	subs	r3, #1
 800954a:	051b      	lsls	r3, r3, #20
 800954c:	4319      	orrs	r1, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	3b01      	subs	r3, #1
 8009554:	061b      	lsls	r3, r3, #24
 8009556:	430b      	orrs	r3, r1
 8009558:	431a      	orrs	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	609a      	str	r2, [r3, #8]
 800955e:	e02d      	b.n	80095bc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	4b19      	ldr	r3, [pc, #100]	; (80095cc <FMC_SDRAM_Timing_Init+0xd0>)
 8009566:	4013      	ands	r3, r2
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	68d2      	ldr	r2, [r2, #12]
 800956c:	3a01      	subs	r2, #1
 800956e:	0311      	lsls	r1, r2, #12
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	6952      	ldr	r2, [r2, #20]
 8009574:	3a01      	subs	r2, #1
 8009576:	0512      	lsls	r2, r2, #20
 8009578:	430a      	orrs	r2, r1
 800957a:	431a      	orrs	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	1e59      	subs	r1, r3, #1
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	3b01      	subs	r3, #1
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	4319      	orrs	r1, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	3b01      	subs	r3, #1
 800959e:	021b      	lsls	r3, r3, #8
 80095a0:	4319      	orrs	r1, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	041b      	lsls	r3, r3, #16
 80095aa:	4319      	orrs	r1, r3
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	061b      	lsls	r3, r3, #24
 80095b4:	430b      	orrs	r3, r1
 80095b6:	431a      	orrs	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	ff0f0fff 	.word	0xff0f0fff

080095d0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80095d0:	b084      	sub	sp, #16
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	f107 001c 	add.w	r0, r7, #28
 80095de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80095e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80095e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80095ea:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80095ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80095f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80095f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <SDMMC_Init+0x50>)
 8009604:	4013      	ands	r3, r2
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	b004      	add	sp, #16
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	ffc02c00 	.word	0xffc02c00

08009624 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800963e:	b480      	push	{r7}
 8009640:	b083      	sub	sp, #12
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f043 0203 	orr.w	r2, r3, #3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0303 	and.w	r3, r3, #3
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800969a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80096a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80096a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68da      	ldr	r2, [r3, #12]
 80096b2:	4b06      	ldr	r3, [pc, #24]	; (80096cc <SDMMC_SendCommand+0x50>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	431a      	orrs	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	fffee0c0 	.word	0xfffee0c0

080096d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	b2db      	uxtb	r3, r3
}
 80096de:	4618      	mov	r0, r3
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b085      	sub	sp, #20
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3314      	adds	r3, #20
 80096f8:	461a      	mov	r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	4413      	add	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009736:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800973c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009742:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4313      	orrs	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	431a      	orrs	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800975a:	2300      	movs	r3, #0

}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009776:	2310      	movs	r3, #16
 8009778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800977a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800977e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009788:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff ff73 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009796:	f241 3288 	movw	r2, #5000	; 0x1388
 800979a:	2110      	movs	r1, #16
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f995 	bl	8009acc <SDMMC_GetCmdResp1>
 80097a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097a4:	69fb      	ldr	r3, [r7, #28]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b088      	sub	sp, #32
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80097bc:	2307      	movs	r3, #7
 80097be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097c6:	2300      	movs	r3, #0
 80097c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097d0:	f107 0308 	add.w	r3, r7, #8
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff ff50 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80097dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e0:	2107      	movs	r1, #7
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f972 	bl	8009acc <SDMMC_GetCmdResp1>
 80097e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ea:	69fb      	ldr	r3, [r7, #28]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3720      	adds	r7, #32
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009804:	2300      	movs	r3, #0
 8009806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009808:	2300      	movs	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800980c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009812:	f107 0308 	add.w	r3, r7, #8
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff ff2f 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fb96 	bl	8009f50 <SDMMC_GetCmdError>
 8009824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009826:	69fb      	ldr	r3, [r7, #28]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009838:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800983c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800983e:	2308      	movs	r3, #8
 8009840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800984c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009852:	f107 0308 	add.w	r3, r7, #8
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff ff0f 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fb28 	bl	8009eb4 <SDMMC_GetCmdResp7>
 8009864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009866:	69fb      	ldr	r3, [r7, #28]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3720      	adds	r7, #32
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b088      	sub	sp, #32
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800987e:	2337      	movs	r3, #55	; 0x37
 8009880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800988c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009890:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009892:	f107 0308 	add.w	r3, r7, #8
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff feef 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800989e:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a2:	2137      	movs	r1, #55	; 0x37
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f911 	bl	8009acc <SDMMC_GetCmdResp1>
 80098aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ac:	69fb      	ldr	r3, [r7, #28]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3720      	adds	r7, #32
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b088      	sub	sp, #32
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80098c4:	2329      	movs	r3, #41	; 0x29
 80098c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098d8:	f107 0308 	add.w	r3, r7, #8
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fecc 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fa2d 	bl	8009d44 <SDMMC_GetCmdResp3>
 80098ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ec:	69fb      	ldr	r3, [r7, #28]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3720      	adds	r7, #32
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b088      	sub	sp, #32
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009904:	2306      	movs	r3, #6
 8009906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800990c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800990e:	2300      	movs	r3, #0
 8009910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009916:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009918:	f107 0308 	add.w	r3, r7, #8
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff feac 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009924:	f241 3288 	movw	r2, #5000	; 0x1388
 8009928:	2106      	movs	r1, #6
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f8ce 	bl	8009acc <SDMMC_GetCmdResp1>
 8009930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009932:	69fb      	ldr	r3, [r7, #28]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3720      	adds	r7, #32
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009948:	2333      	movs	r3, #51	; 0x33
 800994a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800994c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009952:	2300      	movs	r3, #0
 8009954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800995a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800995c:	f107 0308 	add.w	r3, r7, #8
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff fe8a 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009968:	f241 3288 	movw	r2, #5000	; 0x1388
 800996c:	2133      	movs	r1, #51	; 0x33
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f8ac 	bl	8009acc <SDMMC_GetCmdResp1>
 8009974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009976:	69fb      	ldr	r3, [r7, #28]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3720      	adds	r7, #32
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800998c:	2302      	movs	r3, #2
 800998e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009990:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009996:	2300      	movs	r3, #0
 8009998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800999a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800999e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099a0:	f107 0308 	add.w	r3, r7, #8
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff fe68 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f97f 	bl	8009cb0 <SDMMC_GetCmdResp2>
 80099b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b4:	69fb      	ldr	r3, [r7, #28]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3720      	adds	r7, #32
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b088      	sub	sp, #32
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80099cc:	2309      	movs	r3, #9
 80099ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80099d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80099d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099e0:	f107 0308 	add.w	r3, r7, #8
 80099e4:	4619      	mov	r1, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff fe48 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f95f 	bl	8009cb0 <SDMMC_GetCmdResp2>
 80099f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099f4:	69fb      	ldr	r3, [r7, #28]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3720      	adds	r7, #32
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b088      	sub	sp, #32
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a16:	2300      	movs	r3, #0
 8009a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a20:	f107 0308 	add.w	r3, r7, #8
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff fe28 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	2103      	movs	r1, #3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f9c7 	bl	8009dc4 <SDMMC_GetCmdResp6>
 8009a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a38:	69fb      	ldr	r3, [r7, #28]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b088      	sub	sp, #32
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009a50:	230d      	movs	r3, #13
 8009a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a64:	f107 0308 	add.w	r3, r7, #8
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff fe06 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a74:	210d      	movs	r1, #13
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f828 	bl	8009acc <SDMMC_GetCmdResp1>
 8009a7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009a94:	230d      	movs	r3, #13
 8009a96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aa6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aa8:	f107 0308 	add.w	r3, r7, #8
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7ff fde4 	bl	800967c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab8:	210d      	movs	r1, #13
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f806 	bl	8009acc <SDMMC_GetCmdResp1>
 8009ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3720      	adds	r7, #32
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ada:	4b70      	ldr	r3, [pc, #448]	; (8009c9c <SDMMC_GetCmdResp1+0x1d0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a70      	ldr	r2, [pc, #448]	; (8009ca0 <SDMMC_GetCmdResp1+0x1d4>)
 8009ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae4:	0a5a      	lsrs	r2, r3, #9
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	fb02 f303 	mul.w	r3, r2, r3
 8009aec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	1e5a      	subs	r2, r3, #1
 8009af2:	61fa      	str	r2, [r7, #28]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009af8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009afc:	e0c9      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b02:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	4b67      	ldr	r3, [pc, #412]	; (8009ca4 <SDMMC_GetCmdResp1+0x1d8>)
 8009b08:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0ef      	beq.n	8009aee <SDMMC_GetCmdResp1+0x22>
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1ea      	bne.n	8009aee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2204      	movs	r2, #4
 8009b28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b2a:	2304      	movs	r3, #4
 8009b2c:	e0b1      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e0a6      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4a58      	ldr	r2, [pc, #352]	; (8009ca8 <SDMMC_GetCmdResp1+0x1dc>)
 8009b48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7ff fdc0 	bl	80096d0 <SDMMC_GetCommandResponse>
 8009b50:	4603      	mov	r3, r0
 8009b52:	461a      	mov	r2, r3
 8009b54:	7afb      	ldrb	r3, [r7, #11]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d001      	beq.n	8009b5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e099      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009b5e:	2100      	movs	r1, #0
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7ff fdc2 	bl	80096ea <SDMMC_GetResponse>
 8009b66:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	4b50      	ldr	r3, [pc, #320]	; (8009cac <SDMMC_GetCmdResp1+0x1e0>)
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	e08d      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	da02      	bge.n	8009b82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b80:	e087      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	e080      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009b9a:	2380      	movs	r3, #128	; 0x80
 8009b9c:	e079      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bac:	e071      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bbc:	e069      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bcc:	e061      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bdc:	e059      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bec:	e051      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bfc:	e049      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c0c:	e041      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c1c:	e039      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c2c:	e031      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c3c:	e029      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c4c:	e021      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009c5c:	e019      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009c6c:	e011      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009c78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c7c:	e009      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f003 0308 	and.w	r3, r3, #8
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c8c:	e001      	b.n	8009c92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3720      	adds	r7, #32
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	24000000 	.word	0x24000000
 8009ca0:	10624dd3 	.word	0x10624dd3
 8009ca4:	00200045 	.word	0x00200045
 8009ca8:	002000c5 	.word	0x002000c5
 8009cac:	fdffe008 	.word	0xfdffe008

08009cb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009cb8:	4b1f      	ldr	r3, [pc, #124]	; (8009d38 <SDMMC_GetCmdResp2+0x88>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a1f      	ldr	r2, [pc, #124]	; (8009d3c <SDMMC_GetCmdResp2+0x8c>)
 8009cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc2:	0a5b      	lsrs	r3, r3, #9
 8009cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc8:	fb02 f303 	mul.w	r3, r2, r3
 8009ccc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	1e5a      	subs	r2, r3, #1
 8009cd2:	60fa      	str	r2, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cdc:	e026      	b.n	8009d2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0ef      	beq.n	8009cce <SDMMC_GetCmdResp2+0x1e>
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1ea      	bne.n	8009cce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2204      	movs	r2, #4
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d0a:	2304      	movs	r3, #4
 8009d0c:	e00e      	b.n	8009d2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e003      	b.n	8009d2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a06      	ldr	r2, [pc, #24]	; (8009d40 <SDMMC_GetCmdResp2+0x90>)
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	24000000 	.word	0x24000000
 8009d3c:	10624dd3 	.word	0x10624dd3
 8009d40:	002000c5 	.word	0x002000c5

08009d44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009d4c:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <SDMMC_GetCmdResp3+0x74>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a1a      	ldr	r2, [pc, #104]	; (8009dbc <SDMMC_GetCmdResp3+0x78>)
 8009d52:	fba2 2303 	umull	r2, r3, r2, r3
 8009d56:	0a5b      	lsrs	r3, r3, #9
 8009d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5c:	fb02 f303 	mul.w	r3, r2, r3
 8009d60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	1e5a      	subs	r2, r3, #1
 8009d66:	60fa      	str	r2, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d70:	e01b      	b.n	8009daa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0ef      	beq.n	8009d62 <SDMMC_GetCmdResp3+0x1e>
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1ea      	bne.n	8009d62 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d004      	beq.n	8009da2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2204      	movs	r2, #4
 8009d9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d9e:	2304      	movs	r3, #4
 8009da0:	e003      	b.n	8009daa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a06      	ldr	r2, [pc, #24]	; (8009dc0 <SDMMC_GetCmdResp3+0x7c>)
 8009da6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	24000000 	.word	0x24000000
 8009dbc:	10624dd3 	.word	0x10624dd3
 8009dc0:	002000c5 	.word	0x002000c5

08009dc4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009dd2:	4b35      	ldr	r3, [pc, #212]	; (8009ea8 <SDMMC_GetCmdResp6+0xe4>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a35      	ldr	r2, [pc, #212]	; (8009eac <SDMMC_GetCmdResp6+0xe8>)
 8009dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ddc:	0a5b      	lsrs	r3, r3, #9
 8009dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de2:	fb02 f303 	mul.w	r3, r2, r3
 8009de6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	1e5a      	subs	r2, r3, #1
 8009dec:	61fa      	str	r2, [r7, #28]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d102      	bne.n	8009df8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009df2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009df6:	e052      	b.n	8009e9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0ef      	beq.n	8009de8 <SDMMC_GetCmdResp6+0x24>
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1ea      	bne.n	8009de8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e16:	f003 0304 	and.w	r3, r3, #4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d004      	beq.n	8009e28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2204      	movs	r2, #4
 8009e22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e24:	2304      	movs	r3, #4
 8009e26:	e03a      	b.n	8009e9e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d004      	beq.n	8009e3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2201      	movs	r2, #1
 8009e38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e02f      	b.n	8009e9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7ff fc46 	bl	80096d0 <SDMMC_GetCommandResponse>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d001      	beq.n	8009e52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e025      	b.n	8009e9e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	4a16      	ldr	r2, [pc, #88]	; (8009eb0 <SDMMC_GetCmdResp6+0xec>)
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e58:	2100      	movs	r1, #0
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff fc45 	bl	80096ea <SDMMC_GetResponse>
 8009e60:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d106      	bne.n	8009e7a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	0c1b      	lsrs	r3, r3, #16
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009e76:	2300      	movs	r3, #0
 8009e78:	e011      	b.n	8009e9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e88:	e009      	b.n	8009e9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e98:	e001      	b.n	8009e9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3720      	adds	r7, #32
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	24000000 	.word	0x24000000
 8009eac:	10624dd3 	.word	0x10624dd3
 8009eb0:	002000c5 	.word	0x002000c5

08009eb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ebc:	4b22      	ldr	r3, [pc, #136]	; (8009f48 <SDMMC_GetCmdResp7+0x94>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a22      	ldr	r2, [pc, #136]	; (8009f4c <SDMMC_GetCmdResp7+0x98>)
 8009ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec6:	0a5b      	lsrs	r3, r3, #9
 8009ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ecc:	fb02 f303 	mul.w	r3, r2, r3
 8009ed0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1e5a      	subs	r2, r3, #1
 8009ed6:	60fa      	str	r2, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ee0:	e02c      	b.n	8009f3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0ef      	beq.n	8009ed2 <SDMMC_GetCmdResp7+0x1e>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1ea      	bne.n	8009ed2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f0e:	2304      	movs	r3, #4
 8009f10:	e014      	b.n	8009f3c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e009      	b.n	8009f3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2240      	movs	r2, #64	; 0x40
 8009f38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f3a:	2300      	movs	r3, #0

}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	24000000 	.word	0x24000000
 8009f4c:	10624dd3 	.word	0x10624dd3

08009f50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f58:	4b11      	ldr	r3, [pc, #68]	; (8009fa0 <SDMMC_GetCmdError+0x50>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a11      	ldr	r2, [pc, #68]	; (8009fa4 <SDMMC_GetCmdError+0x54>)
 8009f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f62:	0a5b      	lsrs	r3, r3, #9
 8009f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f68:	fb02 f303 	mul.w	r3, r2, r3
 8009f6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1e5a      	subs	r2, r3, #1
 8009f72:	60fa      	str	r2, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d102      	bne.n	8009f7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f7c:	e009      	b.n	8009f92 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0f1      	beq.n	8009f6e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a06      	ldr	r2, [pc, #24]	; (8009fa8 <SDMMC_GetCmdError+0x58>)
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	24000000 	.word	0x24000000
 8009fa4:	10624dd3 	.word	0x10624dd3
 8009fa8:	002000c5 	.word	0x002000c5

08009fac <LEDRGB_On>:

/* Public function implementations
 * --------------------------------------------*/

void LEDRGB_On(LEDColor LED_Color)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  uint16_t redPin, bluePin;
  GPIO_TypeDef *redPort, *bluePort;

  redPin = USER_LED1_Pin;
 8009fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fba:	82fb      	strh	r3, [r7, #22]
  redPort = USER_LED1_GPIO_Port;
 8009fbc:	4b43      	ldr	r3, [pc, #268]	; (800a0cc <LEDRGB_On+0x120>)
 8009fbe:	613b      	str	r3, [r7, #16]
  bluePin = USER_LED2_Pin;
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	81fb      	strh	r3, [r7, #14]
  bluePort = USER_LED2_GPIO_Port;
 8009fc4:	4b41      	ldr	r3, [pc, #260]	; (800a0cc <LEDRGB_On+0x120>)
 8009fc6:	60bb      	str	r3, [r7, #8]

  switch (LED_Color)
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	2b07      	cmp	r3, #7
 8009fcc:	d87a      	bhi.n	800a0c4 <LEDRGB_On+0x118>
 8009fce:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <LEDRGB_On+0x28>)
 8009fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd4:	08009ff5 	.word	0x08009ff5
 8009fd8:	0800a00f 	.word	0x0800a00f
 8009fdc:	0800a029 	.word	0x0800a029
 8009fe0:	0800a043 	.word	0x0800a043
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a077 	.word	0x0800a077
 8009fec:	0800a091 	.word	0x0800a091
 8009ff0:	0800a0ab 	.word	0x0800a0ab
  {
    case RED:
      HAL_GPIO_WritePin(redPort, redPin, GPIO_PIN_SET);
 8009ff4:	8afb      	ldrh	r3, [r7, #22]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6938      	ldr	r0, [r7, #16]
 8009ffc:	f7f8 f904 	bl	8002208 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(bluePort, bluePin, GPIO_PIN_RESET);
 800a000:	89fb      	ldrh	r3, [r7, #14]
 800a002:	2200      	movs	r2, #0
 800a004:	4619      	mov	r1, r3
 800a006:	68b8      	ldr	r0, [r7, #8]
 800a008:	f7f8 f8fe 	bl	8002208 <HAL_GPIO_WritePin>
      break;
 800a00c:	e05a      	b.n	800a0c4 <LEDRGB_On+0x118>
    case GREEN:
      HAL_GPIO_WritePin(redPort, redPin, GPIO_PIN_RESET);
 800a00e:	8afb      	ldrh	r3, [r7, #22]
 800a010:	2200      	movs	r2, #0
 800a012:	4619      	mov	r1, r3
 800a014:	6938      	ldr	r0, [r7, #16]
 800a016:	f7f8 f8f7 	bl	8002208 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(bluePort, bluePin, GPIO_PIN_RESET);
 800a01a:	89fb      	ldrh	r3, [r7, #14]
 800a01c:	2200      	movs	r2, #0
 800a01e:	4619      	mov	r1, r3
 800a020:	68b8      	ldr	r0, [r7, #8]
 800a022:	f7f8 f8f1 	bl	8002208 <HAL_GPIO_WritePin>
      break;
 800a026:	e04d      	b.n	800a0c4 <LEDRGB_On+0x118>
    case BLUE:
      HAL_GPIO_WritePin(redPort, redPin, GPIO_PIN_RESET);
 800a028:	8afb      	ldrh	r3, [r7, #22]
 800a02a:	2200      	movs	r2, #0
 800a02c:	4619      	mov	r1, r3
 800a02e:	6938      	ldr	r0, [r7, #16]
 800a030:	f7f8 f8ea 	bl	8002208 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(bluePort, bluePin, GPIO_PIN_SET);
 800a034:	89fb      	ldrh	r3, [r7, #14]
 800a036:	2201      	movs	r2, #1
 800a038:	4619      	mov	r1, r3
 800a03a:	68b8      	ldr	r0, [r7, #8]
 800a03c:	f7f8 f8e4 	bl	8002208 <HAL_GPIO_WritePin>
      break;
 800a040:	e040      	b.n	800a0c4 <LEDRGB_On+0x118>
    case YELLOW:
      HAL_GPIO_WritePin(redPort, redPin, GPIO_PIN_SET);
 800a042:	8afb      	ldrh	r3, [r7, #22]
 800a044:	2201      	movs	r2, #1
 800a046:	4619      	mov	r1, r3
 800a048:	6938      	ldr	r0, [r7, #16]
 800a04a:	f7f8 f8dd 	bl	8002208 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(bluePort, bluePin, GPIO_PIN_RESET);
 800a04e:	89fb      	ldrh	r3, [r7, #14]
 800a050:	2200      	movs	r2, #0
 800a052:	4619      	mov	r1, r3
 800a054:	68b8      	ldr	r0, [r7, #8]
 800a056:	f7f8 f8d7 	bl	8002208 <HAL_GPIO_WritePin>
      break;
 800a05a:	e033      	b.n	800a0c4 <LEDRGB_On+0x118>
    case PURPLE:
      HAL_GPIO_WritePin(redPort, redPin, GPIO_PIN_SET);
 800a05c:	8afb      	ldrh	r3, [r7, #22]
 800a05e:	2201      	movs	r2, #1
 800a060:	4619      	mov	r1, r3
 800a062:	6938      	ldr	r0, [r7, #16]
 800a064:	f7f8 f8d0 	bl	8002208 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(bluePort, bluePin, GPIO_PIN_SET);
 800a068:	89fb      	ldrh	r3, [r7, #14]
 800a06a:	2201      	movs	r2, #1
 800a06c:	4619      	mov	r1, r3
 800a06e:	68b8      	ldr	r0, [r7, #8]
 800a070:	f7f8 f8ca 	bl	8002208 <HAL_GPIO_WritePin>
      break;
 800a074:	e026      	b.n	800a0c4 <LEDRGB_On+0x118>
    case CYAN:
      HAL_GPIO_WritePin(redPort, redPin, GPIO_PIN_RESET);
 800a076:	8afb      	ldrh	r3, [r7, #22]
 800a078:	2200      	movs	r2, #0
 800a07a:	4619      	mov	r1, r3
 800a07c:	6938      	ldr	r0, [r7, #16]
 800a07e:	f7f8 f8c3 	bl	8002208 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(bluePort, bluePin, GPIO_PIN_SET);
 800a082:	89fb      	ldrh	r3, [r7, #14]
 800a084:	2201      	movs	r2, #1
 800a086:	4619      	mov	r1, r3
 800a088:	68b8      	ldr	r0, [r7, #8]
 800a08a:	f7f8 f8bd 	bl	8002208 <HAL_GPIO_WritePin>
      break;
 800a08e:	e019      	b.n	800a0c4 <LEDRGB_On+0x118>
    case WHITE:
      HAL_GPIO_WritePin(redPort, redPin, GPIO_PIN_SET);
 800a090:	8afb      	ldrh	r3, [r7, #22]
 800a092:	2201      	movs	r2, #1
 800a094:	4619      	mov	r1, r3
 800a096:	6938      	ldr	r0, [r7, #16]
 800a098:	f7f8 f8b6 	bl	8002208 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(bluePort, bluePin, GPIO_PIN_SET);
 800a09c:	89fb      	ldrh	r3, [r7, #14]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	68b8      	ldr	r0, [r7, #8]
 800a0a4:	f7f8 f8b0 	bl	8002208 <HAL_GPIO_WritePin>
      break;
 800a0a8:	e00c      	b.n	800a0c4 <LEDRGB_On+0x118>
    case BLACK:
      HAL_GPIO_WritePin(redPort, redPin, GPIO_PIN_RESET);
 800a0aa:	8afb      	ldrh	r3, [r7, #22]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6938      	ldr	r0, [r7, #16]
 800a0b2:	f7f8 f8a9 	bl	8002208 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(bluePort, bluePin, GPIO_PIN_RESET);
 800a0b6:	89fb      	ldrh	r3, [r7, #14]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	68b8      	ldr	r0, [r7, #8]
 800a0be:	f7f8 f8a3 	bl	8002208 <HAL_GPIO_WritePin>
//      HAL_GPIO_WritePin(LEDR_L3_GPIO_Port, LEDR_L3_Pin, GPIO_PIN_RESET);
      break;
 800a0c2:	bf00      	nop
  }
}
 800a0c4:	bf00      	nop
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	58021800 	.word	0x58021800

0800a0d0 <__libc_init_array>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	4d0d      	ldr	r5, [pc, #52]	; (800a108 <__libc_init_array+0x38>)
 800a0d4:	4c0d      	ldr	r4, [pc, #52]	; (800a10c <__libc_init_array+0x3c>)
 800a0d6:	1b64      	subs	r4, r4, r5
 800a0d8:	10a4      	asrs	r4, r4, #2
 800a0da:	2600      	movs	r6, #0
 800a0dc:	42a6      	cmp	r6, r4
 800a0de:	d109      	bne.n	800a0f4 <__libc_init_array+0x24>
 800a0e0:	4d0b      	ldr	r5, [pc, #44]	; (800a110 <__libc_init_array+0x40>)
 800a0e2:	4c0c      	ldr	r4, [pc, #48]	; (800a114 <__libc_init_array+0x44>)
 800a0e4:	f000 f820 	bl	800a128 <_init>
 800a0e8:	1b64      	subs	r4, r4, r5
 800a0ea:	10a4      	asrs	r4, r4, #2
 800a0ec:	2600      	movs	r6, #0
 800a0ee:	42a6      	cmp	r6, r4
 800a0f0:	d105      	bne.n	800a0fe <__libc_init_array+0x2e>
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}
 800a0f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f8:	4798      	blx	r3
 800a0fa:	3601      	adds	r6, #1
 800a0fc:	e7ee      	b.n	800a0dc <__libc_init_array+0xc>
 800a0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a102:	4798      	blx	r3
 800a104:	3601      	adds	r6, #1
 800a106:	e7f2      	b.n	800a0ee <__libc_init_array+0x1e>
 800a108:	0800a180 	.word	0x0800a180
 800a10c:	0800a180 	.word	0x0800a180
 800a110:	0800a180 	.word	0x0800a180
 800a114:	0800a184 	.word	0x0800a184

0800a118 <memset>:
 800a118:	4402      	add	r2, r0
 800a11a:	4603      	mov	r3, r0
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d100      	bne.n	800a122 <memset+0xa>
 800a120:	4770      	bx	lr
 800a122:	f803 1b01 	strb.w	r1, [r3], #1
 800a126:	e7f9      	b.n	800a11c <memset+0x4>

0800a128 <_init>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	bf00      	nop
 800a12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12e:	bc08      	pop	{r3}
 800a130:	469e      	mov	lr, r3
 800a132:	4770      	bx	lr

0800a134 <_fini>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr
